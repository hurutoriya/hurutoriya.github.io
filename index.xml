<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shunya Ueta</title><link>https://shunyaueta.com/</link><description>Recent content on Shunya Ueta</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 26 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shunyaueta.com/index.xml" rel="self" type="application/rss+xml"/><item><title>[抄訳] Daria Sorokina さんによる、 Amazon 検索での製品のランキング付けの楽しさ at MLconf SF 2016</title><link>https://shunyaueta.com/posts/2021-12-26/</link><pubDate>Sun, 26 Dec 2021 22:52:06 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-12-26/</guid><description>
&lt;p>1 日遅れてしまいましたが、&lt;a href="https://adventar.org/calendars/6430">情報検索・検索技術 Advent Calendar 2021&lt;/a> 25 日目の記事です。&lt;/p>
&lt;p>ついにアドベントカレンダー最終日を迎えました!
今年はまだ検索領域のアドベントカレンダーが作られていないからということで、勢いで&lt;code>情報検索・検索技術 Advent Calendar 2021&lt;/code>を作りましたが、多くの方に投稿に協力していただきありがとうございました。&lt;/p>
&lt;p>社内勉強会の発表でネタを探しており、2016 年と少し昔の情報ですが、Amazon の製品検索において、どのようにランキングを行っているかの公演動画が非常に面白かったので、勉強がてら残したメモを記事として公開します。&lt;/p>
&lt;p>今回の口頭発表は &lt;a href="https://mlconf.com/">MLconf&lt;/a> という開発者会議(非学会・非アカデミック)で発表されています。
自分が知る限り、MLconf は機械学習黎明期から高品質な発表が継続されて発信されており、非常に素晴らしいカンファレンスの一つ。
国際会議には投稿されていないが、実応用の観点からしてとても学びの多い発表がとても多いです。
機械学習の応用を考えている場合、世界の最先端事例を知ることができるので非常におすすめです。&lt;/p>
&lt;hr>
&lt;h2 id="referemces">Referemces&lt;/h2>
&lt;blockquote>
&lt;p>Sorokina, D., &amp;amp; Cantu-Paz, E. (2016, July). Amazon search: The joy of ranking products. In Proceedings of the 39th International ACM SIGIR conference on Research and Development in Information Retrieval (pp. 459-460).&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.amazon.science/publications/amazon-search-the-joy-of-ranking-products">Amazon Search: The joy of ranking products in amazon science&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/NLrhmn-EZ88">Youtube&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="メモ">メモ&lt;/h2>
&lt;p>自分の私的な意見は &lt;code>NOTE:&lt;/code> で書いておきます。&lt;/p>
&lt;h3 id="search-ranking-models">Search Ranking Models&lt;/h3>
&lt;ul>
&lt;li>1Model = 1 context: 一つのモデルで一つの国の 1 カテゴリをサポート
&lt;ul>
&lt;li>日本の書籍カテゴリで 1 モデル、フランスの家電領域で更に一つのモデル&lt;/li>
&lt;li>モデルの軽量化と精度向上のためにコンテキストごとの最適化されたモデル作成を許している&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>現在、100 以上の機械学習モデルを利用している
&lt;ul>
&lt;li>GBDT ベースのモデルや、pairwise ランキングモデルなど&lt;/li>
&lt;li>モデルはだいたい 200 以上の tree で構成されている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>150 種類以上の特徴量が利用可能だが、それぞれのモデルが利用しているのは 30 以下
&lt;ul>
&lt;li>映画では、&lt;code>days_since_release&lt;/code> がとても重要だが、他のカテゴリではそうではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="training-labels">Training Labels&lt;/h3>
&lt;ul>
&lt;li>学習データを顧客の行動ログから作成する&lt;/li>
&lt;li>利用可能なポジティブラベルとして
&lt;ul>
&lt;li>クリックされたか?&lt;/li>
&lt;li>カートに入れられたか?&lt;/li>
&lt;li>購入されたか?&lt;/li>
&lt;li>消費されたか?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ネガティブなラベルとしては
&lt;ul>
&lt;li>無視された結果
&lt;ul>
&lt;li>検索結果には表示されたが、何も行動が起こされていない製品&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>検索結果から、そもそも表示されなかったページからランダムサンプリング
&lt;ul>
&lt;li>ページネーションにより表示されなかったページからサンプリングを行う(slide が消えていて見えなかったので論文から補足)。
&lt;ul>
&lt;li>&lt;code>NOTE:&lt;/code> アルゴリズムバイアスを加速させるような気もした。表示されなかったが良い商品をどうやって救い出すかも大事な観点。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="mixing-click-and-purchase-targets">Mixing Click and Purchase Targets&lt;/h3>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/1.png" alt="">&lt;/p>
&lt;ul>
&lt;li>何を目的変数とすべきか? クリックなのか、それとも購入か?
&lt;ul>
&lt;li>おそらく購入されたかどうかでしょう、なぜなら我々の最終目標は製品を売ることなので&lt;/li>
&lt;li>しかし、いつでも購入がゴールというわけではない&amp;hellip; 例をお見せします&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Keyword: iPhone
&lt;ul>
&lt;li>最もクリックされたもの
&lt;ul>
&lt;li>iPhone7。700 ドル以上もするのでクリックはされますが購入されません&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最も購入されたもの
&lt;ul>
&lt;li>一番購入されたものは何でしょうか? 最安価な iPhone モデルでしょうか?&lt;/li>
&lt;li>正解は&amp;hellip; 8 ドルの Lightning to USB Cable です&amp;hellip;!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>もし購入されたことのみを目的変数にしてしまった場合、iPhone と検索して Lightning Cable しか表示されなくなり、検索機能が壊れてしまいます。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/2.png" alt="">&lt;/p>
&lt;ul>
&lt;li>これがクリックと購入を混在させたモデルの検索結果になります
&lt;ul>
&lt;li>iPhone 5S は iPhone モデルシリーズで最も安く最も購入され、その後に 最もクリックされる iPhone7 その後に Lightning Cable が表示されています&lt;/li>
&lt;li>これによって、異なる顧客の意図を汲み取った検索結果を提供できるようになりました&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="fast-feature-evaluation">Fast Feature Evaluation&lt;/h2>
&lt;ul>
&lt;li>2 段階の特徴量選択
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>&lt;code>150→50&lt;/code>: ランダムな特徴集合よりも良い結果を出した特徴を選択&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>&lt;code>50→20&lt;/code>: 後方除去、前方選択により枝刈り&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ツリーのアンサンブルにおける特徴量のスコアリング
&lt;ul>
&lt;li>全てのツリーは特徴量のスコアリングアルゴリズムを持っている&lt;/li>
&lt;li>課題点として 2 値と連続値の特徴量は比較ができない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>is_prime_benefit&lt;/code> は Amazon Video で最も重要な特徴量である
&lt;ul>
&lt;li>しかし、特徴量選択では、いつもランダムな連続値の特徴量にスコアは低くなっている。何故?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>アンサンブルツリーはランダムな分割を多く実行する
&lt;ul>
&lt;li>単一のツリーの分散は最終段階では平均化される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>連続値の特徴量は更に可能な分割を提供する
&lt;ul>
&lt;li>よって、ランダムな分割で多く選ばれる&lt;/li>
&lt;li>それによりスコアリングが高くなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>それらを避けるには正規化の処理が重要になる&lt;/li>
&lt;li>異なる一様分布の値から 6 つのランダムな特徴量を作成・追加を行い、ビデオ領域で実験を行った
&lt;ul>
&lt;li>本来なら全ては意味のない特徴量なので、全ては同一の低いスコアリングがされるべきである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/3.png" alt="">&lt;/p>
&lt;ul>
&lt;li>しかし実験の結果、乱数の値に伴って対数的にスコアリングが変化していることがわかった&lt;/li>
&lt;li>正規化された特徴量スコアでのバギングツリーを我々は利用している
&lt;ul>
&lt;li>上記の手法は OSS として公開しています
&lt;ul>
&lt;li>&lt;a href="https://github.com/dariasor/TreeExtra">https://github.com/dariasor/TreeExtra&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>上記の手法を適用後、スコアリングが最も高くなったのは &lt;code>is_prime_benefit&lt;/code> 特徴量になりました&lt;/li>
&lt;li>All Product Search&lt;/li>
&lt;li>&lt;code>green&lt;/code> と検索を行うと以下の結果が出てくる&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/4.png" alt="">&lt;/p>
&lt;h2 id="components-of-the-blending-score">Components of the Blending Score&lt;/h2>
&lt;ul>
&lt;li>Fashion, Home&amp;amp;Kichen, Health カテゴリの商品が出てきます。どのように各カテゴリのスコアを計算しているのか?&lt;/li>
&lt;li>Query Category score
&lt;ul>
&lt;li>一般的なクエリ: クリック数、カートに追加したか、購入したか?&lt;/li>
&lt;li>稀なクエリ: クエリの trigrams , bigrams, unigrams でのクリック数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hunger score: 飢えのスコア(動的なスコア)
&lt;ul>
&lt;li>重要なカテゴリはこの Hunger Score が高くなりやすく設定&lt;/li>
&lt;li>他のカテゴリが選択されるたび Hunger Score が高くなり、それがカテゴリ選出のスコアリングでは重要になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>In-category relevance score for each product
&lt;ul>
&lt;li>relevency が高い製品は選ばれやすくなる&lt;/li>
&lt;li>このスコアは異なるカテゴリ間でも比較可能なものにしなければならない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>All Product Search - Blending&lt;/li>
&lt;li>&lt;code>green&lt;/code> というキーワードに対しての Blending Score の具体例&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/5.png" alt="">
&lt;ul>
&lt;li>Fashion, Kitchen, Books カテゴリの中からどのように各カテゴリの商品が選出されるか?&lt;/li>
&lt;li>各カテゴリの Query Score は、Fashion, Kitchen, Books の順番に高い&lt;/li>
&lt;li>初期の全ての Hunger score は 0。白 → 灰色 → 黒と Hunger score が高くなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/6.png" alt="">
&lt;ul>
&lt;li>まずはじめに、各カテゴリの Top1 製品の F1, K1, B1 を比較して、F1 が QueryScore に基づき最もスコアが高い F1 が選出される。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/7.png" alt="">
&lt;ul>
&lt;li>Fashion が選択されたので、Kitchen と Books の Hunger Score が高くなり、Hunger Score がより高い K1 が選出&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/8.png" alt="">
&lt;ul>
&lt;li>Fashion カテゴリは重要なので Hunger Score がより早く高くなりやすい。Query Score と合わせて、三番目には F2 が選出&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/9.png" alt="">
&lt;ul>
&lt;li>Books カテゴリの Hunger Score がとても高くなっているので、ついに B1 が 4 番目には選出される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/10.png" alt="">
&lt;ul>
&lt;li>上記の考えで各カテゴリ間でスコアを比較して検索結果に混ぜていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="match-set">Match Set&lt;/h2>
&lt;ul>
&lt;li>Match set は、クエリに対して返された結果の集合&lt;/li>
&lt;li>Match set は 2 つのパターンの製品を含む
&lt;ul>
&lt;li>例: &lt;code>zootopia&lt;/code> というクエリで、70538 個の mache set が返ってきた&lt;/li>
&lt;li>
&lt;ol>
&lt;li>Textual matches&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>クエリに対して、Query understanding 後に Product description とマッチした製品&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/11.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>Behavioral matches&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>そのクエリで検索後に、クリック、カートに追加、購入した商品の集合&lt;/li>
&lt;li>今回の場合は、&lt;code>zootopia&lt;/code> で検索後にクリック、カートに追加、購入した製品を指す。&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/12.png" alt="">&lt;/li>
&lt;li>どのように非 text-match が発生するか
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>&lt;code>zootopia&lt;/code> で検索&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/13.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>その後クリックはせずに、&lt;code>inside out&lt;/code>で検索を行い製品をクリック&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/14.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>この 1-2 を同一セッションとして Behaivioral feature として扱う&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/15.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>3 の特徴量を取り入れることで、非 text-match の製品を match set に取り込む&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/16.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="cold-start">Cold Start&lt;/h2>
&lt;ul>
&lt;li>新しい Harry Porrer の書籍が利用可能になります!
&lt;ul>
&lt;li>私達はこの書籍がベストセラーになることを知っていますが&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Behaivioral feature がまだ存在しない
&lt;ul>
&lt;li>どれくらいクリックされるかは我々は知らない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>古い書籍は多くの signal を持っているので、新しい書籍は下のランクに位置づけられる
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/17.png" alt="">&lt;/li>
&lt;li>求めている書籍が検索結果の下にあるのは顧客は不幸です。&lt;/li>
&lt;li>Business チームもこの異常事態を伝えてきます&lt;/li>
&lt;li>ジョークですが、非公式の指標として、「今すぐこれを直してください」の要求の数が低ければ低いほどよいです&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Day 0: 全ての behaivioral features は 0
&lt;ul>
&lt;li>時間特徴量がここでは助けになる(新製品にたいして Boost を行い、ランクを上にする)&lt;/li>
&lt;li>ここで顧客が製品に対してクリックを行い、signal が溜まっていきます&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Day 1: Behaivioral features はまだ更新されていない
&lt;ul>
&lt;li>クリック情報を持っているが、検索エンジンにはまだ反映されていない&lt;/li>
&lt;li>強靭なインフラが、新製品に対して signal の蓄積を迅速に反映させていく&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Day 7: Behavioral features はゆっくりと蓄積されていくようになる。
&lt;ul>
&lt;li>signal が十分にたまり、新製品としての時間特徴量の boost はここでは取り扱われなくなる&lt;/li>
&lt;li>ここから、適用されるスコアリングの公式が固定される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>殆どの人が Cold start は Day 0 に対してのみ考慮するが、Day0-7 まで考える必要がある&lt;/li>
&lt;li>時間経過にともなって、スコアリングをどう行っているか
&lt;ul>
&lt;li>理解が浅いのでここは省略します。だれか解説してくれると嬉しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="non-relevence-sort">Non relevence Sort&lt;/h2>
&lt;ul>
&lt;li>big keyward では match set がとても巨大になります
&lt;ul>
&lt;li>例: &lt;code>tv&lt;/code> というキーワードに対して家電カテゴリで 102,4635 の結果が存在する。&lt;/li>
&lt;li>relevance sort は適切な検索結果が返ってくるが&amp;hellip;&lt;/li>
&lt;li>Customer review での平均でソートを行うと
&lt;ul>
&lt;li>relevance がぐちゃぐちゃになってしまう。もちろんカスタマーレビューはありがたい機能ですが&amp;hellip;
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/6.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>改善方法
&lt;ul>
&lt;li>&lt;code>tv&lt;/code> というキーワードに対して 500 の製品タイプが Amazon catalog で存在する&lt;/li>
&lt;li>{query, product type} のペアでスコアを計算する
&lt;ul>
&lt;li>どの product type が特定のクエリにおいて最もクリック、カートに追加、購入されたか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>特定のキーワードでフィルターを行い、指定の product type の製品のみを表示するにした
&lt;ul>
&lt;li>keyboard→ キーボード製品&lt;/li>
&lt;li>USB→ フラッシュメモリ、ネットワークデバイス、入力デバイス&lt;/li>
&lt;li>TV→ テレビタイプ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>これによって Customer review の平均でソートを行っても relevance が保たれるようになった
&lt;ul>
&lt;li>&lt;code>tv&lt;/code>で customer review の平均で sort を行った際に 991 個の製品のみが表示され、relevance が向上した&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-12-26/images/6.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="蛇足">蛇足&lt;/h3>
&lt;p>この論文は、過去に読んだサーベイ論文で面白そうとメモしておいたのがきっかけで知ることができた。サーベイ論文の紹介記事はこちら&lt;/p>
&lt;p>&lt;a href="https://shunyaueta.com/posts/2021-07-10/">e コマースの検索と推薦についてのサーベイ論文である &amp;lsquo;Challenges and research opportunities in eCommerce search and recommendations&amp;rsquo; を社内勉強会で発表した&lt;/a>&lt;/p></description></item><item><title>Offers Magazine というメディアに、エンジニアによる業務実績の論文化について寄稿した</title><link>https://shunyaueta.com/posts/2021-12-07/</link><pubDate>Tue, 07 Dec 2021 22:58:10 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-12-07/</guid><description>
&lt;p>少し前のことだが、Offers Magazine さんに、「エンジニアによる業務実績の論文化」をテーマとして寄稿した。&lt;/p>
&lt;p>&lt;a href="https://offers.jp/media/sidejob/workstyle/a_1966">機械学習エンジニアの学会での論文発表のススメ。応募から査読通過までの流れ&lt;/a>&lt;/p>
&lt;p>メディアに寄稿するのは初めてなので良い経験になった。&lt;/p>
&lt;p>会社によっては業務成果を論文提出まで持っていくまでに難しい会社もあるかと思いますが、それに見合った対外的な成果を得れたので本当にやってよかったと思える。
USENIX は、MLOps に限らずシステムやセキュリティ、SRE 領域など、ソフトウェアエンジニア領域で幅広く投稿できるので、自分の成果を引用可能な形式で残したい人にはぜひ投稿してみたほしい。
素晴らしい仕組みを USENIX は提供していると思う。&lt;/p>
&lt;p>何より自分にとって、この分野のエキスパートのレビュアーからこの成果を対外発表するのは非常にリスペクトするとコメントをいただけたりして、良い刺激になった。&lt;/p>
&lt;p>論文公開して一年と少しが経過して、先日 Google Scholar を確認すると引用数が 1 になっていて非常に嬉しい!!&lt;/p>
&lt;p>&lt;a href="https://scholar.google.com.au/scholar?oi=bibs&amp;amp;hl=en&amp;amp;cites=7404769524731131444&amp;amp;as_sdt=5">Auto Content Moderation in C2C e-Commerce citation&lt;/a>&lt;/p>
&lt;p>2021 年には、機械学習エンジニアから検索エンジニアになったが、この分野も論文化できそうなネタが無限にあるので時間はかかるだろうが 2023 年には論文提出ができる段階になりたい(否、なる)。&lt;/p></description></item><item><title>投げ銭サービスのBuy me a cofee をBlog に導入してみた</title><link>https://shunyaueta.com/posts/2021-12-04/</link><pubDate>Sat, 04 Dec 2021 22:24:38 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-12-04/</guid><description>
&lt;p>@potato4d さんや @takuti さんがBlog に &lt;a href="https://www.buymeacoffee.com/">Buy me a cofee&lt;/a>を導入していて、自分も導入したいと思いたち、導入してみた。&lt;/p>
&lt;p>やったこととして、Blog記事の末尾に、サポート機能として自分の&lt;a href="https://www.buymeacoffee.com/hurutoriya">buy me a cofee&lt;/a>ページへのリンクが表示されるようにした。&lt;/p>
&lt;h2 id="導入経緯">導入経緯&lt;/h2>
&lt;p>以下のポストに強く共感と興味を持った。特に良い文章は抜粋しておく&lt;/p>
&lt;blockquote>
&lt;p>情報に対して価値を感じてくれた人に還元してもらえるのは素直に嬉しい&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://d.potato4d.me/entry/20200921-buy-me-a-coffee/">ブログに Buy Me a Coffee の投げ銭導線を設置した&lt;/a>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>@shu223 さんの&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>とにかく、「技術の発信」でも収入が得られる時代が到来しつつある&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://shu223.hatenablog.com/entry/2018/10/09/222341">技術書でご飯は食べられるのか？ #技術書典&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>技術で稼げるようになった今、内発的動機（興味）があっても外発的動機（お金）が伴わないと優先度が上がりにくいということは起きていて、だからこそ勉強自体でも稼げるようよう仕組み化したいと思っていて、それが去年から試行錯誤してる「技術情報発信のマネタイズ」です。
&lt;a href="https://twitter.com/shu223/status/1081721364250165248">tweet&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>の方針に凄く興味と共感が持てた。&lt;/p>
&lt;p>拝金主義というわけではなく、投げ銭文化自体が凄く良い文化なので自分もその波に乗ってみたさがあり、導入してみた。&lt;/p>
&lt;p>zenn やnote でも良い記事だなと思った際には、投げ銭をしたりするが、個人Blog でも簡単にその機能が作れるのは良い時代になった。&lt;/p>
&lt;p>もし自分が価値ある情報を提供することで、誰かの助けになり、その人達が還元してくれたなら凄くよいなと思った。業界全体がその流れになると面白いと思う。&lt;/p>
&lt;p>早速、この前書いた&lt;a href="https://shunyaueta.com/posts/2021-12-03/">記事&lt;/a> を友人に送ったら、メンテナンスお疲れ様の意をこめて Coffee ☕️ を奢ってくれた。&lt;/p>
&lt;blockquote>
&lt;p>へんたい運用お疲れ様でした
&lt;a href="https://www.buymeacoffee.com/hurutoriya/c/2266398">link&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>手探りで作った記憶が蘇る。開発、メンテとありがとう
&lt;a href="https://www.buymeacoffee.com/hurutoriya/c/2266262">link&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>2013年4月に友人とリリースした高専からの大学編入体験談投稿サービスが8年の時を経て成仏した</title><link>https://shunyaueta.com/posts/2021-12-03/</link><pubDate>Fri, 03 Dec 2021 23:28:52 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-12-03/</guid><description>
&lt;p>高専 5 年生の卒業前の春休みに友人 3 人と集まって、2013 年 4 月にリリースした個人開発の Web サービスが完全に終わりを迎えた。&lt;/p>
&lt;p>2021 年の現在から換算すると 8 年以上前の出来事であり、時の流れは凄まじい。&lt;/p>
&lt;p>先程アプリをデプロイしていた Heroku 上からも完全に削除をしたのだが、色々と昔のことを思い出したので筆を執ってみる。&lt;/p>
&lt;h2 id="開発当時">開発当時&lt;/h2>
&lt;p>当時仲の良かった同じクラスの友人 3 人で、春休みに友達の家に泊まりつつ 2 泊３日で、Rails 3 でロジック部分を作り上げた。
Twitter ログインや DB 定義なども本を読んだり、ネットの記事を参考にひいこら言いつつ実装していった。&lt;/p>
&lt;p>Heroku を使って、 &lt;a href="http://kosen.herokuapp.com/">http://kosen.herokuapp.com/&lt;/a> という URL でサービスを提供しており、Twitter ログインで編入体験談投稿、ログイン無しで掲示板で編入情報について交換できるような機能を提供していた。(注: サイト名のネーミングセンスが若気の至りすぎるので言及しません)&lt;/p>
&lt;p>最終的に Bootstrap で見た目を整えて、編入後の授業が本格的に始まる前の 2013/04/10 にはリリースしていた模様。&lt;/p>
&lt;p>共同開発した友人の 2013/04/28 に書かれた&lt;a href="https://blog.bobuhiro11.net/2013/04-28-hentai.html">当時のブログ記事&lt;/a>が残っていた。
8 年経過しても、その時の状況がブログ記事として残っているの凄い。
自分はブログのホスティングサービスをひたすら変遷して、現在の GitHub pages に落ち着いたので尊敬する。&lt;/p>
&lt;blockquote>
&lt;p>ついに動き出しました!!
編入体験談のまとめサービス
「HenTai ~編入体験談~」
&lt;a href="http://kosen.herokuapp.com">http://kosen.herokuapp.com&lt;/a>
午前 0:15 · 2013 年 4 月 10 日
&lt;a href="https://twitter.com/bobuhiro11/status/321642424604712960">tweet&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-12-03/images/1.png" alt="サービススクリーンショット">&lt;/p>
&lt;p>当時全く Web サービスの運用方法も全く知らない自分が、インターネット上に Rails アプリを公開できたので間違いなく Heroku のおかげだと思う。GitHub repository と連携して Push すれば Rails アプリがデプロイされる体験はとても簡単だった。&lt;/p>
&lt;p>リリースまでこぎつけれたのは、友人たちと開発できたから。自分ひとりだとここまでモチベーションも上がりきらなかったと思う。&lt;/p>
&lt;p>全体で 106 件の編入体験談が投稿されており、編入体験談の情報源として現在からしてもかなりの規模の情報を集めれたのではなかろうか。&lt;/p>
&lt;p>リリース後、投稿体験談を投稿してもらうために自分たちの知り合いをつてにに声をかけていたので、その影響か自分が編入した大学の体験談が 2-3 割を占めていた気がする。&lt;/p>
&lt;p>与太話として、何度か同大学の編入してきた後輩と話す機会があり、このサービスが話題になった際に&lt;/p>
&lt;blockquote>
&lt;p>「作ったの実は自分なんですよ」&lt;/p>
&lt;/blockquote>
&lt;p>と話すと、&lt;/p>
&lt;blockquote>
&lt;p>「あぁ、だからこの大学の体験談が多かったんですね~、編入する際にはめちゃくちゃ参考になりました!」&lt;/p>
&lt;/blockquote>
&lt;p>と毎回ポジティブな感想がもらえて、あぁ作ってよかったなぁとしみじみと感動していた記憶がある。&lt;/p>
&lt;p>この個人開発のサービスリリースのおかげで、編入後にベンチャー企業での Rails を利用した Web 開発のアルバイトを始めることができたり、Rails 繋がりでミクシィのインターンに合格するきっかけにもなった。
なので、この個人開発は自分の人生が前に進み出す大きなきっかけとなるサービスともなったのである。
また、作りたいものありきで道具の使い方を学習できたのは良かった。(だけど 6 年くらいはもう Ruby を書いていない気がする&amp;hellip;)&lt;/p>
&lt;p>目標がない状態で何かを学ぶよりも、やりたいことがあってそれをどう実現するかをベースに学べたのは今思い出しても本質的でかけがえのない経験だ。&lt;/p>
&lt;h2 id="個人開発の行方">個人開発の行方&lt;/h2>
&lt;p>現在の自分だと Rails で Heroku で Deploy するぞ!!! なんてするわけがなく、Google Form で編入体験談を収集して、マネージドの Web サイト(Google site とか)で公開して終わりなので、矜持もなにもあったもんではない。
これが価値観の変容&amp;hellip;
若気の至り、ここに極まり&lt;/p>
&lt;p>その後編入して 1 年ほど時間が立つと、学生生活が忙しくなりメンテナンスする余裕もなくなってきた。
リリースして一年ほど立つと Twitter のログイン機能が不具合を起こしていて、新規投稿ができない状態だった気がする。&lt;/p>
&lt;p>2 年ほど経過すると、Rails3 をアップデートしてくださいと、Heroku からメールが来てたりしていたがそれができないので個人開発の常である。
結局 Twitter ログインのの不具合は修正できず。。。&lt;/p>
&lt;p>2020 年の終わりまではサイトが閲覧できた状態だったと思うが先日アクセスしてみるとアプリが完全にダウンしていたので、良い機会なので Heroku 上からも完全に削除した。&lt;/p>
&lt;h2 id="一点だけ後悔している点">一点だけ後悔している点&lt;/h2>
&lt;p>投稿いただいた 106 件の体験談データが消えてしまったのは申し訳ない。次回データを預かるようなサービスを作成する際には、もし Web アプリ自体が運営できなくなったとしても、投稿されたデータはバックアップしておき、貴重なデータが消えないようにしておきたい。&lt;/p>
&lt;p>あらためて、編入体験談を投稿していただいた皆様、ありがとうございました。&lt;/p></description></item><item><title>kubernetes デプロイ時に `MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutable` エラーが出た際に対処方法</title><link>https://shunyaueta.com/posts/2021-12-02/</link><pubDate>Thu, 02 Dec 2021 16:48:54 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-12-02/</guid><description>
&lt;p>k8s で manifest file を編集して実行したら以下のようなエラーが出て実行できなかった。&lt;/p>
&lt;blockquote>
&lt;p>Exception ( Monitor Deploy )
Deploy failed: The Deployment “&amp;mdash;” is invalid: spec.selector: Invalid value: v1.LabelSelector{MatchLabels:map[string]string{“app”:“&amp;mdash;”}, MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutable&lt;/p>
&lt;/blockquote>
&lt;p>調べてみたところ、&lt;/p>
&lt;blockquote>
&lt;p>once deployed the label selectors of kubernetes service can not be updated until you decide to delete the existing deployment&lt;/p>
&lt;/blockquote>
&lt;p>ref: &lt;a href="https://github.com/kubernetes/client-go/issues/508#issuecomment-589296590">MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutabl #508&lt;/a>&lt;/p>
&lt;p>らしく、一度デプロイされたk8s service の label selector は、既存のdeployment を削除しないとアップデートは不可能らしい。&lt;/p>
&lt;p>なので、&lt;code>field is immutable&lt;/code>というエラー文は正しいわけですね。&lt;/p>
&lt;p>そのdeployment を削除しても良い状態なら、以下のコマンドを実行後再度デプロイすれば、k8s service のlabel selector は実行されます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">kubectl delete deploy &amp;lt;deployment-name&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>もしくは、k8s service のlabel selectorの変更を諦めて既存のまま運用するのがもう一つの正解でしょうか。&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/client-go/issues/508#issuecomment-589296590">MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutabl #508&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/53998259/invalid-spec-selector-after-upgrading-helm-template">Invalid spec selector after upgrading helm template&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Amazonがeコマース検索を Lucene により、どうスケールさせているか at Berlin Buzzwords 2019</title><link>https://shunyaueta.com/posts/2021-11-26/</link><pubDate>Fri, 26 Nov 2021 20:59:21 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-11-26/</guid><description>
&lt;p>&lt;a href="https://adventar.org/calendars/6430">情報検索・検索技術 Advent Calendar 2021&lt;/a> 1 日目の記事です。
早めに書き終えたので、カレンダー登録日の 2021/12/01 よりもはやめですが、記事を公開してしまいます。&lt;/p>
&lt;p>&lt;a href="https://2021.berlinbuzzwords.de/">Berlin Buzzwords&lt;/a> はドイツで毎年開催されている OSS を利用した検索、データ処理、データベースに焦点をあてたカンファレンスです。&lt;/p>
&lt;p>検索関係のシステムに携わっている場合、毎年面白い内容が目白押しなのでぜひとも見てほしい。&lt;/p>
&lt;p>今回は Berlin Buzzwords 2019 で発表された「Amazon では Lucene をどう活用して e コマース検索をスケールさせているか」の講演動画を社内勉強会で紹介するために視聴したので、そのメモを公開する。&lt;/p>
&lt;h2 id="e-commerce-search-at-scale-on-apache-lucene">E-Commerce search at scale on Apache Lucene&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=EkkzSLstSAE">YouTube&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://2019.berlinbuzzwords.de/19/session/e-commerce-search-scale-apache-lucene-tm.html">Web page&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://2019.berlinbuzzwords.de/sites/2019.berlinbuzzwords.de/files/media/documents/bbuzzamazonlucene2019.pdf">PDF&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分の所感などを切り分けるため、自分の意見は IMO ではじめた文にして、メモっています。&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;ul>
&lt;li>クエリの p999 latency に対して非常に厳しい制限を行っている
&lt;ul>
&lt;li>IMO
&lt;ul>
&lt;li>このクエリの p999 latency 定義は、Lucene+(おそらく内製で今も開発している、response を返すための Lucene server?)が返す検索のレスポンスを指していると思われる&lt;/li>
&lt;li>p99.9 latency を SLA として、監視しているのはたしかにとてもシビアな基準だと感じる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Amazon の query rate はめちゃくちゃピーキー (daily, weekly, yearly)&lt;/li>
&lt;li>Why Lucene?
&lt;ul>
&lt;li>Lucene は成熟しており、豊富な検索エンジンの機能が揃っている&lt;/li>
&lt;li>情熱を持ったコミュニティが存在している&lt;/li>
&lt;li>Uber, Airbnb, Linkedin 全部 Lucene を使っている&lt;/li>
&lt;li>&lt;a href="https://issues.apache.org/jira/browse/LUCENE-4100">maxscore scoring&lt;/a> , Weak AND, Lucene 8.0 での Codec の衝撃&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lucene design
&lt;ul>
&lt;li>100% Java で書かれている&lt;/li>
&lt;li>on-disc search with small in-memory index&lt;/li>
&lt;li>巨大な index を扱えるが、小さな RAM で実行可能&lt;/li>
&lt;li>高い並列性を兼ね揃えたインデキシングと検索機能&lt;/li>
&lt;li>ニアリアルタイムでの検索とインデキシング機能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Amazon での Lucene 利用例
&lt;ul>
&lt;li>ニアリアルタイムでのセグメントレプリケーション (Solr, Elastic Search とは別のレプリケーションの仕組み)
&lt;ul>
&lt;li>IMO: 登壇者の Mike さんが Lucene 6.0 をベースにした Near realtime replication が可能な&lt;a href="https://github.com/mikemccand/luceneserver">lucene server&lt;/a> を公開している。&lt;/li>
&lt;li>yelp が 2021/09 に OSS として、上記の lucene server をベースにした OSS を公開。解説記事も公開してくれている。&lt;a href="https://engineeringblog.yelp.com/2021/09/nrtsearch-yelps-fast-scalable-and-cost-effective-search-engine.html">Nrtsearch: Yelp’s Fast, Scalable and Cost Effective Search Engine&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>並行検索 → 複数のスレッドでの並行検索処理が可能 (Lucene で利用可能だが、Solr, ElasticSearch では 2019 年時点では利用不可)&lt;/li>
&lt;li>query time ではなく、index time で join を行いデータの結合を行っている。Lucene 6.0 で追加された BKD-tree を利用した Dimensional points 機能は、多次元空間を効率的に検索することができ、プライムデーで重宝されている。&lt;/li>
&lt;li>また拡張性の高いデザインのおかげでカスタマイズも容易。&lt;/li>
&lt;li>Custom term frequency などもとても便利。当初 Lucene にこの機能は存在しなかったので、我々で機能開発を行い Lucene にこの機能が搭載された。&lt;/li>
&lt;li>2019 年時点では、Solr, Elastic Search を使っていない。理由としては、Concurrent faceting, multi-phase ranking などの機能は Solr, Elastic Search は当時は利用できなかった。また、現時点で Lucene ベースでのモジュールを多数開発しているのも要因。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Open Source at Amazon
&lt;ul>
&lt;li>パフォーマンス課題や小さなバグなどを発見して、それらを解決していった。これはコミュニティみんなが嬉しい。(Solr, Elastic Search にも還元されるのでとても健全な流れだよね)&lt;/li>
&lt;li>以下の Lucene の機能は Amazon が開発を行い、貢献した
&lt;ul>
&lt;li>Custom term frequencies&lt;/li>
&lt;li>Concurrent indexing updates&lt;/li>
&lt;li>Concurrent faceting&lt;/li>
&lt;li>FST direct arc addressing
&lt;ul>
&lt;li>&lt;a href="https://issues.apache.org/jira/browse/LUCENE-8781">該当チケット&lt;/a>&lt;/li>
&lt;li>日本語での解説記事: &lt;a href="https://qiita.com/ikawaha/items/be95304a803020e1b2d1">Lucene で使われてる FST を実装してみた（正規表現マッチ：VM アプローチへの招待）&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Off-heaps FSTs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="service-architecture">Service architecture&lt;/h2>
&lt;ul>
&lt;li>Near-real-time replicaiton
&lt;ul>
&lt;li>Black Friday や Prime day などの爆発的にアクセスが増加するイベントなどに対応するために作成&lt;/li>
&lt;li>Solr, Elastic Search で提供される document level レプリケーションでは限界がある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Service architecture
&lt;ul>
&lt;li>AWS で構築&lt;/li>
&lt;li>ECS コンテナでインデクサー、サーチャーが稼働している&lt;/li>
&lt;li>Kinesis, DynamoDB からカタログが更新される&lt;/li>
&lt;li>ニアリアルタイムで、S3 にインデックスは保存される&lt;/li>
&lt;li>インデックスはソフトウェアが更新されるたびに、全て再構築される&lt;/li>
&lt;li>人為的なクエリでサービスを暖機運転&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Service system design
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2021-11-26/images/1.png" alt="Amazon serarch architecture">&lt;/li>
&lt;li>リクエストが来た際に、Collators がリクエストをさばいて、適切な view に割り振る。&lt;/li>
&lt;li>Index(i001, i002, &amp;hellip;) は S3 にリアルタイムで保存され、service はその index を読み込んで検索を行って、レスポンスを返す。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Searching a segmented index
&lt;ul>
&lt;li>Lucene には検索インデックスが必要で、分割型のアーキテクチャとなっている&lt;/li>
&lt;li>merge して結果を返す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Searching a segmented index concurrently
&lt;ul>
&lt;li>index は統計的に商品品質によりソート済&lt;/li>
&lt;li>この機能はシャードが巨大化している我々にとってレイテンシーを抑えるために非常に有用な機能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>p999 latency figure
&lt;ul>
&lt;li>青色のグラフの挙動は、Lucene の分割型アーキテクチャによって発生しており、並行検索がどのように優位性をもっているのかを説明する。縦軸は latency&lt;/li>
&lt;li>緑色のグラフは、どれくらいのサイズのセグメントがレプリカにコピーされているかを示している。縦軸は GB。
&lt;ul>
&lt;li>大きなセグメントがマージされたときにスパイクが発生する
&lt;ul>
&lt;li>通常は、小さなインデックスがマージされて大きなインデックスになることは良いことである、なぜならたくさんのファイルを開く必要がなくなるし、すべてのセグメントを探索しなくても良くなる。&lt;/li>
&lt;li>だが、Amazon の場合は、並行検索を行っているので、大きなセグメントが存在すると逆にレイテンシー増加の要因となる。なぜならセグメントの数が減少すると、検索の並行性も失われるため。例えば、10 のセグメントがあった場合、10 スレッドで並行検索を行えるが、一つのセグメントになってしまった場合、1 スレッドでの検索しかできなくなる。&lt;/li>
&lt;li>Mike さんは、例えば一つのセグメントに対して、複数スレッドで並行検索できるようになれば、この問題への改善が見込めると考えているらしい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>セグメントインデックスに対して、並行検索が可能になったことで、大きなセグメントを取り扱うことを避けれるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="performance-mesurement">Performance mesurement&lt;/h2>
&lt;ul>
&lt;li>Bemchmarking
&lt;ul>
&lt;li>&lt;a href="https://home.apache.org/~mikemccand/lucenebench/">Lucene nightly benchmarks&lt;/a>
&lt;ul>
&lt;li>上記と同じような方法で、各種クエリのパフォーマンスを常に測定している。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>perfoamance regression の検知は困難&lt;/li>
&lt;li>performance だけではなく、検索性能も自動的に評価&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Concurrent refresh
&lt;ul>
&lt;li>Lucene は、並行リフレッシュのために、インデックスサイドのアプリケーションのスレッドを借りるという問題があった
&lt;ul>
&lt;li>解決方法として、インデキシングが行われていないときのみ並行リフレッシュを行う機能を開発
&lt;ul>
&lt;li>&lt;a href="https://issues.apache.org/jira/browse/LUCENE-8700">Solution: use expert Lucene API to refresh concurrently &lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Gathering metrics using Lucene’s abstractions
&lt;ul>
&lt;li>Lucene の抽象化機能を使って、各指標を容易にモニタリング可能に&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Garbate correction is too hard
&lt;ul>
&lt;li>IMO: ここらへんは知識が足りず理解できなかったので、後から勉強&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="analysis-challanges">Analysis challanges&lt;/h2>
&lt;ul>
&lt;li>Context sensitive analysis
&lt;ul>
&lt;li>plane は何を意味する?&lt;/li>
&lt;li>おもちゃの airplane? &lt;code>plane ←→ airplane&lt;/code> の同義語&lt;/li>
&lt;li>synonym 拡張をを index time のみで行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Numbers a special
&lt;ul>
&lt;li>Toy for 3 year old というクエリには、 2-4 歳対象という文章は対象になる&lt;/li>
&lt;li>1500ml は 1.5 litters とマッチするべき&lt;/li>
&lt;li>1,100、1100、1.100 は一緒で、1/100、1:100 とは違う&lt;/li>
&lt;li>標準的な tokenizer の後に上記のハンドリングをするのは難しい&lt;/li>
&lt;li>句読点の取り扱いには注意&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WordDelimiterGraphFiltter
&lt;ul>
&lt;li>&lt;a href="https://lucene.apache.org/core/7_4_0/analyzers-common/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter.html">Lucene docs&lt;/a>
&lt;ul>
&lt;li>英語と数字の分割など細かい前処理が可能になる
&lt;ul>
&lt;li>e.g. &amp;ldquo;SD500&amp;rdquo; → &amp;ldquo;SD&amp;rdquo;, &amp;ldquo;500&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>機械学習はこの問題は解決可能だが、検索ではこのような機能もやはりまだ必要である。
&lt;ul>
&lt;li>IMO: Lucene の機能を使って解決可能なら、たしかにできる限り機械学習を使いたくない気持ちは非常に共感できる。ここまでレイテンシーの制約が厳しいなら増加要因は可能な限り抑えたい&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="query-optimization">Query optimization&lt;/h2>
&lt;ul>
&lt;li>Indexed Queries
&lt;ul>
&lt;li>多くのクエリは共通のフィルターを使っている。&lt;/li>
&lt;li>大元のインデックスに対して、共通で使われているフィルターを適用した結果を、インデキシングしてる? (post-processing index)。&lt;/li>
&lt;li>single term に置き換えて、パフォーマンスをチューニング&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Factoring queries
&lt;ul>
&lt;li>Boolean query&lt;/li>
&lt;li>&lt;a href="https://towardsdatascience.com/the-fp-growth-algorithm-1ffa20e839b8">FP growth algorithm&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Query 最適化のおかげで、 +30% redline QPS が増加。p99 latency は 81ms から 54ms へ。
&lt;ul>
&lt;li>IMO: P99 のレイテンシー公開して良いだろうか&amp;hellip;??? (p99.9 は公開していなかったので気になる)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Indexing tuples
&lt;ul>
&lt;li>multi stage search を single stage に圧縮している&lt;/li>
&lt;li>IMO: ここらへんの最適化は、Lucene の検索の仕組みをもっと理解しないとどうやって実現しているかまだ深く理解できない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lighting deals using dimensional points
&lt;ul>
&lt;li>当初は mike さんにより、地理検索などを目的として作られた機能。だが、地理検索には使用せず、Amazon での lighting deal に三次元データ(start time, end time, id) での三次元検索にこの dimensional points 機能を使ってる。&lt;/li>
&lt;li>IMO: by @takuya-a さん - 社内で発表した際に、なぜ start-time, end-time の 2 次元ではなく、id を入れた 3 次元にした検索にしたのかという質問に対する完璧な @takuya-a さんの推測
&lt;ul>
&lt;li>
&lt;blockquote>
&lt;p>ID も空間インデックスに含めることで、パフォーマンスを上げているのだとおもいます。ID が別フィールドだと、そっちのインデックスも検索して、空間インデックスの検索結果とマージして、って処理が後段で必要になるのですが、最初から ID も含めておくと BKD-tree の検索で全部処理できちゃうので。同じ期間で別の ID をもつセール対象商品がヒットしないので最初の段階でかなり絞り込めるようになるのだと思います&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>BKD tree の解説は @pon さんの記事がわかりやすいです
&lt;ul>
&lt;li>&lt;a href="https://po3rin.com/blog/bkdtree">検索エンジンの数値インデックスを支える Bkd-Tree&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="multi-phase-ranking">Multi phase ranking&lt;/h2>
&lt;ul>
&lt;li>Ranking
&lt;ul>
&lt;li>Machine Leraning models&lt;/li>
&lt;li>Multi phase ranking&lt;/li>
&lt;li>&lt;a href="https://issues.apache.org/jira/browse/LUCENE-8681">Prorated early termination&lt;/a>
&lt;ul>
&lt;li>IMO: スコアリングの知識が欠如しているのでメモだけ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Summary
&lt;ul>
&lt;li>Amazon で検索してるときには Lucene が使われているよ 100%ではないけども&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="question">Question&lt;/h2>
&lt;ul>
&lt;li>Q. indexing synonym を行っていると言っていたが、例えば query timing で synonym を扱えれば、検索者の文脈などを考慮した同義語を扱えるのではないのだろうか?
&lt;ul>
&lt;li>A. indexing synonym は主に効率性を重視した意思決定であり、基本的にトレードオフの関係となっている。Query rewrite なども行っているが、今回のトークは主に検索エンジンなので優先順的に Query Understanding 関係の話はしていません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://aws.amazon.com/jp/blogs/opensource/amazon-giving-back-apache-lucene/">What Amazon gets by giving back to Apache Lucene&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Lucene に詳しい同僚からは、Lucene に興味あるならこの本がおすすめと言われので読んでおきたい。
ちなみに著者は、この講演者のうちの一人である Mike McCandless さん&amp;hellip; (14 年間 Lucene の開発をしている!!)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/3FP8DWn">Lucene in Action 2nd edition&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>余談ですが、この人のことを同僚が、&lt;/p>
&lt;blockquote>
&lt;p>Lucene 界隈では神として知られていますね&lt;/p>
&lt;/blockquote>
&lt;p>と言っていて、笑った w&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://adventar.org/calendars/6430">情報検索・検索技術 Advent Calendar 2021&lt;/a> の次の記事は
@sz_dr さんで 4 日目を担当してくれます!&lt;/p></description></item><item><title>Standard SQLのCOALESCEで、時間経過によってカラム名が変化したデータを柔軟に抽出する</title><link>https://shunyaueta.com/posts/2021-11-06/</link><pubDate>Sat, 06 Nov 2021 22:40:02 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-11-06/</guid><description>
&lt;p>データの蓄積帰還が長くなってくると、例えば JSON 形式でログを取っているが、同じデータでもマイグレーションやロギングロジックの更新などで&lt;code>key&lt;/code> の名前が変化したりする場合がある。&lt;/p>
&lt;p>その場合取り扱いに困るのが、古い key と新しい key をどのように併合するかだ。
例えば特定の日次できれいにデータが入れ替わっているのなら、色々やりようがあるが、クライアントなどのログの場合データの変化も均一ではないので、徐々に変化していることが大半なので、日次で別々の抽出をして結合するというアプローチも難しい。&lt;/p>
&lt;p>その際に役立つのが Standard SQL 条件付き構文の &lt;a href="(https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions#coalesce)">COALESCE&lt;/a> だ。&lt;/p>
&lt;p>&lt;code>COALECSCE&lt;/code> は、引数の最初の非 NULL の値を返す関数で、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">COALESCE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>だと &lt;code>B&lt;/code>が返される。この関数を使うことで、複数カラムを一つに併合することができる。&lt;/p>
&lt;h2 id="具体例を交えつつ実践してみる">具体例を交えつつ実践してみる&lt;/h2>
&lt;p>例えば、以下のように昔のカラム名が &lt;code>title&lt;/code> で、全く同じデータが新しいカラムの &lt;code>title_v2&lt;/code> に入ってきているとする。&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> json を例題に key の抽出にしたほうが実際の状況に沿いますが、カラムのみで表現したほうが説明が簡単なので今回はそちらを採用。&lt;/p>
&lt;h3 id="用意したデータ">用意したデータ&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">WITH&lt;/span> &lt;span class="n">menues&lt;/span> &lt;span class="k">AS&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;うどん&amp;#34;&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">title_v2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/06&amp;#34;&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">created&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;ラーメン&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/07&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;そば&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/08&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;カツ丼&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/09&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;カツ丼&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;カツ丼&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/10&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;カレー&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/11&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">menues&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>title&lt;/th>
&lt;th>title_v2&lt;/th>
&lt;th>created&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>うどん&lt;/td>
&lt;td>&lt;/td>
&lt;td>2021/10/06&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ラーメン&lt;/td>
&lt;td>&lt;/td>
&lt;td>2021/10/07&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>そば&lt;/td>
&lt;td>2021/10/08&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カツ丼&lt;/td>
&lt;td>&lt;/td>
&lt;td>2021/10/09&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カツ丼&lt;/td>
&lt;td>カツ丼&lt;/td>
&lt;td>2021/10/10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>カレー&lt;/td>
&lt;td>2021/10/11&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>2021/10/10&lt;/code> のデータなどは旧カラムと新カラムにダブルライトされています。&lt;/p>
&lt;h3 id="coalesce-で複数カラムを併合する">COALESCE で複数カラムを併合する&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">WITH&lt;/span> &lt;span class="n">menues&lt;/span> &lt;span class="k">AS&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;うどん&amp;#34;&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">title_v2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/06&amp;#34;&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">created&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;ラーメン&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/07&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;そば&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/08&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;カツ丼&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/09&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="s2">&amp;#34;カツ丼&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;カツ丼&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/09&amp;#34;&lt;/span> &lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;カレー&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;2021/10/10&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="n">COALESCE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">title_v2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">created&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="n">menues&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="結果">結果&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>title&lt;/th>
&lt;th>created&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>うどん&lt;/td>
&lt;td>2021/10/06&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ラーメン&lt;/td>
&lt;td>2021/10/07&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>そば&lt;/td>
&lt;td>2021/10/08&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カツ丼&lt;/td>
&lt;td>2021/10/09&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カツ丼&lt;/td>
&lt;td>2021/10/09&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>カレー&lt;/td>
&lt;td>2021/10/10&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上記の結果のように&lt;code>COALESCE&lt;/code> を使えば２つの時間経過によって別れてしまったカラムを一つのカラムとして併合することができました。
常に便利ですね。&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions#coalesce">BigQuery Conditional expressions- COALESCE&lt;/a>&lt;/p></description></item><item><title>Google Cloud Pub/Sub に公開された結果はDataflow template を使えばめちゃくちゃ簡単に確認できる</title><link>https://shunyaueta.com/posts/2021-11-05/</link><pubDate>Fri, 05 Nov 2021 23:05:22 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-11-05/</guid><description>
&lt;p>PubSub に出力された結果を確認するのって、なかなか手間がかかりませんか?&lt;/p>
&lt;p>最近同僚に簡単な確認方法を教えてもらい、感動したのでそれを記事にしました。&lt;/p>
&lt;h2 id="確認方法">確認方法&lt;/h2>
&lt;ol>
&lt;li>PubSub のメッセージを出力する Google Cloud Storage bucket を同一 GCP プロジェクトで作成する。&lt;/li>
&lt;li>GCP の Pub/Sub ページに移動する&lt;/li>
&lt;li>確認したい Pub/Sub topic をクリックする&lt;/li>
&lt;li>ページ下部にある &lt;code>CREATE SUBSCRIPTION&lt;/code> ボタンを押すと選択肢で、&lt;code>Create subscription&lt;/code>, &lt;code>Export to BigQuery&lt;/code>, &lt;code>Export to Cloud Storage&lt;/code>があり、 &lt;code>Export to Cloud Storage&lt;/code>を選択する。
&lt;ul>
&lt;li>BigQuery、 Google Cloud Storage への吐き出しを行い際に、自動的に subscription が生成される。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Export to Cloud Storage&lt;/code> を選択すると、Text 形式か Abro 形式での出力にするかを選択できる。基本的には簡単に確認できる Text 形式を選ぶと良さげ。&lt;/li>
&lt;li>選択後、下記のような設定画面が出てくるので情報を埋めていく。基本的には、どこの Google Cloud Storage に出力するかを埋めれば完了。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-11-05/images/1.png" alt="Export to Cloud Storage config">&lt;/p>
&lt;ol>
&lt;li>10m ほどすると Streaming job の Dataflow の起動が完了して、一定期間ごとに Pub/Sub の topic に公開されたデータがテキスト形式で出力され始めます。&lt;/li>
&lt;li>出力された GCS の結果を眺めるには、 &lt;code>gsutil&lt;/code> コマンドなどを使うのが簡単です。自分は&lt;code>gsutil cat&lt;/code> の結果をコピーして VS Code で確認しています。&lt;/li>
&lt;/ol>
&lt;p>Cloud Dataflow のテンプレート機能については、端的に説明すると、GUI でパラメータを設定するだけで、Dataflow によるデータ処理が簡単に実行できるようになる機能です。&lt;/p>
&lt;p>詳しくは、 GCPUG での&lt;a href="https://medium.com/google-cloud-jp/cloud-dataflow-%E3%81%8C%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AB%E3%82%88%E3%82%8A%E6%B0%97%E8%BB%BD%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E9%80%B2%E5%8C%96%E3%81%97%E3%81%9F%E8%A9%B1-f8105ea956d3">Cloud Dataflow がテンプレートにより気軽に使えるサーバーレスのサービスに進化した話
&lt;/a>の記事がわかりやすいのでごらんください。&lt;/p></description></item><item><title>Airflow でDAGを任意のタイミングで一度だけ実行する方法</title><link>https://shunyaueta.com/posts/2021-10-12/</link><pubDate>Tue, 12 Oct 2021 00:07:05 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-10-12/</guid><description>
&lt;p>Airflow で作成したDAGを自動で定期実行せずに、あえて手動実行で一度だけ実行したい場合もある。&lt;/p>
&lt;p>&lt;code>DAG&lt;/code>のオプションを以下のように設定する。&lt;/p>
&lt;ol>
&lt;li>&lt;code>schedule_interval&lt;/code> を &amp;ldquo;@once&amp;rdquo; に設定することで、一度だけDAGが実行される&lt;/li>
&lt;li>&lt;code>is_paused_upon_creation&lt;/code> を &lt;code>True&lt;/code> に設定することで、DAGが作成時に自動的に実行されず、DAGが停止状態で作成される。
デフォルトでは&lt;code>False&lt;/code>となっており、自動実行される。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">airflow&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">DAG&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">DAG&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">dag_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;sellerscore_initial_batch&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># NOTE: dosen&amp;#39;t need to repeat&lt;/span>
&lt;span class="n">schedule_interval&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;@once&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1"># NOTE: we have to manually start the this DAG&lt;/span>
&lt;span class="n">is_paused_upon_creation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">dag&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/65742424/airflow-schedule-interval-once">Airflow: schedule_interval = &amp;lsquo;@once&amp;rsquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/dag/index.html?highlight=is_paused#airflow.models.dag.DagModel.is_paused_at_creation">Docs - airflow.models.dag&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>クエリ分類(Query Classification) について社内の勉強会で話してきた</title><link>https://shunyaueta.com/posts/2021-10-09/</link><pubDate>Sat, 09 Oct 2021 00:42:40 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-10-09/</guid><description>
&lt;p>今年の 10 月から、新しく入社した同僚とともに、検索領域の論文や技術ブログを定期的に紹介する社内勉強会をはじめてみた。
定常的に開催されることが一番大事だよねという方針になったので、以下のような仕組みで、可能な限り低コストで継続できるような仕組みにした。&lt;/p>
&lt;ul>
&lt;li>参加者は何も準備をしなくても大丈夫で、勉強会中に紹介された論文をみたり話を聞くだけで良い&lt;/li>
&lt;li>発表者は凝った資料は用意するのは必須ではなく、極論論文を画面共有で見せながらしゃべるだけでも問題なし&lt;/li>
&lt;/ul>
&lt;p>当面の目標としては、来年の年末まで継続されているように気長に続けていきたい。&lt;/p>
&lt;p>第一回は、発起人の一人である自分がクエリ分類について発表を行った。&lt;/p>
&lt;p>&lt;a href="https://amzn.to/3iKG1Vp">Query Understanding for Search Engines (The Information Retrieval Series, 46)&lt;/a> の第二章を主にテーマとして取り上げて紹介した。&lt;/p>
&lt;p>メイントピックは KDDCup2005 として開催されたクエリ分類コンペの優勝者の手法について紹介を行ったので、気になる方はスライドを公開しているので御覧ください。&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/5KJ09u6AURGBVq" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/shunyaueta/query-understanding-for-search-engines-chap2-query-classification" title="Query Understanding for Search Engines. Chap2 Query Classification" target="_blank">Query Understanding for Search Engines. Chap2 Query Classification&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/shunyaueta" target="_blank">Shunya Ueta&lt;/a>&lt;/strong> &lt;/div>
&lt;p>このコンペの特徴として、&lt;/p>
&lt;ul>
&lt;li>データセットが生データ特有の問題として汚い&lt;/li>
&lt;li>そしてラベルデータの規模がとても少ない&lt;/li>
&lt;/ul>
&lt;p>という鬼畜仕様だった。
だがコンペ参加者はそんな状態を物と物せずにありとあらゆる手段で精度向上に努めていてそれらの手法と姿勢がとても参考になった。&lt;/p>
&lt;p>検索領域は本当に奥深い&amp;hellip;&lt;/p></description></item><item><title>Hugo で記事の更新日をgitと連携して自動的に取得して表示させる</title><link>https://shunyaueta.com/posts/2021-10-06/</link><pubDate>Wed, 06 Oct 2021 20:38:58 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-10-06/</guid><description>
&lt;p>最近昔書いていた技術記事の情報が古くなりすぎて不正確なこともあったので、書き直すときがあったのだが、そのときに自動的に最終更新日を記事に表記できないか探していたら、実現方法があったのでメモしておきます。&lt;/p>
&lt;p>やっていることは
&lt;a href="https://www.andrewjstevens.com/posts/2021/03/last-modified-date-with-hugo/">Last Modified Date with Hugo&lt;/a>
の記事をと完全に一緒だが、日本語での情報が無かったので備忘録がてら記録を残す。&lt;/p>
&lt;p>Hugo は各ページに関する情報を&lt;a href="https://gohugo.io/content-management/front-matter/#front-matter-variables">Front Matter Variables&lt;/a> という仕組みで Markdown 上に定義します。
主に YAML 形式で記述されていることが多いです。&lt;/p>
&lt;p>&lt;code>lastmod&lt;/code> という変数が更新日を表す変数であり、この変数に対して更新日の情報を与えてやれば記事の最終更新日を表現することができる。&lt;/p>
&lt;p>Front Matter に &lt;code>lastmod: &amp;quot;2021-03-31&amp;quot;&lt;/code> の形式で与えておけば、以下の形式で記事作成日と最終更新日を表記できる。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">{{ $date := .Date.Format &amp;#34;02.01.2006&amp;#34; }} {{ $lastmod := .Lastmod.Format
&amp;#34;02.01.2006&amp;#34; }}
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Published on: {{ $date }}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Edited on: {{ $lastmod }}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>だが、毎回記事を編集するたびに lastmod 変数を追記するのは面倒なので自動化できるなら自動化したい。&lt;/p>
&lt;p>&lt;code>config.yaml&lt;/code> で、以下の設定を行う。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">enableGitInfo&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>enableGitInfo&lt;/code>を &lt;code>true&lt;/code>にすることで、各ページに対して&lt;a href="https://gohugo.io/getting-started/configuration/#enablegitinfo">Git 情報を更新日として付与&lt;/a>してくれる。&lt;/p>
&lt;p>最後に&lt;code>config.yaml&lt;/code> で以下の設定を行えば、 Front Matter の &lt;code>lastmod&lt;/code> 変数に対して、 Front Matter で定義されている&lt;code>lastmod&lt;/code>、もしその情報がなければ各ページの &lt;code>git&lt;/code>の最終コミット日を返すという設定がされる。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">frontmatter&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">lastmod&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- lastmod&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="p">:&lt;/span>git&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考になると思うので、当ブログでの実際の変更点は&lt;a href="https://github.com/hurutoriya/hurutoriya.github.io/commit/cc2f2916fe87dcad4f300109edc8606700899c72">こちら&lt;/a>&lt;/p>
&lt;p>テンプレートを上書きするように、&lt;code>./layout&lt;/code>配下のページを編集した。
hugo の記事でたまに見かけるのがテーマを直接編集している人がいるが、それは筋が良くない方法です。&lt;/p>
&lt;p>なぜかというと、hugo の設計はよくできているので、&lt;code>./layout&lt;/code> 配下に&lt;code>theme&lt;/code>と同じ構成でファイルを設置すればそちらを上書きする形で参照してサイトを構成してくれるので、元のテーマは何も変更をせずにアップデートが可能です。
また、拡張性と柔軟性が高まる良い仕組みで、個々人ごとにテーマの編集がしたい必要性に対してよく考え込まれているなと思った。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.andrewjstevens.com/posts/2021/03/last-modified-date-with-hugo/">Last Modified Date with Hugo&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CloudComposer のDAGをCircleCIで更新する</title><link>https://shunyaueta.com/posts/2021-10-04/</link><pubDate>Mon, 04 Oct 2021 22:23:24 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-10-04/</guid><description>
&lt;p>Cloud Composer(Airflow) の DAG を GitHub リポジトリで管理して、CI によりリポジトリで管理している DAG を Pull Request がマージされると Cloud Composer の DAG へ同期する方法について説明する。&lt;/p>
&lt;p>DAG は、ルートディレクトリ直下の &lt;code>dags/&lt;/code> というディレクトリに格納されている状態を前提とする。&lt;/p>
&lt;p>以下の２つのコマンドラインツールを利用して実現できる。&lt;/p>
&lt;ul>
&lt;li>Service Account の認証のために &lt;code>gcloud&lt;/code>&lt;/li>
&lt;li>DAG の同期のために &lt;code>gsutil&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>CircleCI によるワークフローの記述例は以下のとおり&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rsync-dags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">working_directory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>~/workspace&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">docker&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>gcr.io/google.com/cloudsdktool/cloud-sdk&lt;span class="p">:&lt;/span>alpine&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GOOGLE_APPLICATION_CREDENTIALS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>/gcp-service-key.json&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- checkout&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Sync&lt;span class="w"> &lt;/span>DAG&lt;span class="w"> &lt;/span>folder&lt;span class="w"> &lt;/span>to&lt;span class="w"> &lt;/span>GCS&amp;#39;s&lt;span class="w"> &lt;/span>DAG&lt;span class="w"> &lt;/span>folder&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">|
&lt;/span>&lt;span class="sd"> echo &amp;#34;${CLOUD_COMPOSER_CREDENTIALS_JSON}&amp;#34; &amp;gt; ${GOOGLE_APPLICATION_CREDENTIALS}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>gcloud&lt;span class="w"> &lt;/span>auth&lt;span class="w"> &lt;/span>activate-service-account&lt;span class="w"> &lt;/span>--key-file&lt;span class="w"> &lt;/span>${GOOGLE_APPLICATION_CREDENTIALS}&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>gsutil&lt;span class="w"> &lt;/span>-m&lt;span class="w"> &lt;/span>rsync&lt;span class="w"> &lt;/span>-d&lt;span class="w"> &lt;/span>-r&lt;span class="w"> &lt;/span>dags&lt;span class="w"> &lt;/span>\&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;$(gcloud composer environments describe {COMPOSER_NAME} --project={GCP_PROJECT} --location={REGION} --format=&amp;#34;&lt;/span>get(config.dagGcsPrefix)&lt;span class="s2">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">workflows&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">rsync_dags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- rsync-dags&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Sync DAG folder to GCS's DAG folder&lt;/code> で行っている内容を順を追って説明する。&lt;/p>
&lt;ol>
&lt;li>サービスアカウントのクレデンシャルファイルを CircleCI の環境変数として保存しておき、リダイレクトにより JSON ファイルとして書き出す&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">CLOUD_COMPOSER_CREDENTIALS_JSON&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt; &lt;span class="si">${&lt;/span>&lt;span class="nv">GOOGLE_APPLICATION_CREDENTIALS&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>NOTE:&lt;/strong> セキュリティ対策としてクレデンシャルファイルは必ず環境変数として扱う。&lt;/p>
&lt;ol start="2">
&lt;li>1 で生成したクレデンシャルファイルにより、サービスアカウント認証を gcloud コマンドで行う&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gcloud auth activate-service-account --key-file &lt;span class="si">${&lt;/span>&lt;span class="nv">GOOGLE_APPLICATION_CREDENTIALS&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>CloudComposer の DAG が格納されている GCS のバケットを gcloud コマンドで取得して、gsutil コマンドで DAG ファイルの同期を行う&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://shunyaueta.com/posts/2021-09-29/">GCP の Cloud Composer の DAG を素早く・簡単にデバッグする&lt;/a> の記事でも紹介した方法で DAG の同期を行う。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gsutil -m rsync -d -r dags &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>gcloud composer environments describe &lt;span class="o">{&lt;/span>COMPOSER_NAME&lt;span class="o">}&lt;/span> --project&lt;span class="o">={&lt;/span>GCP_PROJECT&lt;span class="o">}&lt;/span> --location&lt;span class="o">={&lt;/span>REGION&lt;span class="o">}&lt;/span> --format&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;get(config.dagGcsPrefix)&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>{XXX} には使用する環境の情報を置換してください。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;$(gcloud composer environments describe {COMPOSER_NAME} --project={GCP_PROJECT} --location={REGION} --format=&amp;quot;get(config.dagGcsPrefix)&amp;quot;)&amp;quot;&lt;/code>
&lt;ul>
&lt;li>指定した GCP Project で動く Cloud Composer の DAG が格納されている GCS のパスを取得できる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>gsutil -m rsync -d -r dags&lt;/code>
&lt;ul>
&lt;li>&lt;code>-m&lt;/code> は並列処理&lt;/li>
&lt;li>&lt;code>-d&lt;/code> は元のディレクトリに存在しないファイルがコピー先にあれば削除(ミラーリング)。これにより、GCS 上で DAG を新たに作成して、デバッグしていたとしても、CI が走ればリポジトリにない DAG ファイルは削除され、リポジトリの DAG と完全に同期される。&lt;/li>
&lt;li>&lt;code>-r&lt;/code> はディレクトリとしてコピー&lt;/li>
&lt;li>上記のオプションにより&lt;code>dags&lt;/code> ディレクトリの DAG ファイルを GCS にミラーリングで同期を行う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/storage/docs/gsutil/addlhelp/TopLevelCommandLineOptions">gsutil Top-Level Command-Line Options&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/storage/docs/gsutil/commands/rsync">rsync - Synchronize content of two buckets/directories&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CircleCI アプリ内の設定ファイルエディターを利用して、CI上の環境変数などローカルCLIでは確認できない挙動を素早く確認して修正する</title><link>https://shunyaueta.com/posts/2021-10-01/</link><pubDate>Fri, 01 Oct 2021 20:39:06 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-10-01/</guid><description>
&lt;h2 id="tldr">TL;DR;&lt;/h2>
&lt;ul>
&lt;li>Pull Requestのコミット履歴を汚さずにCircleCIのConfigmap をWeb上で編集して、CIの挙動をすぐ試せる機能がすごく便利&lt;/li>
&lt;/ul>
&lt;h2 id="課題点">課題点&lt;/h2>
&lt;p>CircleCI の上のCIの挙動のデバッグをする際、ブランチにプッシュをせずに挙動が確認できる方法として&lt;a href="https://circleci.com/docs/ja/2.0/local-cli/">ローカルCLI&lt;/a>を利用する方法がある。
しかし、CIのマシン上で定義されている環境変数などは、ローカルCLIを使用しても確認することができない。&lt;/p>
&lt;p>そのためコミットでCIが失敗している際には、&lt;/p>
&lt;ol>
&lt;li>&lt;code>Rerun Job with SSH&lt;/code>を利用してSSHで接続して、環境変数を確認&lt;/li>
&lt;li>再度 &lt;code>config.yml&lt;/code> を修正して、コミットをプッシュ&lt;/li>
&lt;li>だが、上手くいかないので1→2を繰り返す&lt;/li>
&lt;/ol>
&lt;p>を繰り返してしまい、コミット履歴が不用意に汚れてしまう。&lt;/p>
&lt;h2 id="解決方法">解決方法&lt;/h2>
&lt;p>この問題点を解決する方法として、&lt;a href="https://circleci.com/docs/ja/2.0/config-editor/">CircleCI アプリ内の設定ファイル エディター&lt;/a>を利用するのがすごく便利だった。&lt;/p>
&lt;p>この機能は、ジョブのページの右上からアクセスできる。
&lt;code>Rerun&lt;/code> ボタンの右に&lt;code>...&lt;/code> ボタンがあり、そのボタンをクリックすると&lt;/p>
&lt;ul>
&lt;li>Project Settings&lt;/li>
&lt;li>Configuration File&lt;/li>
&lt;/ul>
&lt;p>の選択項目があり、&lt;code>Configuration File&lt;/code> をクリックすると、&lt;code>config.yml&lt;/code> のウェブエディターが起動する。
エディターでYAMLファイルを編集後、右上の&lt;code>Save and Run&lt;/code>ボタンをクリックすれば、PRで作成されているブランチと別のリモートブランチがCircleCIによって新たに作成されるので、もとのPRのコミット履歴を汚さずにCIの問題を修正できる。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://circleci.com/docs/ja/2.0/config-editor/">CircleCI アプリ内の設定ファイル エディターの使用&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>GCPのCloud Composer のDAGを素早く・簡単にデバッグする</title><link>https://shunyaueta.com/posts/2021-09-29/</link><pubDate>Wed, 29 Sep 2021 22:20:23 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-09-29/</guid><description>
&lt;p>GCPでAirflow をマネージドサービスで使えるサービスで Cloud Composer が存在する。
BigQueryやBigTable, PubSub などGCPの各サービスをDAGとして定義してジョブを定期実行できるので非常に便利だが、その代わりDAGを実行するまで結果がわからないので、CloudComposer を一度実行するしか無いのでデバッグが困難になる傾向がある。&lt;/p>
&lt;p>また、GitHubのリポジトリにDAGを保存して、CIでCloud Composerを更新するようしていると PRを都度作ってマージされないと確認できないという場合もある。&lt;/p>
&lt;p>ローカルでDocker で走らせれば良いのじゃないかというツッコミがあると思いますが、結局 Cloud Composer 上での動作を確かめないといけないので、今回の記事を書くことにしました。&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> 自分が使用しているComposerのversionは&lt;code>composer-1.8.0-Airflow-1.10.3&lt;/code> です。基本的にやれることは一緒だと思います。また、&lt;code>dev&lt;/code>, &lt;code>prod&lt;/code>で同一のDAGが走るCloud Composer を運用しているという前提です。&lt;/p>
&lt;p>アプローチは２つ&lt;/p>
&lt;h2 id="loggerinfo-を仕込んでdagのなかで何が起こっているかを理解する">logger.info() を仕込んで、DAGのなかで何が起こっているかを理解する&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>loggerをDAGを記述した Pythonファイルに仕込んで、内部で何が起こっているかを把握する。&lt;/p>
&lt;p>各DAGのlogは、&lt;/p>
&lt;ol>
&lt;li>GCPのCloud Composerのページにアクセスして&lt;code>Airflow webserver&lt;/code> 列のボタンをクリックしてAirflowのWeb applicaiton にログイン&lt;/li>
&lt;li>確認したいDAGをクリック&lt;/li>
&lt;li>DAG内のtask をクリックして表示されるモーダル内の &lt;code>View Log&lt;/code>をクリックすると、loggerの情報が確認できる&lt;/li>
&lt;/ol>
&lt;h2 id="gstuil-rsync-コマンドでのgcsへのdagの同期">&lt;code>gstuil rsync&lt;/code> コマンドでのGCSへのDAGの同期&lt;/h2>
&lt;p>&lt;code>gstuil rsync&lt;/code>コマンドを使うことで、リポジトリのDAGファイルをGCSに格納されている開発環境上のCloudComposer のDAGファイルに直接同期してPull Request マージ後のDAGの挙動を確認できる。&lt;/p>
&lt;p>Cloud Composer のDAGは、自動作成されたGoogle Cloud Storage(GCS)に格納されており、GCSをCloud Composerが定期的に監視してCloud Composerを更新している。
つまり、GCS上のDAGファイルを直接更新してやるとそれがCloud Composerに反映される。
体感として2-3分に一度は監視されているので、ほぼ待ち状態がない状態で確認できて便利です。&lt;/p>
&lt;p>以下のコマンドでリポジトリのDAGファイルをGCSに反映させます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gsutil -m rsync -d -r dags &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>gcloud composer environments describe &lt;span class="o">{&lt;/span>COMPOSER_NAME&lt;span class="o">}&lt;/span> --project&lt;span class="o">={&lt;/span>GCP_PROJECT&lt;span class="o">}&lt;/span> --location&lt;span class="o">={&lt;/span>REGION&lt;span class="o">}&lt;/span> --format&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;get(config.dagGcsPrefix)&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>{XXX} には使用する環境の情報を置換してください。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;$(gcloud composer environments describe {COMPOSER_NAME} --project={GCP_PROJECT} --location={REGION} --format=&amp;quot;get(config.dagGcsPrefix)&amp;quot;)&amp;quot;&lt;/code>
&lt;ul>
&lt;li>指定したGCP Project で動くCloud Composer のDAGが格納されているGCSのパスを取得できる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>gsutil -m rsync -d -r dags&lt;/code>
&lt;ul>
&lt;li>&lt;code>-m&lt;/code> は並列処理&lt;/li>
&lt;li>&lt;code>-d&lt;/code> は元のディレクトリに存在しないファイルがコピー先にあれば削除(ミラーリング)。これにより、GCS上でDAGを新たに作成して、デバッグしていたとしても、CIが走ればリポジトリにないDAGファイルは削除され、リポジトリのDAGと完全に同期される。&lt;/li>
&lt;li>&lt;code>-r&lt;/code> はディレクトリとしてコピー&lt;/li>
&lt;li>上記のオプションにより&lt;code>dags&lt;/code> ディレクトリのDAGファイルをGCSにミラーリングで同期を行う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="composer-のための正規のコマンドはあるが">Composer のための正規のコマンドはあるが&amp;hellip;&lt;/h3>
&lt;p>また、以下のように &lt;code>gcloud composer environments storage dags import&lt;/code> コマンドで更新する方法もあるので、そちらを使っても大丈夫です。
実行内容自体はGCSのファイルを変更するのと変わりません。
ですが、ディレクトリを対象にしたファイルの同期には対応していないので、上記で説明したコマンドのほうが遥かに楽です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gcloud composer environments storage dags import &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --environment &lt;span class="o">{&lt;/span>ENVIRONMENT_NAME&lt;span class="o">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --location &lt;span class="o">{&lt;/span>LOCATION&lt;span class="o">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --source &lt;span class="o">{&lt;/span>LOCAL_FILE_TO_UPLOAD&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>NOTE:&lt;/strong> プロダクションのDAGを直接書き換えるのは危険なのでやめましょう。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/composer/docs/how-to/using/managing-dags">Adding and Updating DAGs (workflows)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/storage/docs/gsutil/addlhelp/TopLevelCommandLineOptions">gsutil Top-Level Command-Line Options&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/storage/docs/gsutil/commands/rsync">rsync - Synchronize content of two buckets/directories&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Pandoc を使って抽出できなかったWord内部の画像をGoogle Driveを使って抽出する</title><link>https://shunyaueta.com/posts/2021-09-27/</link><pubDate>Mon, 27 Sep 2021 00:18:26 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-09-27/</guid><description>
&lt;p>&lt;a href="https://shunyaueta.com/posts/2021-09-19/">先日の記事&lt;/a> では、pandoc の&lt;code>--extract-media&lt;/code> オプションをオンにしてもword内部の画像を抽出することができなかった。&lt;/p>
&lt;p>だが、Google Driveを使うことでWord 内部の画像を抽出することができたのでここに記しておく。&lt;/p>
&lt;ol>
&lt;li>対象の WordファイルをGoogle Driveにアップロードする&lt;/li>
&lt;li>そのファイルをGoogle Docs で開く&lt;/li>
&lt;li>&lt;code>File → Download → Web Page (.html, zippted)&lt;/code> でウェブページとしてzipファイルをダウンロードする&lt;/li>
&lt;li>zipファイルを解凍後、その中にある&lt;code>images&lt;/code> フォルダにWord内部の画像が格納されている&lt;/li>
&lt;/ol></description></item><item><title>Pandoc で特定のディレクトリ直下にある複数のWordをMarkdown形式に一括変換する</title><link>https://shunyaueta.com/posts/2021-09-19/</link><pubDate>Sun, 19 Sep 2021 23:52:45 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-09-19/</guid><description>
&lt;p>表題の通り、&lt;a href="https://pandoc.org/MANUAL.html">Pandoc&lt;/a> を使って、特定ディレクトリ配下にある複数の Wordファイル(&lt;code>*.docx&lt;/code>) を Markdownファイル(&lt;code>*.md&lt;/code>) へ一括変換したい。&lt;/p>
&lt;h2 id="単一wordファイルの変換コマンド">単一Wordファイルの変換コマンド&lt;/h2>
&lt;p>単一の変換である場合は、@tomo-makes さんの&lt;a href="https://gist.github.com/tomo-makes/b03e910ea7095bbe2c98de5be828dfba">Wordファイル(.docx)をMarkdownへ変換する&lt;/a> を参考に実行すると良いと思います。&lt;/p>
&lt;p>自分は特に困らなかったので、&lt;code>despan&lt;/code> の処理は省いた形にしました。
また、&lt;code>--extract-media&lt;/code> をオンにして指定しても Wordファイル内の画像を上手く抜き出せなかったです。
WordファイルからMarkdownファイルへの完全変換って難しい。まさに餅をもち米に戻す行為に近い&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pandoc -s &lt;span class="o">{&lt;/span>input&lt;span class="o">}&lt;/span>.docx --wrap&lt;span class="o">=&lt;/span>none -t gfm -o &lt;span class="o">{&lt;/span>output&lt;span class="o">}&lt;/span>.md
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="複数wordファイルの変換コマンド">複数Wordファイルの変換コマンド&lt;/h2>
&lt;p>ワンライナーのシェルスクリプトを組んで実行する。
実行時には、変換元のWordファイルが配置されているディレクトリで実行する。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="k">for&lt;/span> f in *.docx&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> pandoc -s &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> --wrap&lt;span class="o">=&lt;/span>none -t gfm -o &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.md&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>&amp;quot;${f}.md&amp;quot;&lt;/code> の部分を &lt;code>&amp;quot;../../docs/${f}.md&amp;quot;&lt;/code> のような形で修正してやれば、所定のディレクトリへ変換されたMarkdownファイルが生成される。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://pandoc.org/faqs.html#how-can-i-convert-a-whole-directory-of-files-from-markdown-to-rtf">How can I convert a whole directory of files from Markdown to RTF?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>gcloud commands で PubSub に jsonファイルをメッセージとして公開 (Pusblish) する</title><link>https://shunyaueta.com/posts/2021-09-07/</link><pubDate>Tue, 07 Sep 2021 12:22:16 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-09-07/</guid><description>
&lt;p>gcloud commands で PubSub に jsonファイルをメッセージとして公開 (Pusblish) する&lt;/p>
&lt;p>&lt;code>jq&lt;/code> コマンドが必要になるが、一番簡単に実現できるのは&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ gcloud pubsub topics publish &lt;span class="o">{&lt;/span>PUBSUB_TOPIC_NAME&lt;span class="o">}&lt;/span> --message &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>cat &lt;span class="o">{&lt;/span>FILE_NAME&lt;span class="o">}&lt;/span> &lt;span class="p">|&lt;/span> jq -c&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>jq&lt;/code> コマンドの &lt;code>-c&lt;/code> オプションは compact-output を意味している。デフォルトだと pretty-prints になってしまう。
それを避けるために&lt;code>-c&lt;/code>オプションを使用している。&lt;/p>
&lt;h2 id="ref">ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/pubsub/docs/publisher">Publishing messages to topics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/55513746/read-a-txt-file-json-data-to-publish-the-messages-in-cloud-pub-sub">Read a txt file JSON data to publish the messages in Cloud Pub Sub&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>gRPC client evans で portforward 先のリモートサーバーにリクエストを行う</title><link>https://shunyaueta.com/posts/2021-08-19/</link><pubDate>Thu, 19 Aug 2021 16:51:05 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-08-19/</guid><description>
&lt;p>&lt;a href="https://github.com/ktr0731/evans">evans&lt;/a>&lt;/p>
&lt;p>evans は対象のサーバーのgRPC のリフレクション機能が起動されていれば、proto ファイルを参照せずに便利な [REPL mode](gRPC のリフレクション機能) を使用できます。&lt;/p>
&lt;blockquote>
&lt;p>If your server is enabling gRPC reflection, you can launch Evans with only -r (&amp;ndash;reflection) option.&lt;/p>
&lt;/blockquote>
&lt;p>gRPC のリフレクション機能については evans 作者の ktr0731さんが解説している記事が非常にわかりやすいです。&lt;/p>
&lt;p>&lt;a href="https://syfm.hatenablog.com/entry/2020/06/23/235952">gRPC リフレクションはなにをしているか？&lt;/a>&lt;/p>
&lt;p>ローカルの5000 番のポートをリモートサーバの5000番ポートにフォワード (port-forward)しているとします。
例えば、&lt;code>kubectl&lt;/code> だと以下のような実行コマンドになります。&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/#forward-a-local-port-to-a-port-on-the-pod">Forward a local port to a port on the Pod&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">kubectl port-forward pods/hoge-asas32s 5000:5000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>そして、ポートフォワードのシェルは保持した上で、別にシェルを起動します。&lt;/p>
&lt;p>この際に 対象となる&lt;code>localhost:5000&lt;/code> に対して、&lt;code>--host&lt;/code>, &lt;code>--port&lt;/code> オプションで指定してやれば evans のREPLモードが起動します。&lt;/p>
&lt;h2 id="repl">REPL&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; evans -r --host localhost --port &lt;span class="m">5000&lt;/span>
______
&lt;span class="p">|&lt;/span> ____&lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>__ __ __ __ _ _ __ ___
&lt;span class="p">|&lt;/span> __&lt;span class="p">|&lt;/span> &lt;span class="se">\ \ &lt;/span>/ / / _. &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>_ &lt;span class="se">\ &lt;/span> / __&lt;span class="p">|&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>____ &lt;span class="se">\ &lt;/span>V / &lt;span class="p">|&lt;/span> &lt;span class="o">(&lt;/span>_&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="se">\_&lt;/span>_ &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span>______&lt;span class="p">|&lt;/span> &lt;span class="se">\_&lt;/span>/ &lt;span class="se">\_&lt;/span>_,_&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>___/
more expressive universal gRPC client
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cli">CLI&lt;/h2>
&lt;p>CLI は cli というサブコマンドを追記するだけで起動できます。
シェル変数などを使って実行したい場合は、こちらが便利です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">evans -r --host localhost --port &lt;span class="m">5000&lt;/span> cli list
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>evans で快適な gRPC ライフを楽しみましょう。&lt;/p></description></item><item><title>システムの応答速度は本質的な価値提供であることを示す A/B テストの実例</title><link>https://shunyaueta.com/posts/2021-08-13/</link><pubDate>Fri, 13 Aug 2021 23:41:08 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-08-13/</guid><description>
&lt;h2 id="内容">内容&lt;/h2>
&lt;p>システム提供において、基本的に高速であればあるほど顧客は嬉しいものだが、実際のところ高速なシステムを提供して、どの程度の価値が発生するのかが気になったので、調べてみた。&lt;/p>
&lt;ul>
&lt;li>2021/08/14 追記
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/3xSo63S">A/Bテスト実践ガイド　真のデータドリブンへ至る信用できる実験とは&lt;/a> の書籍で同様な事例が紹介されているとのこと。情報提供ありがとうございます。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>実務でA/Bテストに向き合った人間であれば必ず一度は考えたことのあるトピックについて、アメリカのテックカンパニー（Airbnb, Google, LinkedInなど）勤務の著者らが国際会議で発表された研究もちゃんと引用して見解を述べており説得力がある。
従って、現時点における最高レベルの意思決定をデータ（A/Bテスト）に基づいて行いたいと思うなら、一度は目を通しておくべきであり関係者必携だと思う。
※個人的には”Webサービスのレイテンシーと利益の関係（５章や”多くのスピード問題”の節）”がお気に入りで、サイトのレイテンシー改善がいかに収益に貢献し得るか、つまりCodeの実行速度というエンジニアのアウトプットがダイレクトに収益に貢献できるか？をデータに基づいてきちんと測っているのが印象的で興味深かった内容でした。
&lt;a href="https://www.amazon.co.jp/gp/customer-reviews/R6MJR7RBVU87N/ref=cm_cr_dp_d_rvw_ttl?ie=UTF8&amp;amp;ASIN=B08Z3TPVZG">Amazon review&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="three-challenges-in-building-industrial-scale-recommender-systems---keynote-for-orsumrecsys20">Three Challenges in Building Industrial-Scale Recommender Systems&amp;rdquo; - Keynote for ORSUM@RecSys&amp;rsquo;20&lt;/h3>
&lt;p>3rd Workshop on Online Recommender Systems and User Modeling でのkeynote session で発表された内容&lt;/p>
&lt;p>講演者は &lt;a href="https://www.linkedin.com/in/sebastianschelter/?originalSubdomain=nl">Sebastian Schelter&lt;/a> さんという方で、アカデミックもインダストリーもどちらもバリバリにこなしている人だった。日本だとこういう経歴の人ってかなり珍しい気がするので、やはり層が厚い&lt;/p>
&lt;p>ふと@hagino3000 さんのツイートが印象に残っていたので、記録のためにこちらに。1年くらい前のやり取りだけど、印象に残っていて今回この記事を書いたきっかけでもある。&lt;/p>
&lt;blockquote>
&lt;p>推薦システムのレイテンシが15msと32msで差が出るかA/B Testしたって。推薦結果は同じで片方はあえて遅らせたって事だよな、はじめて聴く実験だ。15msの方がrevenueが良かったとの事。
&lt;a href="https://twitter.com/hagino3000/status/1309505751044354048">twitter&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>公開されている動画はこちら&lt;/p>
&lt;p>&lt;a href="https://youtu.be/IUGtGZQ0JDw?t=2314">Three Challenges in Building Industrial-Scale Recommender Systems&amp;rdquo; - Keynote for ORSUM@RecSys&amp;rsquo;20&lt;/a>&lt;/p>
&lt;p>19,20枚目のスライド&lt;/p>
&lt;p>要約すると、&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-08-13/images/1.png" alt="response latency">&lt;/p>
&lt;p>既存の研究では、検索エンジン上で人工的に応答速度を遅らせた際にネガティブな影響が発生した。&lt;/p>
&lt;p>では、逆に応答速度を早めた場合どのような影響になるのだろうか?
とてもおもしろい事例があるので是非紹介したい、&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-08-13/images/2.png" alt="Some emprical evidence">&lt;/p>
&lt;p>オンプレのシステムからGoogle Cloud に移行するイベントを利用した実験を行った。マイグレーション時にサービングシステムの最適化などを行い、マイグレーション後のシステム性能向上した。この最適化により、モデルやシステム構成は全く同じだが、p90 の応答速度がオンプレのシステムでは 32ms だったものが、GCPでは15ms に向上した。
これにより生じた差異を活用して、以下のA/B テストを行った。
32ms をcontroll, 15ms をtest 群に分けてA.B テストを行ったところ、商品のオーダー、収益に関する指標が２% 向上した。&lt;/p>
&lt;h2 id="google-による-speed-matters-実験">Google による Speed Matters 実験&lt;/h2>
&lt;p>Sebastian さんが上記の講演で名前を出して言及はしなかったが、言及していた実験はGoogle の Speed Matters 実験だと思う。(こんな実験をわざわざするケースが他にもあったら教えてほしい)&lt;/p>
&lt;p>その名の通り、速度は重要という実直なタイトルの実験である。&lt;/p>
&lt;p>&lt;a href="https://ai.googleblog.com/2009/06/speed-matters.html">Spped Matters&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://services.google.com/fh/files/blogs/google_delayexp.pdf">1pのnews letter 形式でまとめられた実験結果&lt;/a>だが非常に面白い&lt;/p>
&lt;p>実験内容としてはシンプルで、検索エンジンにリクエストを投げる際に、&lt;/p>
&lt;ol>
&lt;li>&lt;code>Pre-header&lt;/code>: HTTP GET リクエストを受信後、すべてのサーバー処理を &lt;code>X mx&lt;/code> の期間一時停止&lt;/li>
&lt;li>&lt;code>Post-header&lt;/code>: ヘッダー送信後サーバーの処理が完了する前に &lt;code>X mx&lt;/code>の期間すべてのサーバー処理を一時停止&lt;/li>
&lt;li>&lt;code>Post-ads&lt;/code>: 広告を表示した後に &lt;code>X mx&lt;/code>の期間のみ一すべてのサーバー処理を一時停止&lt;/li>
&lt;/ol>
&lt;p>各アプローチの応答時間の停止時間で、日次の検索実行を行う人数がどれくらい減少したかがまとめられている。&lt;/p>
&lt;p>どれも明確なインパクトが発生しているが、&lt;/p>
&lt;p>わかりやすいものを抜き出すと、Post-headerでの時間を&lt;/p>
&lt;ul>
&lt;li>200ms 遅らせたものが 、6週間で毎日の平均検索実行者の数が &lt;code>-0.29%&lt;/code> 減少&lt;/li>
&lt;li>400ms 遅らせたものが 、6週間で毎日の平均検索実行者の数が &lt;code>-0.59%&lt;/code> 減少&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-08-13/images/3.png" alt="Speed matter table result">&lt;/p>
&lt;p>また、6週間の時間をかけて以下の結果が得られた。&lt;/p>
&lt;p>グラフでは、 6週間 &lt;code>Post-header&lt;/code> の時間を、&lt;code>200ms&lt;/code>, &lt;code>400ms&lt;/code> 遅らせた際に検索実行回数がどのように変化するかが示されている。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-08-13/images/4.png" alt="Speed matter search freq result">&lt;/p>
&lt;p>検索エンジンの応答速度が遅くなることで、遅延される時間が長いものほど、その遅延の影響により、検索を行う顧客は、徐々に検索を行わなくなっていった。&lt;/p>
&lt;p>&lt;code>-0.5%&lt;/code> と聞くとそんなに大きな数字ではなく感じるが、Google 検索の規模での &lt;code>-0.5%&lt;/code> は決して小さいものではない。&lt;/p>
&lt;h2 id="結論">結論&lt;/h2>
&lt;p>速さには価値がある。それをちゃんと定量的に示した人たちがいるのは偉大。&lt;/p>
&lt;p>こういうみんなが直感的にそうだろうと感じてはいるものの、「じゃあ実際どれくらい良いの?」という問いにたいして、実験を実行した人たち、その実験が許される環境は本当に素晴らしい。&lt;/p></description></item><item><title>子供が1歳児を迎えるまでに役に立ったもの</title><link>https://shunyaueta.com/posts/2021-07-23/</link><pubDate>Fri, 23 Jul 2021 22:22:56 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-07-23/</guid><description>
&lt;p>去年の秋頃に子供を授かり、色々と役に立った情報や製品、サービスなどがあったので備忘録がてら残しておく。
ベビーウォール、プレイマット、服や抱っこひもなど鉄板系で買えば良いものなどは記す必要が無いのであえて書いてない。&lt;/p>
&lt;h2 id="書籍情報源">書籍・情報源&lt;/h2>
&lt;ul>
&lt;li>★★★ &lt;a href="https://amzn.to/3BxMIBJ">赤ちゃん寝かしつけの新常識&lt;/a>
&lt;ul>
&lt;li>科学的な見地に基づいた、赤ちゃんの睡眠に関する情報を纏めた書籍。データやメタ分析、また著者の経験に基づいて、どう寝かしつけに取り組めばいいのか説明してくれている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★ &lt;a href="https://amzn.to/3zsBFIq">小児科医のママが教える 離乳食は作らなくてもいいんです。&lt;/a>
&lt;ul>
&lt;li>簡単にまとめると、離乳食をわざわざ作るのではなく販売されている商品で離乳食をカバーしたほうが栄養素、準備に係る労力もなくなってみんな幸せという書籍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★ &lt;a href="https://www.mhlw.go.jp/topics/syokuchu/kanren/kanshi/070605-1.html">厚生労働省が公開している情報&lt;/a>
&lt;ul>
&lt;li>&lt;code>ac.jp&lt;/code>, &lt;code>go.jp&lt;/code> の資料の信憑性は高いので、優先して閲覧するようにしている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★ &lt;a href="https://www.kao.co.jp/merries/babycare/">赤ちゃんとママ・パパのための情報 by 花王&lt;/a>
&lt;ul>
&lt;li>花王がお医者さんと連携して作成している F&amp;amp;Q サイト。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="モノ">モノ&lt;/h2>
&lt;ul>
&lt;li>★★★ &lt;a href="https://amzn.to/2TsbDFI">食洗機&lt;/a>
&lt;ul>
&lt;li>哺乳瓶を電子レンジで殺菌するものもあるが、こちらのほうが食器も合わせて洗えるのでめちゃくちゃ楽。変にやけどする心配もない。哺乳瓶を 8 本程度買っておいて、食洗機で毎日 4 本程度洗っていく運用が非常に楽だった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★★ &lt;a href="https://amzn.to/3eKzpEx">防水敷き布団カバー&lt;/a>
&lt;ul>
&lt;li>子供がよる咳がひどくて飲んだミルクを吐いてしまっている場合があるのだが、その際に布団をすべて洗う必要がなくなるので非常に助かる。自分は西松屋で買ったけど、Amazon でも打っているので紹介&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★★ iHerb で購入する栄養満点&lt;a href="https://iherb.co/zsSWawv">ベビーフード&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://iherb.co/GY1Stfu">Gerber のライスシリアル&lt;/a> など、日本の離乳食と比較して味付けが素材そのままの味で、必須栄養素が添加されている Gerber を愛用して買っている。離乳食にミルクと混ぜて会えると簡単に離乳食が作れるので非常に便利。&lt;a href="https://amzn.to/3zsBFIq">小児科医のママが教える 離乳食は作らなくてもいいんです。&lt;/a>で Gerber の存在を知れた。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★★ &lt;a href="https://lovetree.jp/product/%E3%82%B9%E3%83%AF%E3%83%89%E3%83%AB%E3%82%A2%E3%83%83%E3%83%97-original/18/category/24/display/1/">スワドルアップ&lt;/a>
&lt;ul>
&lt;li>2-5 ヶ月ごろまで愛用していた。抱っこしている状態から、ベッドに置くと一種で起きて泣き出す確率が 9 割から 1 割程度に減る神の道具。途中で起き出すこともかなり少なくなった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★★ &lt;a href="https://www.nitori-net.jp/ec/product/8500743s/">ニトリの引っ張るだけで取り込めるハンガー&lt;/a>
&lt;ul>
&lt;li>わざわざベビーハンガーなどを買う必要は無い。引っ張って回収できるのが便利。Amazon でも同様のものが&lt;a href="https://amzn.to/3ixXrmY">売られている&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★★ &lt;a href="https://store.google.com/jp/product/google_nest_mini?hl=ja">Google Home Mini&lt;/a>
&lt;ul>
&lt;li>ホワイトノイズを再生するのに使っている。「OK Google ホワイトノイズを流して」で 11 時間程度連続再生してくれるので子供の就寝時間中ほぼカバーできる。 &lt;a href="https://amzn.to/3BxMIBJ">赤ちゃん寝かしつけの新常識&lt;/a> で紹介されていたので導入してみたが、寝ている部屋の近くで音を立ててしまったり、一緒の部屋で寝ていて自分のベッドの軋む音で泣かなくなったので非常にありがたい。&lt;a href="https://amzn.to/3wYiWmr">Alexa&lt;/a> とかでも同等の機能はあるんじゃないのでしょうか。昼寝のときもちょっとした音で起きなくなるのでありがたし&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★ &lt;a href="https://amzn.to/3eIoQ4w">Xiaomi Mi スマートバンド&lt;/a>
&lt;ul>
&lt;li>子供が深夜に起きた際にスマホで時計を確認すると光が強すぎるので、適切な光量で確認できる。また、料理しているときにタイマーとしても秀逸です。アラームも振動で起床できるので他の人を起こさずに起床できる点も秀逸。何よりも安いので気軽に買えるのが良い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★ &lt;a href="https://amzn.to/3eQ5PNT">クリップライト&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://amzn.to/3BxMIBJ">赤ちゃん寝かしつけの新常識&lt;/a>でも紹介されている、レッドライトを買うと高いので、クリップライトを買って、百均で買った赤色の透明の下敷きを当ててレッドライトを即席で作成したがなんの問題もなく使えている。実際に深夜に起きて作業をしていると赤色のライトだと眩しいという感覚が非常に和らいでいる気がする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★ &lt;a href="https://amzn.to/2VK2hpw">オムツ替え防水シート&lt;/a>
&lt;ul>
&lt;li>おむつ交換時にいきなりおしっこが発射されることもあるので、防水シートを買った。購入後いざという時何度も助かったので便利&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="サービスアプリ">サービス・アプリ&lt;/h2>
&lt;ul>
&lt;li>★★★ &lt;a href="https://www.piyolog.com/">ぴよログ&lt;/a>
&lt;ul>
&lt;li>睡眠やミルク、排泄の回数などを夫婦間で共有して管理できる。細かな使い勝手が洗練されていて感動するレベル。&lt;code>できた&lt;/code> 🚩 という項目があり、これをこまめに付けておくと見返すときにニヤつきながら成長を振り替えれる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★★ &lt;a href="https://www.mercari.com/jp">メルカリ&lt;/a>
&lt;ul>
&lt;li>元値が数千円台の子供服やおもちゃを 300 円、送料込みで買える。数十着は買ったのではなかろうか。ここでしか見つからないようなかわいい服も多くて、見てての楽しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★ &lt;a href="baby-calendar.jp/article/30">ベビーカレンダー&lt;/a>
&lt;ul>
&lt;li>このアプリは仕組みが面白い。こどもの生後の日数に合わせて、生後 N 日だと~ができるようになりますとか、こういうことをこころがけましょうと日めくり的に毎日記事が見れて、書籍を一度にまとめて読むよりも今必要なことを適宜教えてくれる感じで助かった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★★ &lt;a href="https://jmty.jp/">ジモティー&lt;/a>
&lt;ul>
&lt;li>4 万円相当のベビーベッドを無料でいただけた。車で 2 時間程度の場所だったが、旅行がてら受け取りに行った。感謝。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★ とりあえず登録しておくといいサービス
&lt;ul>
&lt;li>&lt;a href="https://event.rakuten.co.jp/family/">楽天ママ割&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.co.jp/b?ie=UTF8&amp;amp;node=6733543051">Amazon ファミリー&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>★ Amazon、ベビー用品クーポン
&lt;ul>
&lt;li>おむつやおしりふきなど時々割引クーポンで、ドラッグストアより安くなるときがあり、そのときに購入している。通常時はドラッグストアのほうがやすいので使い分けている&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3wUCc4d">おむつカテゴリ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3x1YzV8">おしりふき&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>可能な限り効率化できるような、仕組みづくりに投資したほうが幸せになれる。あと体力が一番大事、健康が最強!!&lt;/p></description></item><item><title>mvn archetype:generate でJavaのプロジェクト雛形を作成する際のオプションの解説</title><link>https://shunyaueta.com/posts/2021-07-18/</link><pubDate>Sun, 18 Jul 2021 00:05:06 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-07-18/</guid><description>
&lt;p>最近、Java を業務で触っている。
門外漢の自分からするとMavenのお作法が分からなかったので、備忘録がてら残しておく。&lt;/p>
&lt;h2 id="mvn-archetypegenerate-コマンドのオプションの意味">&lt;code>mvn archetype:generate&lt;/code> コマンドのオプションの意味&lt;/h2>
&lt;p>&lt;code>mvn archetype:generate&lt;/code> コマンドを使えば任意のテンプレートに沿ったプロジェクトを一発で作成することができる。&lt;/p>
&lt;p>具体例として、Apache Beam でプロジェクト管理ツールであるMavenを使って、&lt;code>mvn archetype:generate&lt;/code> コマンドを用いて、プロジェクト作成を行う場合、&lt;a href="https://beam.apache.org/get-started/quickstart-java/">公式サイト&lt;/a>では以下のように指定されている&lt;/p>
&lt;pre>&lt;code>$ mvn archetype:generate \
-DarchetypeGroupId=org.apache.beam \
-DarchetypeArtifactId=beam-sdks-java-maven-archetypes-examples \
-DarchetypeVersion=2.31.0 \
-DgroupId=org.example \
-DartifactId=word-count-beam \
-Dversion=&amp;quot;0.1&amp;quot; \
-Dpackage=org.apache.beam.examples \
-DinteractiveMode=false
&lt;/code>&lt;/pre>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>オプション名&lt;/th>
&lt;th>意味&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>archetypeGroupId&lt;/td>
&lt;td>&lt;code>archetype&lt;/code>の &lt;code>groupId&lt;/code> つまり、テンプレートを提供している作成元の識別子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>archetypeArtifactId&lt;/td>
&lt;td>archetypeのテンプレート。個々ではbeam-sdk に対応したプロジェクトテンプレートを作成している。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>archetypeVersion&lt;/td>
&lt;td>テンプレートのバージョン&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>groupId&lt;/td>
&lt;td>&lt;a href="https://docs.oracle.com/javase/specs/jls/se6/html/packages.html#7.7">Java のパッケージ名のルール&lt;/a>に則ったすべてのプロジェクトで唯一に識別可能な識別子。今回は &lt;code>org.example&lt;/code> が使われており、実際は識別子として機能指定なさそうな名前ではある。(実際昔のプロジェクトでは重複可能な単語が使われていることが多いが、その場合はmarven に登録する際に名前が衝突して登録ができないとのこと&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>artifactId&lt;/td>
&lt;td>任意の名前が使用可能であり、&lt;code>jar&lt;/code> ファイルのバージョン抜きの名前を指定する。プロジェクトのパッケージ名と考えたら良さそう。これが作成されるロートディレクトリのフォルダ名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>version&lt;/td>
&lt;td>プロジェクトのバージョン情報&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>package&lt;/td>
&lt;td>クラスやインターフェースの名前空間を指す。基本的にgroupidと同一だが、groupidを接頭辞にして、独自に付け足すこともある。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interactiveMode&lt;/td>
&lt;td>ウィザード形式の生成をするかしないか&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://maven.apache.org/guides/mini/guide-naming-conventions.html">Guide to naming conventions on groupId, artifactId, and version&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yossan.hatenablog.com/entry/2019/03/31/015458">maven プロジェクトの作成 archtypeArtifactId を指定する&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://java-code.jp/91">package宣言 | java-code&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>eコマースの検索と推薦についてのサーベイ論文である 'Challenges and research opportunities in eCommerce search and recommendations' を社内勉強会で発表した</title><link>https://shunyaueta.com/posts/2021-07-10/</link><pubDate>Sat, 10 Jul 2021 23:20:58 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-07-10/</guid><description>
&lt;p>SIGIR eCom を探索していたら発見したサーベイ論文の &amp;ldquo;Challenges and research opportunities in eCommerce search and recommendations&amp;quot;が面白かったので、社内の勉強会で発表してきた。&lt;/p>
&lt;p>和訳すると、「eコマースの検索と推薦における挑戦と研究トピック」で、eコマースにおける検索と推薦の課題が明瞭に書かれていて非常に面白い論文でした。
自分もまだ検索エンジニアとして日が浅いので、手持ちのパターンを増やせるように日々勉強していますが、この論文のおかげでかなり解像度が上がった。&lt;/p>
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/sOhCWPToy6AIL1" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> &lt;/iframe> &lt;div style="margin-bottom:5px"> &lt;strong> &lt;a href="//www.slideshare.net/shunyaueta/introducing-challenges-and-research-opportunities-in-ecommerce-search-and-recommendations" title="Introducing &amp;quot;Challenges and research opportunities in eCommerce search and recommendations&amp;quot;" target="_blank">Introducing &amp;quot;Challenges and research opportunities in eCommerce search and recommendations&amp;quot;&lt;/a> &lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/shunyaueta" target="_blank">Shunya Ueta&lt;/a>&lt;/strong> &lt;/div>
&lt;p>個人的に面白かったのは、&lt;/p>
&lt;ul>
&lt;li>そもそも、顧客が商品を検索するというタスクの奥深さと面白さが知れる&lt;/li>
&lt;li>Query Understanding は、非構造なクエリを構造化されたクエリに変換するのが究極的な目標&lt;/li>
&lt;li>Learn to Rank(LtR)の実践的な課題点として、LtR適用時に、Native Ranker とのギャップが発生して非連続な検索結果を返してしまうことがある&lt;/li>
&lt;li>実際のクエリから、購入される商品はクエリと商品が関連性が高いとは限らないのでモデルを学習させる際には要注意
&lt;ul>
&lt;li>Amazonでの実例として
&lt;ul>
&lt;li>クエリ「ダイヤモンドリング」に対してLtR を適用すると、実際のクエリとそれに紐づくランキングシグナルから学習すると、「ダイヤモンドリング」というクエリで、「ジルコニウムリング」が大量に購買されていたのでLtRでは、「ダイヤモンドリング」というクエリに対して、「ジルコニウムリング」を表示するようになってしまった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>これは、学習データを全く見ないで適用するとそうなりそうだけど、広範囲に影響を及ぼすLtRのQAは非常に骨が折れそう&lt;/li>
&lt;li>Ref: &lt;a href="https://www.amazon.science/publications/amazon-search-the-joy-of-ranking-products">Amazon Search: The Joy of Ranking Products&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>スライド作成元のMarkdownファイルは&lt;a href="https://github.com/hurutoriya/deck/blob/main/2021-07-07_challenges-and-research-opportunities-in-eCommerce%20search-and-recommendations/deck.md">hurutoriya/deck&lt;/a>はこちらです。
スライド内のリンクに簡単にアクセスできます。&lt;/p>
&lt;p>eコマースでの検索に改善したいけど何したらいいかわからんという人は、とりあえずこれ見ればOKという論文だったので読めてよかった&lt;/p>
&lt;h2 id="余談">余談&lt;/h2>
&lt;p>Matching &amp;amp; Rankingの章までを解説したけど、それでも45m喋りっぱなしで最後のほうがかなり駆け足になってしまった。
また、英語での発表になったけど、やはり熟れたわかりやすい発表レベルに達するには、まだまだだなぁ感じた。精進せねば&lt;/p>
&lt;p>今回スライド作成に &lt;a href="https://marp.app/">Marp&lt;/a> を使いましたが、VS Code上でスラスラとかけつつ読みやすくテンションの上がるデザインに簡単にできて感動しました。これからも愛用したいなと思います。&lt;/p>
&lt;p>年末くらいに、検索エンジニアとして9ヶ月経過するので、役になった学習リソースなどをまとめたい&lt;/p></description></item><item><title>How to get the uploaded file path and processing its file in Streamlit</title><link>https://shunyaueta.com/posts/2021-07-09/</link><pubDate>Fri, 09 Jul 2021 22:40:37 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-07-09/</guid><description>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>&lt;a href="https://streamlit.io/">Streamlit&lt;/a> is a powerful tools to quickliy build the demo application.
If we use Streamlit file upload feature via WebBrowser then we need to its file path to process the uploaded file.
So I will introduce how to get uploaed file path in Streamlit.&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>We buid the PDF File upload feature in Streamlit and its PDF file convert to image.
We use &lt;a href="https://github.com/Belval/pdf2image">Belval/pdf2image&lt;/a> which is a populer PDF converting tool. It needs to file path to apply the module feature. we assume local machine is the MacOS then we need to install the &lt;a href="https://poppler.freedesktop.org/">poppler&lt;/a> to use &lt;code>pdf2image&lt;/code>,&lt;/p>
&lt;h3 id="demo-app-screenshot-and-open-sourced-code">Demo app screenshot and open sourced code&lt;/h3>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-07-09/images/streamlit.png" alt="get the uploaded file path in Streamlit">&lt;/p>
&lt;p>We also publised a code example at &lt;a href="https://github.com/hurutoriya/streamlist-file-uploader-example">hurutoriya/streamlist-file-uploader-example&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://youtu.be/ILGVapirwlg">Demo Movie in Youtube&lt;/a>&lt;/p>
&lt;h3 id="makefile">Makefile&lt;/h3>
&lt;p>It worked task runner to install the dependency and run the app.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="nf">install&lt;/span>&lt;span class="o">:&lt;/span>
brew install poppler
poetry install
&lt;span class="nf">run&lt;/span>&lt;span class="o">:&lt;/span>
poetry run streamlit run streamlit_pdf_uploader/main.py
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="poetry-for-package-management">Poetry for package management&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;streamlit-pdf-uploader&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">python&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^3.8&amp;#34;&lt;/span>
&lt;span class="nx">streamlit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^0.84.0&amp;#34;&lt;/span>
&lt;span class="nx">watchdog&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^2.1.3&amp;#34;&lt;/span>
&lt;span class="nx">pdf2image&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^1.16.0&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dev&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">pytest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^5.2&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">system&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">requires&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;poetry-core&amp;gt;=1.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">build&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">backend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;poetry.core.masonry.api&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="streamlit-python-file">Streamlit Python file&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">base64&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">tempfile&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">streamlit&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">st&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">pdf2image&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">convert_from_path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">show_pdf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Show the PDF in Streamlit
&lt;/span>&lt;span class="s2"> That returns as html component
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Parameters
&lt;/span>&lt;span class="s2"> ----------
&lt;/span>&lt;span class="s2"> file_path : [str]
&lt;/span>&lt;span class="s2"> Uploaded PDF file path
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">base64_pdf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b64encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pdf_display&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;embed src=&amp;#34;data:application/pdf;base64,{base64_pdf}&amp;#34; width=&amp;#34;100%&amp;#34; height=&amp;#34;1000&amp;#34; type=&amp;#34;application/pdf&amp;#34;&amp;gt;&amp;#39;&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">markdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pdf_display&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unsafe_allow_html&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Streamlit application
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;PDF file uplodaer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">uploaded_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_uploader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Choose your .pdf file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;pdf&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">uploaded_file&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># Make temp file path from uploaded file&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">tempfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NamedTemporaryFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">tmp_file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">markdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;## Original PDF file&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uploaded_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getvalue&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">show_pdf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">imgs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert_from_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">markdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;Converted images from PDF&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>&lt;a href="https://streamlit.io/">Streamlit&lt;/a> is a powerful tools to quickliy build the demo application.
You leand about how to get the uploade file path from Streamlit in this post.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://discuss.streamlit.io/t/showing-pdf-file-on-streamlitsharing-thats-in-github-directory/11955">Showing PDF file on StreamlitSharing that’s in github directory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://discuss.streamlit.io/t/problem-in-reading-a-db-object-using-file-uploader/3064/10">Problem in reading a “db” object using file uploader&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Streamlit でアップロードしたファイルのパスを取得して、特定の処理をする</title><link>https://shunyaueta.com/posts/2021-07-08/</link><pubDate>Thu, 08 Jul 2021 22:40:37 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-07-08/</guid><description>
&lt;h2 id="モチベーション">モチベーション&lt;/h2>
&lt;p>&lt;a href="https://streamlit.io/">Streamlit&lt;/a> はPython code のみで簡単かつ高速にWebアプリを作成できる強力なパッケージ。
Streamplit で作られたWebアプリ経由でファイルをアップロードして、そのファイルを処理したい際の具体的な実現方法がなかったので備忘録がてら残しておく。&lt;/p>
&lt;h2 id="pdfファイルをアップロードして画像に変換するwebアプリ">PDFファイルをアップロードして、画像に変換するWebアプリ&lt;/h2>
&lt;p>具体的に例を交えつつ説明する。
Streamlit を使って、PDFファイルをアップロードしてアップロードされたPDFファイルを画像化するアプリを作成する。
今回は、&lt;a href="https://github.com/Belval/pdf2image">Belval/pdf2image&lt;/a> というPDFパッケージを使用する。
このパッケージは処理したいPDFのファイルパスを要求するインターフェースなので今回の実例に沿っていてわかりやすい。
ローカルマシンは MacOS を想定しており、&lt;code>pdf2image&lt;/code> は&lt;a href="https://poppler.freedesktop.org/">poppler&lt;/a> の事前インストールが必須。&lt;/p>
&lt;h3 id="完成形のスクリーンショット">完成形のスクリーンショット&lt;/h3>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-07-08/images/streamlit.png" alt="get the uploaded file path in Streamlit">&lt;/p>
&lt;p>GitHubでもコードを公開しておきました。&lt;/p>
&lt;p>&lt;a href="https://github.com/hurutoriya/streamlist-file-uploader-example">hurutoriya/streamlist-file-uploader-example&lt;/a>&lt;/p>
&lt;p>デモ動画はこちら&lt;/p>
&lt;p>&lt;a href="https://youtu.be/ILGVapirwlg">Demo Movie in Youtube&lt;/a>&lt;/p>
&lt;h3 id="makefile">Makefile&lt;/h3>
&lt;p>Makefile は依存パッケージを事前インストールするために採用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="nf">install&lt;/span>&lt;span class="o">:&lt;/span>
brew install poppler
poetry install
&lt;span class="nf">run&lt;/span>&lt;span class="o">:&lt;/span>
poetry run streamlit run streamlit_pdf_uploader/main.py
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="poetry-for-package-management">Poetry for package management&lt;/h3>
&lt;p>環境構築はpoetry を使っています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;streamlit-pdf-uploader&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">python&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^3.8&amp;#34;&lt;/span>
&lt;span class="nx">streamlit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^0.84.0&amp;#34;&lt;/span>
&lt;span class="nx">watchdog&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^2.1.3&amp;#34;&lt;/span>
&lt;span class="nx">pdf2image&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^1.16.0&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dev&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">pytest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^5.2&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">system&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">requires&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;poetry-core&amp;gt;=1.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">build&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">backend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;poetry.core.masonry.api&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="streamlit-python-file">Streamlit Python file&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">base64&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">tempfile&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">streamlit&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">st&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">pdf2image&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">convert_from_path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">show_pdf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Show the PDF in Streamlit
&lt;/span>&lt;span class="s2"> That returns as html component
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Parameters
&lt;/span>&lt;span class="s2"> ----------
&lt;/span>&lt;span class="s2"> file_path : [str]
&lt;/span>&lt;span class="s2"> Uploaded PDF file path
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">base64_pdf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b64encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">pdf_display&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;embed src=&amp;#34;data:application/pdf;base64,{base64_pdf}&amp;#34; width=&amp;#34;100%&amp;#34; height=&amp;#34;1000&amp;#34; type=&amp;#34;application/pdf&amp;#34;&amp;gt;&amp;#39;&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">markdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pdf_display&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">unsafe_allow_html&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Streamlit application
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;PDF file uplodaer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">uploaded_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">file_uploader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Choose your .pdf file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;pdf&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">uploaded_file&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># Make temp file path from uploaded file&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">tempfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NamedTemporaryFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">delete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">tmp_file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">markdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;## Original PDF file&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uploaded_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getvalue&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">show_pdf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">imgs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">convert_from_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">markdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;Converted images from PDF&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">st&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imgs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>これで、Streamlit 上でファイルをアップロードして、そのアップロードされたファイルに対する処理ができます。
画像や音声など色々応用先があるので便利そう。
動作が遅いという欠点はあれど、これだけ簡単にGUIをPython のみで構築できるのは驚き。
Protly Dashも2年ほど前に使ったことがあるけど、UIのライフサイクルやHTMLを結構意識しないとかけなかったので辛かった記憶があるので、なおさら感動している。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://discuss.streamlit.io/t/showing-pdf-file-on-streamlitsharing-thats-in-github-directory/11955">Showing PDF file on StreamlitSharing that’s in github directory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://discuss.streamlit.io/t/problem-in-reading-a-db-object-using-file-uploader/3064/10">Problem in reading a “db” object using file uploader&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>2021年05月時点で自分が実践しているMLOpsの情報収集方法</title><link>https://shunyaueta.com/posts/2021-05-29/</link><pubDate>Sat, 29 May 2021 22:32:58 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-05-29/</guid><description>
&lt;p>先日、同僚に「機械学習プロジェクトに興味があるんだけど、おすすめの資料があったら教えてほしい」と言われたので、Blog記事に現時点でのおすすめの資料としてまとめておいたら、数年後見返したら面白そうだと思ったので記事として公開しておく。&lt;/p>
&lt;h2 id="おすすめの資料">おすすめの資料&lt;/h2>
&lt;h3 id="プロジェクトマネジメントや考え方思想">プロジェクトマネジメントや考え方、思想&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.coursera.org/learn/google-machine-learning">How Google does Machine Learning&lt;/a>
&lt;ul>
&lt;li>これは機械学習を実応用する人たちにはぜひ見てほしいビデオ講義。前半が、機械学習プロジェクトの計画や、優先順位、よくあるアンチパターンについて GCP で機械学習について多く関わってきたエンジニアが解説してくれていて、非常に勉強になる。 &lt;a href="https://shunyaueta.com/posts/2020-04-18/">感想記事&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3yJru2u">リーン・スタートアップ　ムダのない起業プロセスでイノベーションを生みだす&lt;/a>
&lt;ul>
&lt;li>顧客が求めるものを作ろう。機械学習にこだわったらまずだめなので&amp;hellip; (詳しくは後述の Rules of ML を呼んでみよう。)&lt;/li>
&lt;li>関連する良いフレームワークとして @nishio さんの&lt;a href="https://www.slideshare.net/nishio/01-68382174">機械学習キャンバス&lt;/a> もおすすめです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="http://www.paulgraham.com/good.html">Make something people want. by Paul Graham&lt;/a>
&lt;ul>
&lt;li>人によって意見が別れるところではありますが、機械学習エンジニアとして、これがなぜ機械学習で必要なのかの「なぜ」を説明できないとたいてい上手く行かない経験がある。つまるところ、必要とされるものを見つけ出して作っていこうぜということですね&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://qiita.com/KanNishida/items/12f9ae0cee98fd54b0bb">Netflix がカスタマーを誰よりも理解するためのデータ分析プロセス、コンシューマー・サイエンスの紹介&lt;/a>
&lt;ul>
&lt;li>カスタマーオブセッションの考え方を、常に心のなかに秘めつつ世の中を良くするプロダクトを作りたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="mlops-機械学習エンジニアリング">MLOps, 機械学習エンジニアリング&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/machine-learning/guides/rules-of-ml">Rules of Machine Learning&lt;/a>
&lt;ul>
&lt;li>全員これを毎日読もう。聖書&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3yMQhCY">仕事ではじめる機械学習 第 2 版&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://mlct.connpass.com/">MLCT&lt;/a> 創始者の @chezou さんが筆頭に書き上げた実践的な機械学習本。日本人で機械学習をやりたいならまずこれを買うべし。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://amzn.to/3wNgYpj">AI アルゴリズムマーケティング 自動化のための機械学習/経済モデル、ベス トプラクティス、アーキテクチャ&lt;/a>
&lt;ul>
&lt;li>邦訳だとべらぼうに怪しい感じになってしまっているが、内容はとんでもなく素晴らしい。マーケティングのために機械学習を適用することが多いと思うが、かなり網羅的に適用例を解説してくれている。原著の英語は無料なので、中身が気になる人は&lt;a href="https://algorithmic-marketing.online/">そちら&lt;/a>をおすすめする。無料公開偉大すぎる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning">MLOps: 機械学習における継続的デリバリーと自動化のパイプライン&lt;/a>
&lt;ul>
&lt;li>GCP による MLOps の解説。人によって、MLOps の定義って差異がありますが、自分はここで語られている &lt;code>ML システム構築のすべてのステップで自動化とモニタリングを推進できます&lt;/code> こそが、 MLOps の骨子だなと思っています。クラウドサービスは、開発に関係する知識をパターン化して、資料を公開してくれるのでありがたいですね。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/architecture/ml-on-gcp-best-practices?hl=ja">Google Cloud で機械学習を実装するためのベスト プラクティス&lt;/a>
&lt;ul>
&lt;li>この資料なんかは、GCPで機械学習を実践したい場合にはまず見ておけば困ることはなさそうですね&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>各クラウドサービスの MLOps の white paper
&lt;ul>
&lt;li>AWS, Azure は普段使わないので深く言及しませんが、同様の資料は公開されたりしています。
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/resources/mlops-whitepaper?hl=ja">Practitioner Guide to MLOps by GCP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://d1.awsstatic.com/whitepapers/mlops-continuous-delivery-machine-learning-on-aws.pdf">MLOps: Continuous Delivery for Machine Learning on AWS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://azure.microsoft.com/en-us/resources/mlops-infographic/">Azure Best practices for MLOps - DevOps for machine learning.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.coursera.org/specializations/machine-learning-engineering-for-production-mlops">Machine Learning Engineering for Production (MLOps)&lt;/a> も気になっているが、手を出せていないのでまた受講が完了したら感想を書きたい。Andrew 先生の講義はハズレはないので非常に期待している。&lt;/p>
&lt;h3 id="論文">論文&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/eugeneyan/applied-ml">eugeneyan/applied-ml&lt;/a>
&lt;ul>
&lt;li>@euganeyan さんがまとめてくれている、機械学習の応用例をまとめてくれているリポジトリ。事例を探したいならまずここを見れば間違いない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://research.google/pubs/pub46555/">The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction&lt;/a>
&lt;ul>
&lt;li>機械学習システムの完成度を点数化できて、どの部分を改善していけばいいか明瞭にしてくれます。一度プロダクションにリリース後に、チームでスコアを計算してみて、次に何を改善するのか議論すると楽しいです。 &lt;a href="https://shunyaueta.com/posts/2020-04-25/">日本語での抄訳&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="情報収集源">情報収集源&lt;/h2>
&lt;h3 id="rss-twitter">RSS (+Twitter)&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.amazon.science/">Amazon Science&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ai.google/">Google AI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.tensorflow.org/">TensorFlow blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>なんかの RSS を登録しています。なんだかんだ RSS 便利なので最近回帰している。Twitter でしか得られない情報もあったりはしますが、特定のリストを使って監視してます。Nuzzle を愛用していたが、なくなってしまったで復活してほしい。&lt;/p>
&lt;h3 id="conference-tutorial-workshop">Conference tutorial, workshop&lt;/h3>
&lt;h3 id="academic">Academic&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://kdd.org/kdd2021/calls/view/call-for-applied-data-science-track-papers">KDD Applied Data Science Track Papers&lt;/a>
&lt;ul>
&lt;li>世界最高峰の機械学習の実応用例の論文が集まる KDD の ADS track。毎年論文が公開されるのが楽しみ。RecSys や SIGIR など、自分の専門分野に合わせた論文を呼んでおくと楽しいです。&lt;a href="https://www.kamishima.net/archive/MLDMAImap.pdf">神嶌先生の ML, DM, and AI Conference Map&lt;/a>を参考にどんな国際会議があるかを調べてみるといいかもしれません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://sites.google.com/view/ecnlp/www-2020">ECNLP 2&lt;/a> , &lt;a href="https://sigir-ecom.github.io/">SIGIR eCo&lt;/a>
&lt;ul>
&lt;li>近年だと E Commerce など実世界への適用を主題にしたワークショップがアカデミックな会議でも開催されていて、非常にいい流れだと思う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>少し前だと、&lt;a href="https://sites.google.com/site/wildml2017icml/">Reliable Machine Learning in the Wild&lt;/a>, &lt;a href="http://learningsys.org/nips17/acceptedpapers.html">Workshop on ML Systems&lt;/a>, &lt;a href="https://sites.google.com/site/wildml2016nips/">Reliable Machine Learning in the Wild&lt;/a> のワークショップも面白かった。&lt;/p>
&lt;h4 id="industrial">Industrial&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://mlsys.org/">MLSys&lt;/a>
&lt;ul>
&lt;li>機械学習の実応用をテーマにして査読付き学会&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20">OpML&lt;/a>
&lt;ul>
&lt;li>機械学習の実運用をテーマにした査読付き学会。MLSys よりも実践論がテーマになっている。2021 年は開催されないみたいで悲しい。2021 年は SRECON21 で&lt;a href="https://www.usenix.org/conference/srecon21/call-for-participation">OpML Track&lt;/a> が開催されていた。来年は OpML が単独カンファレンスとして復活してほしい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://mlconf.com/">MLconf&lt;/a>
&lt;ul>
&lt;li>海外の機械学習実践の第一人者の人たちが自社事例を惜しげもなく公開してくれているいいカンファレンス。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://twimlcon.com/">TWIMLcon&lt;/a>
&lt;ul>
&lt;li>TWIML podcast を主催している Sam さんが開催している、機械学習事例のカンファレンス。有料だが、Sam さんのおそろべきネットワークにより、有料にする価値は間違いなくあるカンファレンスとなっている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="podcast">Podcast&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://twimlai.com/">twiml&lt;/a>
&lt;ul>
&lt;li>ゲストがかなり豪華で、理論から実践まで幅広くトピックを取り扱っている。M.J. 先生や Alex smola 先生がゲストとして着てるのは驚くしかない。。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://anchor.fm/mlops/">MLOps.community&lt;/a>
&lt;ul>
&lt;li>こちらは、実践的な麺をメインにした Podcast。D Sculley さんがゲストとしてきていた、&lt;a href="https://anchor.fm/mlops/episodes/The-Godfather-Of-MLOps--D-Scully--MLOps-Coffee-Sessions-32-eskt3q">The Godfather Of MLOps&lt;/a> は神回なのでおすすめ。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>読んだ記事は &lt;a href="https://b.hatena.ne.jp/hurutoriya/AppliedML/">はてぶでまとめている&lt;/a>ので、興味のある方はフォローすると役立つかもしれません。Twitter のほうにもはてぶと連携して放流しているので、そちらの&lt;a href="https://twitter.com/hurutoriya">フォロー&lt;/a>も是非。&lt;/p></description></item><item><title>Poetry からsetup.py を自動生成する</title><link>https://shunyaueta.com/posts/2021-05-23/</link><pubDate>Sun, 23 May 2021 23:42:28 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-05-23/</guid><description>
&lt;p>現状の Poetry では、&lt;code>pyproject.toml&lt;/code> を基にした &lt;code>setup.py&lt;/code> の直接的な自動生成をサポートしていない。&lt;/p>
&lt;p>&lt;a href="https://github.com/python-poetry/poetry/issues/761">Support generation of poetry manged setup.py file #761&lt;/a>&lt;/p>
&lt;p>え？なんで &lt;code>setup.py&lt;/code> が必要なんですか? &lt;code>poetry build&lt;/code> で生成される &lt;code>source&lt;/code> と &lt;code>wheels&lt;/code> で事足りるんじゃないですかというツッコミがあると思います。&lt;/p>
&lt;p>&lt;code>PyPI&lt;/code> や &lt;code>Jflog&lt;/code> などでホストせずに、GitHub のリポジトリでパッケージを管理したり、特定のサブディレクトリをパッケージとして扱う際には、未だ &lt;code>setup.py&lt;/code> での依存関係の記述が必要です。&lt;/p>
&lt;h2 id="poetry-による実現方法">Poetry による実現方法&lt;/h2>
&lt;p>&lt;a href="https://python-poetry.org/docs/cli/#build">poetry build&lt;/a> コマンドと Makefile を組み合わせることで、&lt;code>pyproject.toml&lt;/code> に対応した &lt;code>setup.py&lt;/code> の自動生成ができるのでそれを採用します。
コマンドはGitHub のissues でのコメントを参考にしました。 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Makefile" data-lang="Makefile">&lt;span class="c"># package name
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nv">PACKAGE&lt;/span> &lt;span class="o">=&lt;/span> lib
&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">build&lt;/span>-&lt;span class="n">package&lt;/span>
&lt;span class="nf">build-package&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c">## Generate setup.py by poetry command for shared package
&lt;/span>&lt;span class="c">&lt;/span> poetry build
&lt;span class="c1"># source ./dist で解凍&lt;/span>
tar zxvf dist/&lt;span class="k">$(&lt;/span>PACKAGE&lt;span class="k">)&lt;/span>.tar.gz -C ./dist
&lt;span class="c1"># setup.py を手元にコピー&lt;/span>
cp dist/&lt;span class="k">$(&lt;/span>PACKAGE&lt;span class="k">)&lt;/span>/setup.py setup.py
&lt;span class="c1"># poetry build で生成されたファイルをすべて削除&lt;/span>
rm -rf dist
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/python-poetry/poetry/issues/761#issuecomment-689491920">https://github.com/python-poetry/poetry/issues/761#issuecomment-689491920&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>KyTeaをPythonで扱えるMykyteaを使うために必要なこと</title><link>https://shunyaueta.com/posts/2021-05-19/</link><pubDate>Wed, 19 May 2021 22:04:41 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-05-19/</guid><description>
&lt;h2 id="テキスト解析機-kytea">テキスト解析機 KyTea&lt;/h2>
&lt;p>KyTeaを業務で使う機会があり、Python wrapper である Mykytea を使ってみたのですが、poetry や pip で Mykytea をインストールするだけでは、&lt;/p>
&lt;p>&lt;code>Library not loaded: /usr/local/lib/libkytea.0.dylib in version = &amp;quot;0.1.5&amp;quot;&lt;/code>&lt;/p>
&lt;p>上記のエラーが出力され、KyTea を使うことができませんでした。
Mykytea のリポジトリに issue &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> を立てて、@chezou さんにお聞きしてみたところ、&lt;/p>
&lt;blockquote>
&lt;p>Good point.
Mykytea wheel assumes that kytea is installed under /usr/local/lib, while your kytea exists another place.
This should be Mykytea issue and there are two options we can avoid it like:&lt;/p>
&lt;ol>
&lt;li>Use delocate, like Linux&amp;rsquo;s audit-wheel &lt;a href="https://realpython.com/python-wheels/">https://realpython.com/python-wheels/&lt;/a>&lt;/li>
&lt;li>Install from source using wheel instead.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>とのことで、&lt;code>/usr/local/lib&lt;/code> にKyTea がインストールされていることを前提としているので、KyTea自身をソースコードからビルドすることをおすすめするとご助言をいただくことができました。&lt;/p>
&lt;p>C++,C に疎いので知らなかったのですが、&lt;code>dylib&lt;/code>という仕組みで共通ライブラリとして扱えるんですね。&lt;/p>
&lt;h2 id="makefile-によるkyteaのビルドとquick-check-の自動化">Makefile によるkyteaのビルドと、quick check の自動化&lt;/h2>
&lt;p>自分はMakefile を好んで使うのですが、以下のようなタスクを作成することで、KyTeaのビルドと、quick check をワンライナーで行えるようにしました。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-make" data-lang="make">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">keytea&lt;/span>-&lt;span class="n">install&lt;/span>
&lt;span class="nf">keytea-install&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c">## install and build kytea
&lt;/span>&lt;span class="c">&lt;/span> curl -SsL -o kytea.tar.gz http://www.phontron.com/kytea/download/kytea-0.4.7.tar.gz
mkdir -p /tmp/kytea
tar -xzvf kytea.tar.gz -C /tmp/kytea --strip-components &lt;span class="m">1&lt;/span>
&lt;span class="nb">cd&lt;/span> /tmp/kytea &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ./configure &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make -j4 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
rm kytea.tar.gz
&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">kytea&lt;/span>-&lt;span class="n">test&lt;/span>
&lt;span class="nf">kytea-test&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c">## check kytea lib installed by C++ source code build
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;山田太郎はコーヒーを買って飲んだ。&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> kytea
poetry run python -c &lt;span class="s2">&amp;#34;import Mykytea&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用した pyproject.toml は以下です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-pyproject.toml" data-lang="pyproject.toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;kytea-test&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;]
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2">[tool.poetry.dependencies]
&lt;/span>&lt;span class="s2">python = &amp;#34;&lt;/span>&lt;span class="err">^&lt;/span>&lt;span class="mf">3.7&lt;/span>&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="s2">kytea = &amp;#34;&lt;/span>&lt;span class="err">~&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2">[tool.poetry.dev-dependencies]
&lt;/span>&lt;span class="s2">pytest = &amp;#34;&lt;/span>&lt;span class="err">^&lt;/span>&lt;span class="mf">5.2&lt;/span>&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2">[build-system]
&lt;/span>&lt;span class="s2">requires = [&amp;#34;&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">core&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="s2">&amp;#34;]
&lt;/span>&lt;span class="s2">build-backend = &amp;#34;&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">core&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">masonry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">api&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>機械学習タスクでは外部のデータに依存することが多いですが、Makefile でその検査を自動化することができるので愛用しています。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/chezou/Mykytea-python/issues/17">Library not loaded: /usr/local/lib/libkytea.0.dylib in version = &amp;ldquo;0.1.5&amp;rdquo; #17&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>[抄訳] 検索エンジンの達成度と検索チームの成熟度モデル</title><link>https://shunyaueta.com/posts/2021-05-12/</link><pubDate>Wed, 12 May 2021 22:33:23 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-05-12/</guid><description>
&lt;p>&lt;a href="https://twitter.com/rilmayer_jp/status/1348151389298454528">@rilmayer_jpさんのツイート&lt;/a> をきっかけに、検索チームの成熟度モデルの存在を知りました。ありがとうございます!&lt;/p>
&lt;p>&lt;a href="https://twitter.com/dep4b">Eric Pugh&lt;/a> さんが、検索エンジンに関する会議で公演した内容で、検索チームがどのように成熟していくかをモデル化しており、それが面白かったので備忘録として残しておく&lt;/p>
&lt;h2 id="更新">更新&lt;/h2>
&lt;ul>
&lt;li>2021/05/13 : 原著者の&lt;a href="https://twitter.com/dep4b">Eric Pugh&lt;/a> さんから、抄訳のご快諾いただけました。ありがとうございます&lt;/li>
&lt;/ul>
&lt;h2 id="翻訳元資料">翻訳元資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://mices.co/mices2019/slides/pugh_search-organizational-maturity-model.pdf">Search Relevance Organizational Maturity Model slide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/i1M2eUMXXQY">Haystack LIVE! 2020 Search Relevance Organizational Maturity Model&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="検索エンジンのレベル">検索エンジンのレベル&lt;/h2>
&lt;p>検索エンジンへの要求をどれだけ満たしているかをピラミッド構造でわかりやすく説明している&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-05-12/images/1.png" alt="翻訳 検索チームの成熟度モデル - Search Relevance Organizational Maturity Model MICES 2019 Berlin _ Eric Pugh _ @dep4b-(1).png">&lt;/p>
&lt;h2 id="検索チームの成熟度モデル">検索チームの成熟度モデル&lt;/h2>
&lt;p>7項目の検索チームの評価項目を考え、3段階で評価を行う&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>ビジネス&lt;/th>
&lt;th>顧客の要求の理解&lt;/th>
&lt;th>検索技術&lt;/th>
&lt;th>実験駆動&lt;/th>
&lt;th>UX&lt;/th>
&lt;th>コンテンツ強化&lt;/th>
&lt;th>データ保有&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>発展&lt;/td>
&lt;td>ステークホルダーがリアルタイムKPIを使用している&lt;/td>
&lt;td>データ解析から質的なデータを得ている&lt;/td>
&lt;td>カスタムプラグインを作成している&lt;/td>
&lt;td>A/Bテスト、オフラインテストをサポートしている&lt;/td>
&lt;td>革新的な発見性を提供している(chatbot, 等)&lt;/td>
&lt;td>NLPやデータサイエンティストの専任チームが取り組んでいる&lt;/td>
&lt;td>多種多様な、複雑かつ大規模なデータを扱っている&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>実践&lt;/td>
&lt;td>不定期にレポートを行っている&lt;/td>
&lt;td>いくつかのユーザーテスト、基礎的な分析を行っている&lt;/td>
&lt;td>関連性のための複雑な設定、プラグインの使用をしている&lt;/td>
&lt;td>実験は適用可能だが、A/Bテストなどはできない&lt;/td>
&lt;td>発見しやすくするためのUIを提供している&lt;/td>
&lt;td>分類学や概念体型の適用をしている&lt;/td>
&lt;td>データの複雑度の監視している&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>基礎&lt;/td>
&lt;td>ビジネスインパクトが測定されていない&lt;/td>
&lt;td>クエリログは存在しない、またはユーザーテストを行っていない&lt;/td>
&lt;td>技術スタックを適度に調整している&lt;/td>
&lt;td>検索のテストは手作業で行い、デプロイは低頻度&lt;/td>
&lt;td>1ページに10個の検索結果がある&lt;/td>
&lt;td>僅かな取り組み(シノニムなど)&lt;/td>
&lt;td>とても単純なデータモデル&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="感想">感想&lt;/h2>
&lt;p>ひと目で&lt;/p>
&lt;ul>
&lt;li>今の自分達がどの位置にいて&lt;/li>
&lt;li>何を目指せばいいか&lt;/li>
&lt;/ul>
&lt;p>わかる可視化は示唆に富むのでありがたい&lt;/p></description></item><item><title>Pythonで、変数を挿入して柔軟にSQLクエリを構築する</title><link>https://shunyaueta.com/posts/2021-04-29/</link><pubDate>Thu, 29 Apr 2021 22:52:25 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2021-04-29/</guid><description>
&lt;p>データ処理のタスクをこなしていると、PythonでSQLに変数を挿入し柔軟にSQLクエリを構築したくなる。
例えば、&lt;/p>
&lt;ul>
&lt;li>中間テーブルを作るためにAirFlowなどで定期的なジョブを実行し、SQLの &lt;code>created&lt;/code>の時間を当日のものに変更する&lt;/li>
&lt;li>&lt;code>training&lt;/code>, &lt;code>dev&lt;/code>, &lt;code>test&lt;/code> でデータを分割する際に、&lt;code>created&lt;/code>の条件を変更して3パターンのデータを取得する&lt;/li>
&lt;/ul>
&lt;p>などが考えられる。&lt;/p>
&lt;p>変数をSQLに組み込んで実行したい際には、&lt;a href="https://github.com/kayak/pypika">kayak/pypika&lt;/a>のような SQL builder もあるが、個人的に可読性が悪くなったり、SQLクエリの作成のためだけに余計なパッケージをいれたくない。そのためパッケージを入れずにシンプルに完結する方法をここでは紹介する。&lt;/p>
&lt;h2 id="編集履歴">編集履歴&lt;/h2>
&lt;ul>
&lt;li>2021/05/12: twitter でdocstring ではなくstring literal ですよという指摘をいただき修正 &lt;a href="https://twitter.com/cocu_tan/status/1392481952662310925">ref&lt;/a>&lt;/li>
&lt;li>2021/05/12: twitter での意見を反映&lt;/li>
&lt;/ul>
&lt;h2 id="1--単なる文字列としてsqlクエリを構築">1. 単なる文字列としてSQLクエリを構築&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_guery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">category&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">sql&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;SELECT field1, field2, field3, field4 FROM TABLE WHERE condition1={num} AND condition2={category}&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sql&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>f-string で文字列に変数を挿入して、SQLクエリを構築&lt;/li>
&lt;/ul>
&lt;p>だが、&lt;/p>
&lt;ul>
&lt;li>SQLが長くなるとPEP8に準拠せず、&lt;a href="https://www.flake8rules.com/rules/E501.html">E501 line too long&lt;/a>に抵触する&lt;/li>
&lt;li>視認性が低く、SQLクエリの実行内容を理解しづらい&lt;/li>
&lt;/ul>
&lt;h2 id="2-複数行文字列としてsqlクエリを構築">2. 複数行文字列としてSQLクエリを構築&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_guery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">category&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">sql&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> SELECT field1, field2, field3, field4
&lt;/span>&lt;span class="s2"> FROM table
&lt;/span>&lt;span class="s2"> WHERE condition1={num}
&lt;/span>&lt;span class="s2"> AND condition2={category}
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sql&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>1番目と比較すると、複数行を扱える&lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals">string literal-longstring&lt;/a>を採用することで、SQLクエリが複数行になることでで見やすい (@cocu_tan さん、&lt;a href="https://twitter.com/cocu_tan/status/1392481952662310925">ご指摘&lt;/a>ありがとうございます!)&lt;/li>
&lt;/ul>
&lt;p>だが&lt;/p>
&lt;ul>
&lt;li>SQL構文に関する lint や フォーマッターを活用できない&lt;/li>
&lt;li>SQLへのシンタックスハイライトが無いので、視認性が低い&lt;/li>
&lt;/ul>
&lt;h2 id="3--sql-ファイルを文字列として読み込み-formatで変数を挿入する">3. SQL ファイルを文字列として読み込み、 &lt;code>.format()&lt;/code>で変数を挿入する&lt;/h2>
&lt;p>SQLファイルが &lt;code>./sql/test.sql&lt;/code> に設置されている状態とする。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql:test.sql" data-lang="sql:test.sql">&lt;span class="k">SELECT&lt;/span>
&lt;span class="n">field1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">field2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">field3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">field4&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="k">TABLE&lt;/span>
&lt;span class="k">WHERE&lt;/span>
&lt;span class="n">condition1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="err">}&lt;/span>
&lt;span class="k">AND&lt;/span> &lt;span class="n">condition2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">category&lt;/span>&lt;span class="err">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Python 側での実装例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_guery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">category&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> SQLファイルに変数を挿入してクエリを作成する
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Args:
&lt;/span>&lt;span class="s2"> num (int): 年齢
&lt;/span>&lt;span class="s2"> category (str): 好きな果物
&lt;/span>&lt;span class="s2"> filename (str): SQLファイルの名前
&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="s2"> Returns:
&lt;/span>&lt;span class="s2"> str: SQLクエリ
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./sql&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">category&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">category&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_guery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">category&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test.sql&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>実行結果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">SELECT
field1,
field2,
field3,
field4
FROM
TABLE
WHERE
&lt;span class="nv">condition1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">18&lt;/span>
AND &lt;span class="nv">condition2&lt;/span>&lt;span class="o">=&lt;/span>apple
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>SQLクエリを&lt;code>SQL&lt;/code>ファイルで管理できるので、フォーマッターやシンタックスハイライトの恩恵を活用できる。&lt;/li>
&lt;li>ファイルオブジェクトに対して &lt;code>.read()&lt;/code>メソッドを使うことで文字列として扱うことができる。そのおかげで、SQLファイルに&lt;code>{var_1}&lt;/code>, &lt;code>{var_2}&lt;/code> のような形式で、Python上の変数をSQLの挿入して柔軟にクエリを構築可能になる。&lt;/li>
&lt;/ul>
&lt;p>SQLファイルの中にPythonの &lt;code>.format()&lt;/code> 記法を事前に埋め込むことが今回のコツですね。&lt;/p>
&lt;h3 id="余談">余談&lt;/h3>
&lt;p>SQLファイル内に&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql:test.sql" data-lang="sql:test.sql">&lt;span class="c1">-- {}の中にPythonから変数が挿入される
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">SELECT&lt;/span>
&lt;span class="n">field1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">field2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">field3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">field4&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="k">TABLE&lt;/span>
&lt;span class="k">WHERE&lt;/span>
&lt;span class="n">condition1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="err">}&lt;/span>
&lt;span class="k">AND&lt;/span> &lt;span class="n">condition2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">category&lt;/span>&lt;span class="err">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>1行目のようなコメントを入れてしまうと、SQLファイルの中ではコメントとして評価される部分もPythnの文字列内では&lt;code>.format()&lt;/code>の挿入対象となる。その影響で&lt;code>.format()&lt;/code>で挿入されるべき変数の数が3つと評価され、実際の引数は2つしか与えておらずエラーが発生する。
SQLファイルのコメントであろうと、&lt;code>{}&lt;/code>と記述しないように気をつけておきましょう。&lt;/p>
&lt;h2 id="追記">追記&lt;/h2>
&lt;p>Twitter でみんなの管理方法をお聞きできたので、記しておく。
ありがたい。&lt;/p>
&lt;h3 id="shuhei_fujiwara-さん">@shuhei_fujiwara さん&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/shuhei_fujiwara/status/1387815866436243458">https://twitter.com/shuhei_fujiwara/status/1387815866436243458&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>BigQuery の話だけど僕は&lt;/p>
&lt;ul>
&lt;li>ほとんどの場合 =&amp;gt; parameterized query&lt;/li>
&lt;li>本当に短くて自明なクエリ =&amp;gt; 1 or 2&lt;/li>
&lt;li>どうにもならんとき =&amp;gt; 3
&lt;a href="https://cloud.google.com/bigquery/docs/parameterized-queries">https://cloud.google.com/bigquery/docs/parameterized-queries&lt;/a>
3 はわかるんだけど、Python コードで読み込む前提よりは SQL ファイル単体で成立している方が好きなので可能なら避けてます&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>単体で成立したい気持ち、たしかに分かる~&lt;/p>
&lt;h3 id="satoshihirose-さん">@satoshihirose さん&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/satoshihirose/status/1387776005943840772">https://twitter.com/satoshihirose/status/1387776005943840772&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Airflowのみの話にはなってしまいますが、sqlはファイルとして管理して基本jinja template対応のオペレーター使ってましたね &lt;a href="https://qiita.com/munaita_/items/6bdcfb10f36c8c6b4753">https://qiita.com/munaita_/items/6bdcfb10f36c8c6b4753&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Airflow のときにjinja 使えるんですね。今度から使います!&lt;/p>
&lt;h3 id="reto_nayuta-さん">@reto_nayuta さん&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/reto_nayuta/status/1387801584512364544">https://twitter.com/reto_nayuta/status/1387801584512364544&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>私も（Airflow ではないですが）jinja 使うことが多いですね&lt;/p>
&lt;/blockquote>
&lt;h3 id="sassahero-さん">@SassaHero さん&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/SassaHero/status/1387878168481075200">https://twitter.com/SassaHero/status/1387878168481075200&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>3を、from string import Templateで変数置き換えを実現してます！&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>from string import Template&lt;/code> 知らなかった&lt;/p>
&lt;h2 id="ref">Ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/5243596/python-sql-query-string-formatting">Python SQL query string formatting&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>機械学習エンジニアから検索エンジニアに転生</title><link>https://shunyaueta.com/posts/2021-03-27/</link><pubDate>Sat, 27 Mar 2021 23:54:15 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-03-27/</guid><description>
&lt;p>2018 年 2 月に株式会社メルカリに機械学習エンジニアとして入社したが、来月から同社で検索エンジニアに転向する。&lt;/p>
&lt;h2 id="機械学習エンジニアとして">機械学習エンジニアとして&lt;/h2>
&lt;p>入社してからは主に、機械学習により同社での Cusotmer Service 分野の業務効率化を推進してきた。
この３年間で、実応用を前提にした機械学習プロジェクトの&lt;code>1→100&lt;/code>と&lt;code>０→１&lt;/code>の両者を体験できたのは得難い経験だった。&lt;/p>
&lt;p>主に 2 つのプロジェクトを取り組んできたが、そのうちの一つである「機械学習による商品監視プロジェクト」の成果を&lt;a href="https://shunyaueta.com/posts/2020-09-06/">論文として公開&lt;/a> できたのは、自分としても嬉しい。&lt;/p>
&lt;p>この領域は&lt;code>Trust and Safaty&lt;/code> とよばれており、少し聞き慣れない言葉かもしれないが、サービスを提供するにあたって必須となるサービスの信頼と安全性を高めることを指す。
少し前に Pinterest がこの領域でのカンファレンスを開催していて、この領域での機械学習の需要がなくなることは無いだろうなと改めて確信を得た。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pinterestmachinelearning.splashthat.com/">Trust &amp;amp; Safety Machine Learning Summit &lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="なぜ検索エンジニア">なぜ検索エンジニア?&lt;/h2>
&lt;p>キャリアで新しいことに挑戦したい時、鶏と卵問題は必ず発生すると思っている。
例えば機械学習エンジニアが募集されているが、実務経験を重視されるので未経験だとそもそもポジションに就くことができない。&lt;/p>
&lt;p>データとエンジニアリングの重なる領域でもう一段スキルと経験を深めたいなと検討した領域が検索領域だったが、一般的な募集では検索領域での経験 N 年以上を求むというものが多く、未経験での転職の壁はなかなかに厳しい。
なら内部での異動はどうだろうと去年の年末に希望を出してみたところ、まずは実験的にチーム異動してみようという話になった。
2 月の半ばから 1 ヶ月程度検証期間を経て問題なしということで、ひとまず正式に検索チームに異動できることになった。&lt;/p>
&lt;p>身内贔屓というわけではないが、世界的に見ても同社の検索チームは領域的にもチームとしても凄くエキサイティングだと思っている。
まさに情熱プログラマーでも提唱されている、&lt;code>一番の下手くそでいよう&lt;/code>が実践できるので凄くワクワクしている。&lt;/p>
&lt;blockquote>
&lt;p>一番の下手くそでいよう by &lt;a href="https://amzn.to/3cyg1tL">情熱プログラマー ソフトウェア開発者の幸せな生き方 &lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>扱う技術スタックなどは変わりますが、僕の中では根本的にデータとエンジニアリングにどっぷり浸かる点では機械学習エンジニアだろうと検索エンジニアだろうと変わりはしないので、着実に経験を積んでいきたいなと思っています。&lt;/p>
&lt;p>直近の目標としては 2 年以内に、検索領域で自分の興味とマッチする査読付き国際会議&lt;/p>
&lt;ul>
&lt;li>KDD&lt;/li>
&lt;li>CHIIR&lt;/li>
&lt;li>SIGIR ecom&lt;/li>
&lt;li>ECNLP&lt;/li>
&lt;li>OpML&lt;/li>
&lt;li>MLSys&lt;/li>
&lt;/ul>
&lt;p>に採択されるような、Novel な(今までにない)成果を出したい&lt;/p></description></item><item><title>pipenv でローカルパッケージが正常にインストールされないときの対処法</title><link>https://shunyaueta.com/posts/2021-03-13/</link><pubDate>Sat, 13 Mar 2021 21:43:44 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-03-13/</guid><description>
&lt;h2 id="tl-dr">TL; DR;&lt;/h2>
&lt;ul>
&lt;li>pip install pipenv==2018.11.26 をすれば直った!!!!!&lt;/li>
&lt;/ul>
&lt;h2 id="実行環境">実行環境&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nv">$pipenv&lt;/span> --version
pipenv, version 2020.11.15
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="直面した問題">直面した問題&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">./app/
├── model
│ └── setup.py
└── serving
└── Pipfile
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>のような構成で、&lt;code>model&lt;/code>というローカルパッケージを作成しており、serving 直下のPipfile は、&lt;code>model&lt;/code> を読み込んでsetup.py に記述されている依存パッケージもインストールするようにしたい。&lt;/p>
&lt;p>serving ディレクトリで、以下のコマンドを入力すればローカルパッケージがpipenv によりインストールされるはずだが&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pipenv install --editable ../model
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依存関係をすべて記述するはずのPipenv.lock には、&lt;code>model&lt;/code>のパスのみが記述され、ローカルパッケージが要求する依存パッケージが記述されていない。&lt;/p>
&lt;p>原因を探してみたところ、&lt;/p>
&lt;p>&lt;a href="https://github.com/pypa/pipenv/issues/1024">Installing a local package with pipenv install &amp;lsquo;-e .&amp;rsquo; doesn&amp;rsquo;t save dependencies #1024&lt;/a>&lt;/p>
&lt;p>同じ GitHub issue を発見しダメ元で pipenv を以下のコマンドでダウングレードして見たところ&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install &lt;span class="nv">pipenv&lt;/span>&lt;span class="o">==&lt;/span>2018.11.26
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>なんと&amp;hellip;. 直った。無事にローカルパッケージの依存パッケージが Pipenv.lock に記述されており、無事にローカルパッケージがserving 直下で動くようになった。&lt;/p>
&lt;p>後方互換性が無いとかそんなちゃちな問題ではない気がするのだが、この問題でかなり時間が溶けたので非常に精神的に消耗した。&lt;/p>
&lt;p>思えばこういう問題が多くて、普段はpoetry を使っていたのを思い出した。&lt;/p>
&lt;h2 id="ref">Ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/53505681/installing-dependencies-of-a-local-dependency-with-pipenv">Installing dependencies of a local dependency with pipenv&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>2021年の目標</title><link>https://shunyaueta.com/posts/2021-03-05/</link><pubDate>Fri, 05 Mar 2021 20:42:15 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-03-05/</guid><description>
&lt;p>ちょっと遅れましたが、最近これからどうするかについて色々と考えていて、その過程で2021年をどう過ごすかが決まったのでメモ。&lt;/p>
&lt;h2 id="3つの目標">3つの目標&lt;/h2>
&lt;ol>
&lt;li>Senior Software Engineer として確固たる実力を身につけることに集中&lt;/li>
&lt;li>英語にふれることを習慣化&lt;/li>
&lt;li>SNSを断ち自分にとって後悔の無い時間を歩む&lt;/li>
&lt;/ol>
&lt;h2 id="senior-software-engineer-として確固たる実力を身につけることに集中">Senior Software Engineer として確固たる実力を身につけることに集中&lt;/h2>
&lt;p>まず Senior Software Engineer と自分で胸を張って宣言できる実力を身につける。&lt;/p>
&lt;p>最近は自分のキャリアを専門性を深堀りしていくとして、Software Engineer としての道を進んでいくことを決めた。&lt;/p>
&lt;p>上記の理由として自分はData Scientist になれるほど専門性は無いと思っている。Ph.D は持っていないし、再び博士課程に行くとしても研究は辛い。またMachine Learning Engineerや Data Scientist に特化していっても将来30年間働いていく中でそれらのレッドオーシャンで自分が生き抜いていけるとは思えない。
Software Engineer という職に飽きるまではProduct Manager のキャリアも考えなくていいと思った。その葛藤を同僚の人にも相談したが、輝かしい経歴(アメリカの有名大学でCS専攻→SWE→PMと天上人)の人でも、手を動かせなくなることに焦りを感じるよとおっしゃられていて非常に共感した。&lt;/p>
&lt;p>何よりも今の会社に入社して 3年間働いてきた経験で身に染みたのは、Software Engineer という職業が楽しいなと思えた。もちろんデータ分析や機械学習などにも楽しさがあるが、それらを最大限レバレッジをきかせるためにはSoftware Enginner としてのスキルが必須であり、最終的に物事を実現するためも避けて通れないと考えている。&lt;/p>
&lt;p>2020/03 からは新しいキャリアを見据えて少し方向転換をしてみることした。機械学習やデータ分析領域からは離れないが、チームが変わって扱う領域も異なるので非常に楽しみだ。弱くてニューゲームを楽しもう&lt;/p>
&lt;h2 id="英語にふれることを習慣化">英語にふれることを習慣化&lt;/h2>
&lt;p>最近親しい人と雑談する際に言葉に出すようにしているんですが、国外で働くことに憧れを持っています。業務でも英語を使ったコミュニケーションはムラがあるが4-7割ほどになっている。今の段階はコミュニケーションはできるが、細かいミスや相手にネイティブレベルのスピードで喋られると脳みそがストップして働くのをやめてしまうのでなんとかしたい。社内の語学学習強化トレーナーの人に相談したところ、やはり毎日時間を積み重ねていくしかないと言われたので、今の気合でしゃべる英会話から自分でも自信を持てる英語の力を持っていきたいなと思っている。&lt;/p>
&lt;h2 id="snsを断ち自分にとって後悔の無い時間を歩む">SNSを断ち自分にとって後悔の無い時間を歩む&lt;/h2>
&lt;p>これは自戒なのですが、何気なくボーッとしてSNSを見たりする時間が多く、学生の頃にあったひたむきに何かを学び積み重ねていくという習慣が消え去ってます。やばい。集中力も継続できないしで焦燥感だけが高まり行動ができていないという悪循環です。&lt;/p>
&lt;p>人生を楽しむためにも、貴重な時間を自分自身に自信を持って過ごせるように後悔のない時間を歩んでいきたい。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>これらの目標は toggl で追跡しておいて、毎月どれくらいの時間を費やせたかを振り替えれるようにする&lt;/li>
&lt;li>学び続けるということを習慣化したいので、学びの内容が可視化されるように、これからは学んだことを文章化して気軽にBlog記事としてアウトプットしていく&lt;/li>
&lt;/ul></description></item><item><title>GKE 上にて Pythonで logger.info() を行うとCloud logging では stderr に保存され、すべてエラーになる問題への対処法</title><link>https://shunyaueta.com/posts/2021-03-03/</link><pubDate>Wed, 03 Mar 2021 00:29:03 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-03-03/</guid><description>
&lt;p>Python のアプリケーションで、Cloud logger にログを出力したいときに&lt;/p>
&lt;ol>
&lt;li>標準の Python logging モジュールを利用して、ログを出力する&lt;/li>
&lt;li>Python Cloud Logging package を使用する&lt;/li>
&lt;/ol>
&lt;p>上記の２つの方法があります。&lt;/p>
&lt;p>不必要にパッケージを増やしたくはないので、1 の標準モジュールで Cloud Logger へ出力できないか試してみました。&lt;/p>
&lt;h2 id="標準の-python-logging-モジュールを試す">標準の Python logging モジュールを試す&lt;/h2>
&lt;p>標準の logging モジュールでログを出力したいときに&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hoge&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;logging Start 2021&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>と、logging.info() を仕込んで、Cloud logger にログを出力してみると、logger.info() で出しているはずなのに、Cloud logger 上ではすべてエラーとして扱われてしまっています。&lt;/p>
&lt;p>原因を特定するために、logger のログを見てみると logger.info() がすべて &lt;code>stderr&lt;/code>標準エラーストリームへ出力されてしまっています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;textPayload&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2021-02-20 21:26:51,012 - root:predict:36 - INFO: logging Start\n&amp;#34;&lt;/span>,
...
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;timestamp&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2021-02-20T12:26:51.013213826Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;severity&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;ERROR&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;labels&amp;#34;&lt;/span>: &lt;span class="o">{&lt;/span>
...
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;logName&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;projects/.../logs/stderr&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;receiveTimestamp&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2021-02-20T12:26:55.050911180Z&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>そのため、明示的に標準出力へ出力先を変更してみました。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">StreamHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">hoge&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;logging Start 2021&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これで解決できているはずと、Cloud Logger を見てみると&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2021-03-03/images/clooudlogging_stderr.png" alt="Cloud logging duplicate log in stderr and stdout">&lt;/p>
&lt;p>なぜか、&lt;code>stderr&lt;/code> への出力は残ったまま、&lt;code>stdout&lt;/code>への出力が新たに増えました。このままでも INFO レベルでログは残せているので目的は達成できていますが、&lt;code>stderr&lt;/code>への出力が残ってしまっているせいで Cloud logger 上でエラーが発生しているようになり問題です。なので、これを避けるために２つ目の方法である Python Cloud Logging package を利用してみます。 (というかパッケージをむやみに増やしたくないのだが利用せざるを得ない。)&lt;/p>
&lt;h2 id="python-cloud-logging-package-を使用する">Python Cloud Logging package を使用する&lt;/h2>
&lt;p>まず&lt;a href="https://github.com/googleapis/python-logging">Python Client for Cloud Logging&lt;/a> のチュートリアルをすすめて行きます。&lt;/p>
&lt;p>Cloud logging の Python package の&lt;a href="https://github.com/googleapis/python-logging#quick-start">Quick Start&lt;/a> にてわかりやすく導入方法が紹介されています。ここで混乱しやすいのが、GCP の&lt;a href="https://cloud.google.com/logging/docs/reference/libraries#cloud-console">Logging Client Libraries&lt;/a> のドキュメントではまず Service Account を作って、&lt;code>GOOGLE_APPLICATION_CREDENTIALS&lt;/code> を使用して Cloud Logging の認証を行ってくださいと書かれています。&lt;/p>
&lt;p>ですが、&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://googleapis.dev/python/google-api-core/latest/auth.html">GCP 上での VM でパッケージを使用するなら認証は必要ない&lt;/a> 。ただし、デフォルトの SA を使いたくない場合や、GCP 外などで動かしたい場合は SA が必要&lt;/li>
&lt;/ul>
&lt;p>と本元のパッケージのドキュメントでは書かれており、こちらのほうが誤解が少なくていいですね。(公式ドキュメントだと、SA 作成時に &lt;code>Project &amp;gt; Owner&lt;/code> を指定しろと書かれているんだけど、これって権限過多なのでは無いのだろうか??)&lt;/p>
&lt;p>ちなみに GCP 上の認証過程はこちらのドキュメントが詳しく書かれているので、気になった方は御覧ください。&lt;/p>
&lt;p>&lt;a href="https://cloud.google.com/docs/authentication/production">Authenticating as a service account&lt;/a>&lt;/p>
&lt;p>上記の認証仮定をまとめると&lt;/p>
&lt;ol>
&lt;li>GOOGLE_APPLICATION_CREDENTIALS を参照する&lt;/li>
&lt;li>ADC (Application Default Credentials) が、コードに紐付けられている SA を使用する&lt;/li>
&lt;li>ADC は各サービスの SA を利用する&lt;/li>
&lt;li>1-3 が使用できなかった場合、認証エラーが発生する&lt;/li>
&lt;/ol>
&lt;p>最終的に GKE 上で Cloud logging へログを出力するためには、
以下のコードで無事に &lt;code>INFO&lt;/code> のログが&lt;code>stderr&lt;/code> に吐き出されることなく、&lt;code>stdout&lt;/code> のみに&lt;code>INFO&lt;/code>として出力されるようになります。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="c1"># NOTE: GKE ではCotainerEngineHandler が必要&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">google.cloud.logging.handlers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ContainerEngineHandler&lt;/span>
&lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># NOTE: stream で stdout を指定する&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ContainerEngineHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># NOTE: ログが重複して出力されるので、propagate を切る&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">propagate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello Cloud Logging.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="appendix">Appendix&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/howto/logging.html">https://docs.python.org/3/howto/logging.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/logging/docs/setup/python">https://cloud.google.com/logging/docs/setup/python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ai-shift.co.jp/techblog/1217">https://www.ai-shift.co.jp/techblog/1217&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/48078051/duplicate-log-entries-with-google-cloud-stackdriver-logging-of-python-code-on-ku">https://stackoverflow.com/questions/48078051/duplicate-log-entries-with-google-cloud-stackdriver-logging-of-python-code-on-ku&lt;/a>
&lt;ul>
&lt;li>同じような質問があった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>GKE でローリングアップデート後、ローカルからポートフォワードでリクエストを投げるとcurl: (52) Empty reply from server と返ってくるときの対処方法</title><link>https://shunyaueta.com/posts/2021-02-21/</link><pubDate>Sun, 21 Feb 2021 23:46:30 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-02-21/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;p>ローカルから&lt;code>kubectl&lt;/code>でポートフォワードして、GKEにリクエストを投げて確認を行っている&lt;/p>
&lt;h2 id="発生した問題">発生した問題&lt;/h2>
&lt;p>deployment のローリングアップデート前は問題なくポートフォワードを通してリクエストが返っていた。コードに変更を加えてGKE上でも確認をしたかったので、まずローカルで確認をして問題がなかった変更が、ローリングアップデート後ポートフォワード でGKE にリクエストを投げると &lt;code>curl: (52) Empty reply from server&lt;/code> と返ってくる。&lt;/p>
&lt;h2 id="tl-dr">TL; DR;&lt;/h2>
&lt;ul>
&lt;li>ポートフォワードはrolling update が終わったら貼り直そう。なぜなら、ポートフォワードの接続先はローリングアップデート前後で変化するため。&lt;/li>
&lt;/ul>
&lt;h2 id="エラーメッセージ">エラーメッセージ&lt;/h2>
&lt;p>curl でリクエストした際のメッセージ&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">curl: &lt;span class="o">(&lt;/span>52&lt;span class="o">)&lt;/span> Empty reply from server
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Port foward の出力&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">uid : Error: No such container: xxxxx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>発生していた問題は、ローリングアップデートを行うと、ポートフォワードの接続先が変更され、その際にローリングアップデート前後でkubectl でのポートフォワードは固定されたままなのでリクエストはサーバーから返ってこないという説明するのも恥ずかしい問題でした。&lt;/p>
&lt;p>理由は単純だけど、気づくのに時間がかかってしまった。k8s の動きを理解していないからこういうので時間を溶かしてしまった。反省&lt;/p>
&lt;h2 id="appendix">Appendix&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-intro/">Performing a Rolling Update&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Standard SQLで 列と列の組み合わせの数を集計したい</title><link>https://shunyaueta.com/posts/2021-02-09/</link><pubDate>Tue, 09 Feb 2021 23:27:37 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-02-09/</guid><description>
&lt;p>group by は集計作業において根幹となる処理ですが、少し手の混んだ集計をしたいときに毎回調べていることが多かったのでここに学んだことをまとめておく&lt;/p>
&lt;p>今回やりたいことは&lt;/p>
&lt;p>A列がαになっている行のB列の種類を集計したい&lt;/p>
&lt;p>です。&lt;/p>
&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>実際のデータを用意したほうが、理解が深まるので擬似的なテーブルを作成する。
テーブルのデータの概略として、何日にsender (送信者) が receiver (受信者) にいくら送金(price)したかを格納しているテーブルとする。&lt;/p>
&lt;p>StandardSQLはWITHを使って簡単にモックテーブルを作れるのが良いところ。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="o">#&lt;/span>&lt;span class="n">standardSQL&lt;/span>
&lt;span class="k">WITH&lt;/span>
&lt;span class="o">`&lt;/span>&lt;span class="n">transactions&lt;/span>&lt;span class="o">`&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">sender&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">receiver&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">600&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="k">day&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">1200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">600&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">700&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">250&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-01&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-02&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-02&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">1200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-02&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-02&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">450&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-02&amp;#39;&lt;/span>
&lt;span class="k">UNION&lt;/span> &lt;span class="k">ALL&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s1">&amp;#39;2020-01-02&amp;#39;&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="o">*&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="n">transactions&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>sender&lt;/th>
&lt;th>receiver&lt;/th>
&lt;th>price&lt;/th>
&lt;th>day&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>600&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>1200&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>1800&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>C&lt;/td>
&lt;td>2000&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>D&lt;/td>
&lt;td>3000&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>D&lt;/td>
&lt;td>2000&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>C&lt;/td>
&lt;td>700&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>C&lt;/td>
&lt;td>300&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>D&lt;/td>
&lt;td>250&lt;/td>
&lt;td>2020-01-01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>400&lt;/td>
&lt;td>2020-01-02&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>1000&lt;/td>
&lt;td>2020-01-02&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>1200&lt;/td>
&lt;td>2020-01-02&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>2000&lt;/td>
&lt;td>2020-01-02&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>C&lt;/td>
&lt;td>450&lt;/td>
&lt;td>2020-01-02&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>C&lt;/td>
&lt;td>500&lt;/td>
&lt;td>2020-01-02&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="列と列の組み合わせの数を集計する">列と列の組み合わせの数を集計する&lt;/h2>
&lt;p>日次ごとに送金者が何人に送ったかを集計したい、つまり(sender, receiver)のペアを考えて、sender を固定した上で何人に送金したいかを集計したとする。
上記のデータだと&lt;/p>
&lt;p>2020-01-01 では {(A,B), (A,C), (A,D)} の三通りになる。&lt;/p>
&lt;p>愚直に思いつくのは&lt;/p>
&lt;h3 id="group-by-を２つの列で行うパターン">group by を２つの列で行うパターン&lt;/h3>
&lt;ul>
&lt;li>day&lt;/li>
&lt;li>sender&lt;/li>
&lt;/ul>
&lt;p>を&lt;code>group by&lt;/code> してCOUNT(distinct sender)で集計するアプローチがあるが、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>
&lt;span class="k">day&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">sender&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">distinct&lt;/span> &lt;span class="n">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">receiver_uu&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="n">transactions&lt;/span>
&lt;span class="k">GROUP&lt;/span> &lt;span class="k">BY&lt;/span>
&lt;span class="k">day&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">sender&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="結果">結果&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>day&lt;/th>
&lt;th>sender&lt;/th>
&lt;th>receiver_uu&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2020-01-01&lt;/td>
&lt;td>A&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-01&lt;/td>
&lt;td>B&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02&lt;/td>
&lt;td>A&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02&lt;/td>
&lt;td>B&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>day&lt;/code>, &lt;code>sender&lt;/code> の組み合わせとなっている。
このクエリを WITH でテーブルにして、Where でフィルターをかけると&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">receiver_uu&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="k">day&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">sender&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">DISTINCT&lt;/span> &lt;span class="n">receiver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">receiver_uu&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="n">transactions&lt;/span>
&lt;span class="k">GROUP&lt;/span> &lt;span class="k">BY&lt;/span>
&lt;span class="k">day&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">sender&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">SELECT&lt;/span>
&lt;span class="o">*&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="n">receiver_uu&lt;/span>
&lt;span class="k">WHERE&lt;/span>
&lt;span class="n">sender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>day&lt;/th>
&lt;th>sender&lt;/th>
&lt;th>receiver_uu&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2020-01-01&lt;/td>
&lt;td>A&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02&lt;/td>
&lt;td>A&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>の結果が得られる。&lt;/p>
&lt;p>だが、&lt;code>day&lt;/code>を基準に送信者、&lt;code>A&lt;/code>と&lt;code>B&lt;/code>の情報を1行にまとめたい場合はどうすべきだろうか?&lt;/p>
&lt;h3 id="1行に2列のパターン数をまとめて集計する">1行に2列のパターン数をまとめて集計する&lt;/h3>
&lt;p>&lt;code>A&lt;/code>と&lt;code>B&lt;/code>が送り先の数を調べたいなどの目的がある際には、COUNT()を行う際にIF文で条件を集計することで上記を達成することができる。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>
&lt;span class="k">day&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">DISTINCT&lt;/span>
&lt;span class="c1">-- 以下の結果の重複排除
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">IF&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">sender&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">-- sender がAだったときに
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">receiver&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">-- receiver を返す
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">-- それいがいはNULL
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">from_A_receiver_uu&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">DISTINCT&lt;/span>
&lt;span class="k">IF&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">sender&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">receiver&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">NULL&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="n">from_B_receiver_uu&lt;/span>
&lt;span class="k">FROM&lt;/span>
&lt;span class="n">transactions&lt;/span>
&lt;span class="k">GROUP&lt;/span> &lt;span class="k">BY&lt;/span>
&lt;span class="k">day&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>流れを説明すると&lt;/p>
&lt;ol>
&lt;li>day で日次を基準にした計算を行う&lt;/li>
&lt;li>IF(sender='A&amp;rsquo;, receiver, NULL) で、スキャン時に&lt;code>A&lt;/code>が送信した場合はその同行の&lt;code>reciver&lt;/code> を返し、&lt;code>A&lt;/code>でなかった場合はNULLを返す&lt;/li>
&lt;li>2の結果の重複を排除して、その行数をカウントする&lt;/li>
&lt;/ol>
&lt;p>上記の処理のイメージ (&lt;code>2020-01-01&lt;/code>の場合)&lt;/p>
&lt;ol>
&lt;li>COUNT(Distinct IF(sender='A&amp;rsquo;,receiver, NULL))&lt;/li>
&lt;li>COUNT(Distinct (B,B,B,C,D,D,NULL,NULL,NULL))&lt;/li>
&lt;li>COUNT((B,C,D))&lt;/li>
&lt;li>3&lt;/li>
&lt;/ol>
&lt;p>となり、&lt;code>A&lt;/code>が&lt;code>2020-01-01&lt;/code>に送信した人数は3人となる。&lt;/p>
&lt;h4 id="結果-1">結果&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>day&lt;/th>
&lt;th>from_A_receiver_uu&lt;/th>
&lt;th>from_B_receiver_uu&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2020-01-01&lt;/td>
&lt;td>3&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2020-01-02&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>今回は(A,B)の組み合わせでAを固定した際のパターン数を集計したが、Aの種類が大規模な場合はSELECT文をすべて書ききるの現実ではないが、A自体が有限で集計したい場合はよくある処理なのでメモとしてまとめた。
UUなどを計算したいときは必須の集計になると思います。&lt;/p>
&lt;h4 id="ref">Ref&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/52281618/syntax-to-count-the-number-of-unique-matching-values">Syntax to count the number of UNIQUE matching values&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://chartio.com/resources/tutorials/how-countdistinct-field-works-in-google-bigquery/">How COUNT(DISTINCT [field]) Works in Google BigQuery&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>pip 実行時に sys.stderr.write(f"ERROR: {exc} ") とエラーが出てpipを実行できないときの対処方法</title><link>https://shunyaueta.com/posts/2021-02-08/</link><pubDate>Mon, 08 Feb 2021 23:29:12 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-02-08/</guid><description>
&lt;p>新しいマシンで&lt;code>pip&lt;/code>をセットアップして実行しようとすると&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt;&amp;gt; pip
Traceback &lt;span class="o">(&lt;/span>most recent call last&lt;span class="o">)&lt;/span>:
File &lt;span class="s2">&amp;#34;/usr/local/bin/pip&amp;#34;&lt;/span>, line 11, in &amp;lt;module&amp;gt;
load_entry_point&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;pip==21.0&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;console_scripts&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;pip&amp;#39;&lt;/span>&lt;span class="o">)()&lt;/span>
File &lt;span class="s2">&amp;#34;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py&amp;#34;&lt;/span>, line 489, in load_entry_point
&lt;span class="k">return&lt;/span> get_distribution&lt;span class="o">(&lt;/span>dist&lt;span class="o">)&lt;/span>.load_entry_point&lt;span class="o">(&lt;/span>group, name&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py&amp;#34;&lt;/span>, line 2843, in load_entry_point
&lt;span class="k">return&lt;/span> ep.load&lt;span class="o">()&lt;/span>
File &lt;span class="s2">&amp;#34;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py&amp;#34;&lt;/span>, line 2434, in load
&lt;span class="k">return&lt;/span> self.resolve&lt;span class="o">()&lt;/span>
File &lt;span class="s2">&amp;#34;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py&amp;#34;&lt;/span>, line 2440, in resolve
&lt;span class="nv">module&lt;/span> &lt;span class="o">=&lt;/span> __import__&lt;span class="o">(&lt;/span>self.module_name, &lt;span class="nv">fromlist&lt;/span>&lt;span class="o">=[&lt;/span>&lt;span class="s1">&amp;#39;__name__&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>, &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;/Library/Python/2.7/site-packages/pip-21.0-py2.7.egg/pip/_internal/cli/main.py&amp;#34;&lt;/span>, line &lt;span class="m">60&lt;/span>
sys.stderr.write&lt;span class="o">(&lt;/span>f&lt;span class="s2">&amp;#34;ERROR: {exc}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>というエラーが出た。&lt;/p>
&lt;p>デフォルトの Python の実行ランタイムが 2.x 系なのでそれに起因するエラーだった。
pip を Python2 系でおそらくインストールしており、pip21 に更新後は Python3.6 からの機能である f-string が利用され始めたことが起因。&lt;/p>
&lt;h2 id="対処方法">対処方法&lt;/h2>
&lt;p>既存の pip を削除した上で、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python3 get-pip.py
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>で pip が実行できるようになりエラーが解消された&lt;/p>
&lt;h2 id="appendix">Appendix&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/65866417/pip-install-failing-on-python2">pip install failing on python2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[抄訳] Towards ML Engineering: A Brief History Of TensorFlow Extended (TFX)</title><link>https://shunyaueta.com/posts/2021-01-17/</link><pubDate>Sun, 17 Jan 2021 00:18:47 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-01-17/</guid><description>
&lt;p>この記事は&lt;a href="https://adventar.org/calendars/5089">MLOps Advent Calendar 2020&lt;/a>の 25 日目の記事です。(盛大に遅れました)&lt;/p>
&lt;p>KDD2019 の招待講演で Google が TFX の歴史について発表されており、TFX 信者の自分としては発表内容が以前から気になっていたが、公開はされておらずなんとかして見れないかな~と思っていましたが、&lt;a href="%5Bhttps://blog.tensorflow.org/2020/09/brief-history-of-tensorflow-extended-tfx.html%5D(https://blog.tensorflow.org/2020/09/brief-history-of-tensorflow-extended-tfx.html)">TensorFlow の Blog&lt;/a>で該当の招待講演が論文化されたことを知ったのでメモがてら抄訳として残しておく。&lt;/p>
&lt;ul>
&lt;li>&lt;em>注意)この翻訳記事は原著論文の著者陣からレビューはされていません&lt;/em>&lt;/li>
&lt;li>&lt;em>Shunya Ueta, are providing a translation and abridgment, which has not been reviewed by the authors.&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="citation">Citation&lt;/h2>
&lt;hr>
&lt;p>Karmarkar, A., Altay, A., Zaks, A., Polyzotis, N., Ramesh, A., Mathes, B., … &amp;amp; Li, Z. (2020). Towards ML Engineering: A Brief History Of TensorFlow Extended (TFX). arXiv preprint arXiv:2010.02013. ***&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.kdd.org/kdd2019/applied-data-science-invited-speakers/view/towards-ml-engineering-with-tensorflow-extended-tfx">Towards ML Engineering with TensorFlow Extended (TFX) at KDD2019&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dl.acm.org/doi/abs/10.1145/3292500.3340408">Towards ML Engineering with TensorFlow Extended (TFX) ACM&lt;/a>&lt;/li>
&lt;li>PDF は arxiv でも閲覧可能
&lt;ul>
&lt;li>&lt;a href="https://arxiv.org/abs/2010.02013">https://arxiv.org/abs/2010.02013&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="tfx-を知らない方向け">TFX を知らない方向け&lt;/h3>
&lt;p>&lt;a href="(https://www.tensorflow.org/tfx)">TFX&lt;/a>とは、Google が開発する TensorFlow Extended(TFX)の略称で、Google 社内で開発された TensorFlow を基にした機械学習基盤のプロジェクト。 TFX の各コンポーネントは OSS として公開されている。&lt;/p>
&lt;h2 id="抄訳">抄訳&lt;/h2>
&lt;h3 id="abstract">Abstract&lt;/h3>
&lt;p>ソフトウェアエンジニアリングは成熟しつつあるが、一方で機械学習エンジニアリングはまだ成熟しきっていない。この論文では Alphabet で成功しているエンドツーエンドの機械学習基盤である Sybil, TFX の紹介を行う。主に TFX が機械学習エンジニアリングの実現にどう役立つかについて紹介していく。そして我々は機械学習による恩恵を受けるために、まずは機械学習チームの成熟と強固なインフラストラクチャ、組織内での教育活動が同時に必要であることを主張する。また、先進的なモデル開発を行う前に、容易に相互運用可能な機械学習基盤導入を強くすすめる。&lt;/p>
&lt;h3 id="where-we-are-coming-from">Where We Are Coming From&lt;/h3>
&lt;h3 id="sibyl-2002-2020">Sibyl 2002-2020&lt;/h3>
&lt;p>2007 年から&lt;a href="https://www.datanami.com/2014/07/17/inside-sibyl-googles-massively-parallel-machine-learning-platform/">Sibyl&lt;/a> は運用開始されており、2020 年まで運用されていた。最近では開発は廃止され、TFX に移行中であり、主に非深層学習をサポートする機械学習基盤である。&lt;/p>
&lt;p>TFX と同等のミドルウェアである Data Ingestion, Data Analysis and Validation, Training (of course), Model Analysis, and Training-Serving Skew Detection を解決するコンポーネントが存在している。&lt;/p>
&lt;p>(といっても Sibyl は TFX の先祖みたいなものなので、TFX がこれらの機能を踏襲してると考えるのが正しそうですね)&lt;/p>
&lt;h3 id="tfx-2017---">TFX (2017 - ?)&lt;/h3>
&lt;p>2015 年からは深層学習の台頭により、TensorFlow がリリースされた。TensorFlow の課題点としてエンドツーエンドの機械学習基盤としては提供されてはいないことである。Sibyl は逆に深層学習用途に対する柔軟性が足りていないのが欠点であり、それらを補うために TFX の開発を開始したのは 2017 年のことだった。偶然にも TFX は Sibyl 誕生から約十年後に開発されことになった。&lt;/p>
&lt;p>TFX の運用開始から 3 年、Alphabet 内で TFX は企業レベルの機械学習基盤として数千のユーザーから使われており、数百の Alphabet (GCP 含む) の機械学習プロダクトを支えている。毎日数千の TFX のパイプラインが稼働し、エクサスケールのデータとともに数万ものモデルが生み出されており、TFX が提供する推論のリクエスト数は秒間数百万超えの規模になっている。TFX により Alphabet 内の研究成果がより早くプロダクションにリリースされ、機械学習基盤の開発よりもモデル開発に集中することが可能になった。&lt;/p>
&lt;p>TensorFlow が Alphabet 内部、そして外部でも人気と衝撃を与えたのと同じく、機械学習エンジニアから TFX にも人気と衝撃が走った。外部の機械学習エンジニアからの要望を叶えるために我々は TFX を徐々に OSS で公開していった。TFX, sibyl は Google 内部の強固なインフラストラクチャから構成されており、そのおかげで OSS での公開が加速した。例えば Sibyl は MapReduce と Flume を使ったデータ処理を行っており、TFX は同じくポータビリティ性の高い Apache beam をベースにしているので OSS での公開がスムーズに進んだ。&lt;/p>
&lt;p>TFX は最終的に 2019 年の頭に OSS として公開され、オンプレスミスや GCP の Cloud AI Platform Pipelines などで活用可能になった。パートナー企業も TFX を活用し始めており、実践的な機械学習の開発速度が改善されはじめている。&lt;/p>
&lt;p>参考文献: &lt;a href="https://engineering.atspotify.com/2019/12/13/the-winding-road-to-better-machine-learning-infrastructure-through-tensorflow-extended-and-kubeflow/">The Winding Road to Better Machine Learning Infrastructure Through Tensorflow Extended and Kubeflow&lt;/a>&lt;/p>
&lt;h3 id="lessons-from-our-10-year-journey-of-ml-platform-evolution">Lessons From Our 10+ Year Journey Of ML Platform Evolution&lt;/h3>
&lt;p>Google での機械学習基盤の進化の旅は長くそしてワクワクするものであり、ぜひとも我々が学んだことをここで共有したい。&lt;/p>
&lt;p>我々が学んだことは大きく 2 つに分類される。&lt;/p>
&lt;p>この長い旅で&lt;/p>
&lt;ol>
&lt;li>何が変わり&lt;/li>
&lt;li>何が変わらなかったのか&lt;/li>
&lt;/ol>
&lt;p>だ。Sibyl と TFX の開発を通じで学んだことを共有するが、Google 外部での機械学習基盤開発にも適用可能だと我々は信じている。&lt;/p>
&lt;h3 id="what-remains-the-same-and">What Remains The Same And&lt;/h3>
&lt;p>何が変わらず、そしてなぜそれが残ったのか この章では Sibyl, TFX の両者の長期間の運用期間にも耐えることができた機械学習とインフラストラクチャの観点についてまず説明を行う。&lt;/p>
&lt;h3 id="applied-ml">Applied ML&lt;/h3>
&lt;p>&lt;a href="https://developers.google.com/machine-learning/guides/rules-of-ml#ml_phase_i_your_first_pipeline">Rules of Machine Learning&lt;/a> という Google 内部での機械学習プロダクト開発で学んだ経験則を我々は公開している。&lt;/p>
&lt;p>&lt;em>Rules of Machine Learning の一例&lt;/em>&lt;/p>
&lt;ol>
&lt;li>シンプルなルールベースとヒューリスティックから開発をまずはじめ、そこからデータを生み出し学びを深めよう。基本的にはここでルールベースのサービングシステムを開発する。&lt;/li>
&lt;li>次に単純な機械学習モデルに移行することで、大きな利益を実現させます。ここでやっと機械学習パイプラインが導入される。&lt;/li>
&lt;li>特徴量を増やし機械学習モデルも先進的なものを適用してみる。&lt;/li>
&lt;li>SOTA を達成した機械学習モデルを適用してみまる(管理コストは増大しパイプラインも複雑になるが、それに見合った価値があることが前提である。)&lt;/li>
&lt;li>上記のサイクルを念頭に置いて機械学習プロダクトの開発に役立ててみよう。そして常に費用対効果(ROI)は忘れないようにするのが大事である。&lt;/li>
&lt;/ol>
&lt;p>我々は Rules of Machine Learning がたとえサービスドメインや稼働する基盤が異なったり、時間が経過したとしても揺るぎない価値があると信じている。特に機械学習エンジニアリングの観点において Rules of Machine Learning は我々とその読者の致命的な失敗を避ける助けになると信じており、TFX は上記の流れを極めて高速に試行するのに役立つ。&lt;/p>
&lt;h3 id="the-discipline-of-ml-engineering">The Discipline Of ML Engineering&lt;/h3>
&lt;p>Rules of Machine Learning の作成を通じ、我々はソフトウェアエンジニアリングを基にした複雑なコードとデータの処理が実行可能な頑強なシステムの理念を学んだ。ここで我々は機械学習エンジニアリングを以下のように定義する。&lt;/p>
&lt;ul>
&lt;li>機械学習エンジニアリングの定義: ソフトウェアエンジニアリングを包含する形での実践的な機械学習の複雑性を制御するための学問&lt;/li>
&lt;/ul>
&lt;p>実際、機械学習エンジニアリングのすべてをまとめようとするのは、なかなか難しいが&lt;/p>
&lt;ul>
&lt;li>我々の持っている限られた理解していることは、プラットフォームと時間を超えてうまく稼働している&lt;/li>
&lt;li>過去から学び、相似のものとしてみなすことは強力なアプローチであり、ソフトウェアエンジニアリングの様々な視点は、機械学習エンジニアリングにより機械学習プログラミングをどう進化させれるかが分かる&lt;/li>
&lt;/ul>
&lt;p>参考書籍: &lt;a href="">Software Engineering at Google: Lessons Learned from Programming over Time&lt;/a>&lt;/p>
&lt;p>TFX に関する基礎的な考えは、&lt;a href="https://research.google/pubs/pub46484/">TFX: A TensorFlow-Based Production-Scale Machine Learning Platform&lt;/a> にて公開されており、現在 &lt;a href="%5Bhttps://www.tensorflow.org/tfx/guide/mlmd%5D(https://www.tensorflow.org/tfx/guide/mlmd)">ML metadata&lt;/a> を軸にして OSS として公開されている。&lt;/p>
&lt;p>では、これから機械学習エンジニアリングの基礎的な要素について、ソフトウェアエンジニアリングとの相似を基に説明を行う。&lt;/p>
&lt;h4 id="data">Data&lt;/h4>
&lt;p>ソフトウェアの中心がコードであるように、データは機械学習の中心的な存在である。データマネジメントはプロダクション環境での機械学習適用において挑戦的な課題である。&lt;/p>
&lt;p>参考文献: &lt;a href="https://research.google/pubs/pub46178/">Data Management Challenges in Production Machine Learning&lt;/a>&lt;/p>
&lt;p>まずはデータに対するユニットテストを考える。ユニットテストはコードがどのように振る舞うべきかを検証する。同様に、データ形式への明示的な期待(スキーマ、不変量や分布)を設定し検証を行うことができる。&lt;/p>
&lt;p>参考文献: &lt;a href="https://research.google/pubs/pub47967/">Data Validation for Machine Learning&lt;/a>&lt;/p>
&lt;p>コードリポジトリとバージョンコントロールは、コード管理の軸となっている。。データ管理を行うことができるシステムはまた機械学習エンジニアリングでも同様に重要である。TFX の ExampleGen, StasticsGen, SchmaGen と Example Validator の各種コンポーネントにより継続的な機械学習パイプラインのデータ管理、分析、検証が可能になりデータをコードのように扱うために非常に役に立つ。&lt;/p>
&lt;p>参考文献: &lt;a href="%5Bhttps://research.google/pubs/pub48974/%5D(https://research.google/pubs/pub48974/)">TensorFlow DataValidation&lt;/a> , &lt;a href="https://www.tensorflow.org/tfx/guide/examplegen">The ExampleGen TFX Pipeline Component&lt;/a>&lt;/p>
&lt;h4 id="models-機械学習モデル">Models (機械学習モデル)&lt;/h4>
&lt;p>ソフトウェアエンジニアがコンパイルされたコードを作成するのと同じように、機械学習エンジニアは、データとコードを基に「コンパイル」された機械学習プログラムを作成する。コンパイルされたものが、一般的には機械学習モデルとして知られている。この 2 種類のプログラムの性質は大きく異なっている。ソフトウェアはプログラムを通して一貫性を保つが、機械学習モデルは一貫性を保つことが非常に難しい。またこの一貫性の検証は何かしらの要約された形式でしか検証できない。(例えばラベルデータの部分集合で十分な精度が出ているなどの形でしか機械学習モデルの一貫性の保証ができない)&lt;/p>
&lt;p>コードとデータは時間経過により変化し、モデルもそれに伴い変化する。しかし、モデルの変化はコードやデータの変化に比べて更に複雑になる。例えば、コードに対する高いテストカバレッジはコードの一部の正しさと変化に対する高い信頼性を得ることができるが、モデルに対するテストでは、分布外のデータや因果関係を理解できるデータを作成しテストすることはとても困難である。&lt;/p>
&lt;p>同じく結合テストでも同じ問題が発生し、end-to-end でのモデルの検証と理解が機械学習エンジニアリングの重要な構成要素である。&lt;/p>
&lt;p>参考文献: &lt;a href="%5Bhttps://research.google/pubs/pub47966/%5D(https://research.google/pubs/pub47966/)">Slice Finder: Automated Data Slicing for Model Validation&lt;/a>&lt;/p>
&lt;p>TFX の evaluator と InfraValidator コンポーネントはモデルの検証と理解についての機能を提供する。これらもまた機械学習エンジニアリングの大事な一要素である。&lt;/p>
&lt;p>&lt;a href="https://www.tensorflow.org/tfx/guide/evaluator">The Evaluator TFX Pipeline Component&lt;/a>&lt;/p>
&lt;h3 id="mergeable-fragments">Mergeable Fragments&lt;/h3>
&lt;p>ソフトウェアエンジニアがプログラムを既存のパッケージを合わせて作成するのと同じように、機械学習エンジニアはコード、データ、解析、モデルの断片を合わせて機械学習パイプラインを構築する。ソフトウェアエンジニアリングと機械学習エンジニアリングの決定的な違いは、コードは不変だが、データは常に揮発性を持ってり、変化する点である。(基本的にデータは常に新しくなり続ける)。例えば、入力データの一部分でも傾向が変化した場合には、それに対応して新しいモデルを作成する必要がある。&lt;/p>
&lt;p>このように作成される生成物は常に mergeable (併合可能) であることは、機械学習パイプラインにおいて重要である。例えば一つのデータセットの統計値の要約は、2 つのデータセットの和集合の統計値を簡単に要約できるように、もう一つのデータセットへ簡単に併合可能であるべきである。またモデルの観点から言えば、一つのモデルの学習を別のモデルへと簡単に転移学習できるようにしておくべきである。&lt;/p>
&lt;p>しかしこれは前章で述べたモデルのテストカバレッジと同じ課題を抱えている。新しくモデルにフラグメントをマージすると、分布外データや反実仮想の評価データの作成が必要になる可能性があり、それによってモデルの複雑性があがってしまう。&lt;/p>
&lt;p>TFX の Example Gen, Transform, Trainer, Tuner のコンポーネントは&lt;a href="https://www.tensorflow.org/hub/overview">TensorFlow Hub&lt;/a> で管理され、併合可能なパイプラインを作成することに役立ちます。&lt;/p>
&lt;h3 id="artifact-lineage-生成物の経路追跡">Artifact Lineage (生成物の経路追跡)&lt;/h3>
&lt;p>ソフトウェアエンジニアリングは方法論やツールなどが高度に発展しているが、それでも常にデバッグが必要である。それは機械学習プログラムも同様の課題があるが、ソフトウェアエンジニアリングと比べると一段と難易度が増す。なぜなら、機械学習プログラムではプログラムに付随する生成物が難易度への影響を与えている。モデルのデバッグを行う際にコードの欠陥、学習アルゴリズム、学習データ、サービングパス、サービングされるデータなどいくつものエラー原因があり、それらが原因で精度の低下につながる。ソフトウェア開発において、根本原因を探すためにスタックトレースが重要なように、機械学習パイプラインではすべての生成物の生産と消費の追跡が機械学習モデルの精度劣化の根本原因の解明に役立つ。&lt;/p>
&lt;p>TFX では&lt;a href="https://www.tensorflow.org/tfx/guide/mlmd">ML Metadata (MLMD)&lt;/a> を使用して、生成物を管理している。MLMD は、生成物のメタデータ管理と追跡を可能にし、機械学習パイプライン外に高い信頼性を持って生成物の管理が可能になる。&lt;/p>
&lt;h3 id="continuous-learning-and-unlerning">Continuous Learning And Unlerning&lt;/h3>
&lt;p>プロダクション環境下での機械学習パイプラインは、動的な環境下で以下の特徴がある。&lt;/p>
&lt;ul>
&lt;li>定期的に新しいデータが到来する&lt;/li>
&lt;li>モデルのコードは、初期段階では頻繁に変化する&lt;/li>
&lt;li>インフラ面も変化する&lt;/li>
&lt;/ul>
&lt;p>もし上記の変化が発生した場合、パイプラインはそれらに対して追従する必要があり、変更後の環境でパイプラインを新たに実行する必要がある。パイプライン実行の監視は、デバッグと原因究明の解析にとても有用である。例えば単純な例では、モデルの失敗原因をデバッグするためには、どのデータが学習済のモデルに使われたかだけではなく、モデルコードとパッケージのバージョンの把握が必要不可欠である。&lt;/p>
&lt;p>機械学習パイプラインはそれらの変化に対して対応できる仕組みが必要である。例えば新しいデータが到来した際には、モデルの再学習が必須である。これらは推薦システムや広告関係などのように迅速に変化する環境においてごく自然に要求される。もしデータが頻繁かつ定期的に変化する環境だった場合、エンジニアが手作業でモデルの再学習を実行することが要求されているならそれは非現実的である。その代わりに TFX はパイプラインが新規のデータを検知して、モデルの再学習を行うことで継続的学習を実現し、手作業を自動化することができる。その自動化を実現するためには高度なオーケストレーションが必要である。また機械学習パイプラインは、何年間もコードとデータを取り込み、継続的に意思決定に役立つ予測を行うモデルを作成するのが一般的である。&lt;/p>
&lt;p>参考文献: &lt;a href="https://research.google/pubs/pub47978/">Continuous Training for Production ML in the TensorFlow Extended (TFX) Platform&lt;/a>&lt;/p>
&lt;p>次に機械学習パイプラインのために必要とされる仕組みの例では、backfilling 機能がある。例えば、モデルのパッケージやコードは更新済のものを既存のデータに適用するケースなど、エンジニアはコンポーネントが更新された状態でパイプラインを実行する必要があるかもしれない。次の backfilling が必要となる状況例として、データ関連の問題を解決するために、既存のデータの新しいバージョンに対してパイプラインを実行することが考えられる。これらの backfill は継続的学習のために直交である必要がある。実例では、エンジニアは手作業で学習ジョブを実行可能であり、モデルが生成後、そのモデルは自動的にモデルの評価と検証が実行が可能である。&lt;/p>
&lt;p>&lt;a href="https://www.tensorflow.org/tfx/guide">The TFX User Guide&lt;/a> ではまだ継続的機械学習パイプラインを公開できていないが、この公開に向けて我々は動き続けている。 参考: &lt;a href="https://github.com/tensorflow/community/pull/253">RFC: TFX Advanced DSL semantics #253&lt;/a>&lt;/p>
&lt;h3 id="infrastructure">Infrastructure&lt;/h3>
&lt;h3 id="building-on-the-shoulders-of-giants">Building On The Shoulders Of Giants&lt;/h3>
&lt;p>野心的な目標実現のために、強固な基盤を作る必要がある。TFX は Sibyl のシステムデザインの多くを再利用を行った。&lt;/p>
&lt;ul>
&lt;li>Sibyl のアルゴリズムとワークフローは MapReduce を基に実現されていたが、TFX は TensorFlow, &lt;a href="https://beam.apache.org/">Apache Beam&lt;/a>を使って、分散学習とデータ処理のワークフローを実現した&lt;/li>
&lt;li>Sybyl はカラムベースのデータ管理を行っていたが、&lt;a href="https://arrow.apache.org/">Apache arrow&lt;/a> によりインメモリでのカラムベースのデータ管理に適合した。&lt;/li>
&lt;/ul>
&lt;p>また、頑強な標準化が進んでいる箇所では、依存性をあえてもたせることにより TFX とその使用者にパフォーマンスとスケーラビリティを提供することに成功した。例えば、TFX の依存先でもある&lt;a href="https://www.kubeflow.org/docs/pipelines/overview/pipelines-overview/">Kubeflow Pipelines&lt;/a> や &lt;a href="https://airflow.apache.org/">Apache Airflow&lt;/a> はそれらを使用する利益が依存先の管理に勝ると判断されたので選択されました。&lt;/p>
&lt;h3 id="interoperability-and-positive-externalities">Interoperability And Positive Externalities&lt;/h3>
&lt;p>機械学習基盤は孤立した環境で運用されるのではなく、既存のデータ基盤からの ETL やシステムへのモデルのデプロイなどの相互運用を意識する必要がある。&lt;/p>
&lt;ul>
&lt;li>Google Ads で Sibyl が相互運用されていたのと同じく、TFX では複数のサービスからのデータの ETL、サービングが複数の開発環境やデバイスに提供している&lt;/li>
&lt;li>Sibyl で Google 社内技術で相互運用されていたのと同様に、TFX は &lt;a href="https://beam.apache.org/">Apache Beam&lt;/a>は &lt;a href="https://flink.apache.org/">Apache Flink&lt;/a> や &lt;a href="https://spark.apache.org/">Apache Spark&lt;/a> のクラスターや&lt;a href="https://cloud.google.com/dataflow/">Google Cloud Dataflow&lt;/a> などのサーバーレスデータ処理を実行するために活用されている&lt;/li>
&lt;li>TFX はオーケストレーション機能の抽象化を MLMD を用いて実現し Apache Airflow, Apache Beam, Kubeflow Pipelines も選択肢の一つとして採用できるようにしている&lt;/li>
&lt;/ul>
&lt;p>上記で説明したように、運用が簡単になるような技術群を採用しており既存のデータ基盤との接続や、サービングなどが Alphabet 外でも容易に構築可能になっている。&lt;/p>
&lt;p>また複数の技術の組み合わせは指数関数的に開発環境の設定が増加するため、マネージドサービスである &lt;a href="https://cloud.google.com/blog/products/ai-machine-learning/introducing-cloud-ai-platform-pipelines">Could AI Platform Pipelines&lt;/a> も提供を開始した。&lt;/p>
&lt;h2 id="what-is-different-and-why">What Is Different And Why&lt;/h2>
&lt;p>ここでは、TFX を現実的な問題に適応するために変化させた部分を説明する。&lt;/p>
&lt;h3 id="environment-and-device-portability">Environment And Device Portability&lt;/h3>
&lt;p>Sibyl は Google での大規模クラスタである &lt;a href="https://research.google/pubs/pub43438/">Borg&lt;/a> へのデプロイを前提にデザインされていた。当初、Google での機械学習適用についてこれで問題なかったが、世界的に機械学習技術の発展に伴い、Google 外部かつ大規模だけではない小規模な環境へのデプロイの必要性も高まった。その結果、ポータビリティが重視された機械学習基盤が必要になってきた(が厳密な一貫性を保つことももちろん要求される)。&lt;/p>
&lt;ul>
&lt;li>Sibyl が Google のデータセンターでのみ動くが、TFX はラップトップ、ワークステーション、外部のデータセンター、クラウド上で実行することができる。特に&lt;a href="https://cloud.google.com/">Google Cloud&lt;/a> では最適化と自動化された TFX が提供される&lt;/li>
&lt;li>Sibyl は CPU でのみ動くが、TFX は異なるハードウェア(CPU, GPU, &lt;a href="https://cloud.google.com/tpu">TPU&lt;/a> )で動く&lt;/li>
&lt;li>Sibyl で作成されたモデルはサーバー上での実行のみ可能だが、TFX はラップトップ、サーバー、&lt;a href="https://www.tensorflow.org/tfx/guide/serving">TensorFlow Serving&lt;/a>, Apache Beam、モバイルや IOT では &lt;a href="https://www.tensorflow.org/lite/guide">TensorFlow Lite,&lt;/a> ブラウザ上では &lt;a href="https://www.tensorflow.org/js/tutorials">TensorFlow JS&lt;/a>によって実行可能である&lt;/li>
&lt;/ul>
&lt;p>小規模から大規模な問題を解くために、TFX のポータビリティ性は洗練され多種多様な環境、デバイスでの実行を可能にしている。&lt;/p>
&lt;p>だがポータビリティはコストも高くなってしまう。メンテンスを行う際に、環境固有もしくはデバイス固有の特殊な要求を満たす必要があり、環境やデバイスの数が増えるとそれらは超線形にコストが増加する。が、一般の使用者はそれらのメンテンスコストは意識せず TFX を使用することが可能です。&lt;/p>
&lt;h3 id="modularity-and-layering">Modularity And Layering&lt;/h3>
&lt;p>Sibyl は既存のプロダクトと密結合され、モノリシックに構成されており、既存の仕様に把握して、それに合わせる必要があった。対象的に TFX はモジュラー化とレイヤー化が意識されたアーキテクチャ設計になっており、チーム間で連携しつつ開発を行えるようになっている。&lt;/p>
&lt;p>TFX のレイヤーデザイン&lt;/p>
&lt;ul>
&lt;li>ML Service
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/automl">Cloud AutoML&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/recommendations">Cloud Recommendations AI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/blog/products/ai-machine-learning/introducing-cloud-ai-platform-pipelines">Cloud AI Platform&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/dataflow">Cloud Dataflow&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/bigquery">Cloud BigQuery&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pipelines
&lt;ul>
&lt;li>&lt;a href="https://www.tensorflow.org/tfx">TensorFlow Extended&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Binaries
&lt;ul>
&lt;li>&lt;a href="https://research.google/pubs/pub46801/">TensorFlow Serving&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Libraries
&lt;ul>
&lt;li>&lt;a href="https://github.com/tensorflow/data-validation">TensorFlow DataValidation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tensorflow/transform">TensorFlow Transform&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tensorflow/hub">TensorFlow Hub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tensorflow/model-analysis">TensorFlow Model Analysis&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tensorflow/tfx-bsl">TFX Basic Shared Libraries&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/google/ml-metadata">ML Metadata&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>TFX のレイヤーアーキテクチャは、使用者の必要性に合わせて、開発者にはライブラリから、パイプライン、エンドユーザー向けには ML Service などを提供可能にしている。&lt;/p>
&lt;h3 id="multi-faceted-flexibility">Multi-faceted Flexibility&lt;/h3>
&lt;p>Sibyl は開発当初は他の利用可能なツールに比べると、柔軟性があったが機械学習ワークフローの高速化の需要に答えることができなかったことも TFX の開発に繋がった。&lt;/p>
&lt;ul>
&lt;li>Sibyl は特定のデータ解析しか提供していなかったが、TFX は TensorFlow DataValidation により柔軟なデータ分析が可能になっている&lt;/li>
&lt;li>Sibyl は特定の mappers しか提供していなかったが、TFX は TensorFlow Transform により、カスタマイズ可能な柔軟性に長けた mappers, analyzers が使用可能になっている&lt;/li>
&lt;li>Sibyl は非深層学習のみサポートしていたが、TFX は Trainer Component により TensorFlow ベースのモデルを提供可能になっており、TensorFlow Hub などで転移学習なども容易に行えるようになっている&lt;/li>
&lt;li>Sibyl は非深層学習モデルに対する自動的な特徴量の組み合わせ(feature conjunction) のみ提供していたが、TFX では Tuner component により state of the art ベースのハイパーパラメータチューニングが利用可能になっている&lt;/li>
&lt;li>Sibyl は特定のモデルの解析手法しか提供していなかったが、TFX は TensorFlow Model Analysis により、Evaluator Component をベースにビルトインのメトリクスなど多様なモデル解析手法を提供している&lt;/li>
&lt;li>Sibyl は 固定されたパイプラインしか扱えなかったが、TFX はカスタムコンポーネントが使用可能であり、柔軟にパイプラインを設計可能である&lt;/li>
&lt;/ul>
&lt;h2 id="where-we-are-going">Where We Are Going&lt;/h2>
&lt;p>2020 年において、TFX の開発は&lt;a href="https://github.com/tensorflow/tfx/blob/master/ROADMAP.md">roadmap&lt;/a>、 &lt;a href="https://github.com/tensorflow/tfx/blob/master/RFCs.md">RFC&lt;/a>、 &lt;a href="https://github.com/tensorflow/tfx/blob/master/CONTRIBUTING.md">Contribution guideline&lt;/a> を基に進めています。我々は応用機械学習の普及のために、機械学習エンジニアリングのさらなる発展に尽力し、&lt;a href="https://www.tensorflow.org/responsible_ai">responsible AI&lt;/a> (TensorFlow を用いた高い信頼性を持つ機械学習開発のための方法論)を&lt;a href="https://ai.google/principles/">Google の AI 原則論&lt;/a> に基づき実世界へ適用していく。&lt;/p>
&lt;h3 id="drive-interoperability-and-standards">Drive Interoperability And Standards&lt;/h3>
&lt;p>相互運用性を高め、我々は原則論である、社会に利益をもたらすことを意識していく。我々のミッションとして、我々は OSS による先進的な機械学習システム構築をサポートし、機械学習による生成物の標準化も行っていく。例えば具体例として上げると&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/tensorflow/community/blob/master/rfcs/20191017-tfx-standardized-inputs.md">TFX standardized input&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tensorflow/community/blob/102bc5f3beb6ff756d147e7cbf88ffb5422a9f5c/rfcs/20200601-tfx-udsl-semantics.md">TFX DSL semantics&lt;/a>, &lt;a href="https://github.com/tensorflow/community/pull/271">Data model and IR&lt;/a>&lt;/li>
&lt;li>標準化された機械学習生成物とメタデータ&lt;/li>
&lt;li>多様な実行環境での分散実行環境の標準化&lt;/li>
&lt;li>分散かつストリーミングでのモデルの推論&lt;/li>
&lt;li>モバイルやエッジでの相互運用を意識した改善&lt;/li>
&lt;li>相互運用を意識した機械学習フレームワークの改善&lt;/li>
&lt;/ul>
&lt;h3 id="increase-automation">Increase Automation&lt;/h3>
&lt;p>自動化こそ、高信頼性のプロダクションシステムの柱となる考えであり、TFX は自動化にとてつもなく投資を行っている。我々の原則論である”安全のためのビルドとテスト”、””&lt;/p>
&lt;p>TFX pipeline では開発が進むことで、 &lt;a href="https://github.com/tensorflow/community/blob/master/rfcs/20200420-tfx-tuner-component.md">TFX Tuner&lt;/a> によるモデルの自動改善や、教師あり学習のモデルの多次元でのスライスでの挙動の自動検知、&lt;a href="https://modelcards.withgoogle.com/about">Model Cards&lt;/a> の自動生成もサポート、training-serving skew の自動検知も開始された。GCP での TFX は先進的な機能が提供されていく。&lt;/p>
&lt;h3 id="improve-ml-understanding">Improve ML Understanding&lt;/h3>
&lt;p>機械学習を理解することは、プロダクション環境下に機械学習を適用する際に重要な側面の一つである。機械学習を理解するためにはモデル作成に付随する生成物の追跡( lineage) は最も重要事項の一つである。&lt;a href="https://github.com/google/struct2tensor">struct2tensor&lt;/a> (TensorFlow 内部の構造化データのパーシングライブラリ)は構造化データにおいて、学習やサービング、解析においてより役立つ TFX の技術の一つである。&lt;/p>
&lt;h3 id="uphold-high-standards-and-best-practices">Uphold High Standards And Best Practices&lt;/h3>
&lt;p>高水準の標準化とベストプラクティスの共有のために、TFX チームはこれからも科学的論文の執筆・公開を継続していくことで Alphabet 外にもこのベストプラクティスが普及することを狙っていく。AutoML pipelines のベンチマークツールとして&lt;a href="https://www.youtube.com/watch?v=SagSL38Kx0Q">NitroML&lt;/a>も再現性の鍵の一つとなる。&lt;/p>
&lt;h3 id="improve-tooling">Improve Tooling&lt;/h3>
&lt;p>TFX は機械学習エンジニアリングと機械学習ライフサイクルのいくつもの段階のためのツールを提供しており、いまだこの領域は黎明期であることを願っている。&lt;/p>
&lt;p>大規模かつ重要度が高いストリーミングかつレイテンシーが要求されるデータは挑戦的な課題である。TFX では Apache Beam と Cloud Dataflow の実行によりストリーミングイベントにも対応した予測を実行可能になっている。我々はこの枠組みを TensorFlow Serving でも同等のことが行えないか計画している。&lt;/p>
&lt;p>更に、たくさんのツールが機械学習ワークフローでもまだ自動化が必要とされているものが多い。例えば、機械学習パイプライン実行時に、そのジョブの結果が現行のモデルよりもパフォーマンスが低いことを積極的に予測しジョブの実行を停止することで、大幅なリソースと実行時間の削減が期待できる。&lt;/p>
&lt;h2 id="a-joint-journey">A Joint Journey&lt;/h2>
&lt;p>TFX の構築は、機械学習エンジニアリングの基礎の探索でもあり、多くの人々の長年の努力の累積である。&lt;/p>
&lt;p>さあ、我々もあなたを&amp;quot;機械学習エンジニアリングに向けた&amp;rdquo; 旅に招待します。&lt;/p></description></item><item><title>PythonでApache beam 入門</title><link>https://shunyaueta.com/posts/2020-12-26/</link><pubDate>Sat, 26 Dec 2020 00:41:30 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-12-26/</guid><description>
&lt;p>TensorFlowの勉強をしていたら、Apache beam を前処理に採用していたケースがあり、興味を持ったので深堀りしてみます。&lt;/p>
&lt;p>興味が湧いたモチベーションとしては、&lt;/p>
&lt;ul>
&lt;li>データ量が増加しても前処理部分を難なくスケールできそう(前処理部分をスケールさせて高速に実験を回したい、並列化などはすべて良い感じにbeamに任せれそう&lt;/li>
&lt;li>バッチとストリーミングの両者に対応可能なので、柔軟な機械学習の推論サービスが提供できるのでは? (GCPの参考資料 &lt;a href="https://cloud.google.com/solutions/machine-learning/data-preprocessing-for-ml-with-tf-transform-pt1">Data preprocessing for machine learning: options and recommendations&lt;/a>)&lt;/li>
&lt;li>Apache beam を触りつつ分散データ処理を学びたい&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/jhuangtw/xg2xg#services">https://github.com/jhuangtw/xg2xg#services&lt;/a>&lt;/p>
&lt;p>を見てみるとGoogle 内部のFlume という並列データパイプライン技術がApache beam として公開されているみたいです。&lt;/p>
&lt;hr>
&lt;p>Apache beam について端的に説明すると&lt;/p>
&lt;p>Apache beam は3つの考えを基礎にしています。&lt;/p>
&lt;ul>
&lt;li>Unified
&lt;ul>
&lt;li>ストリーミング、バッチの両者のケースに一つのプログラミングモデルで対応可能な統一性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Portable
&lt;ul>
&lt;li>実行パイプラインが複数の実行環境で実行可能な可搬性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Extensible
&lt;ul>
&lt;li>新しいSDK、IO Connectorsや変換ライブラリなどをを書いて共有することができる拡張性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Java, Python, Go やScalaを使ってBeam Model を作成して任意のruntime で実行する流れです。&lt;/p>
&lt;p>自分はPythonが一眼手軽に書けるのでこの記事ではPythonで紹介していきます。&lt;/p>
&lt;p>Version 2.14.0 からPython 3がサポートされたのは非常にありがたいですね。それまではPython 2のみをサポートしており、その影響で技術選定時に採用しづらかったのでは無いのでしょうか?&lt;/p>
&lt;p>Spotify が作成しているApach BeamとDataflowのScala APIであるscioが開発されており、そちらも気になっています。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spotify/scio">https://github.com/spotify/scio&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://engineering.atspotify.com/2017/10/16/big-data-processing-at-spotify-the-road-to-scio-part-1/">https://engineering.atspotify.com/2017/10/16/big-data-processing-at-spotify-the-road-to-scio-part-1/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>では、まずは実際に動かしながら学んでみようということで&lt;/p>
&lt;p>&lt;a href="https://beam.apache.org/get-started/try-apache-beam/">https://beam.apache.org/get-started/try-apache-beam/&lt;/a>&lt;/p>
&lt;p>を参考にApache Beam をPython SDKで試してみます&lt;/p>
&lt;p>COLABで実行を試せるので便利ですね&lt;/p>
&lt;p>ですが、Python2で実行されるように設定されているのでPython3で実行してみました。&lt;/p>
&lt;p>実行したcolab のコードを見ていきます。&lt;/p>
&lt;h3 id="環境準備">環境準備&lt;/h3>
&lt;p>&lt;code>apache-beam&lt;/code> のinstallとGCSからApache beamで処理を行うテキストファイルをダウンロードします。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="c1"># shell コマンドを実行して表示する関数&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt;&amp;gt; {}&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="err">!&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Install apache-beam.&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;pip install --quiet apache-beam&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 対象ファイルの格納ディレクトリを作成後、gsutil を使って /data ディレクトリに格納&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mkdir -p data&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gsutil cp gs://dataflow-samples/shakespeare/kinglear.txt data/&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="文字のカウント">文字のカウント&lt;/h2>
&lt;p>Hello World として単語のカウントを行うデータ処理をbeam で記述してみます。&lt;/p>
&lt;p>テキストファイルを読み込んで、各単語の頻度のカウンティングを行う単純なデータパイプラインを作成しています。&lt;/p>
&lt;p>パイプラインの結果はファイルシステム上で保存されるので分散環境下での大規模処理でも取り扱いに役立ちます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">apache_beam&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">beam&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;span class="n">inputs_pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;data/*&amp;#39;&lt;/span>
&lt;span class="n">outputs_prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;outputs/part&amp;#39;&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Pipeline&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pipeline&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="n">pipeline&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Read lines&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ReadFromText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputs_pattern&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Find words&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FlatMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;[a-zA-Z&amp;#39;]+&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Pair words with 1&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Group and sum&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CombinePerKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Format results&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">word_count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word_count&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Write results&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">WriteToText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputs_prefix&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>はい、いきなり&lt;/p>
&lt;p>with beam.Pipeline() as pipeline:
の以降から意味がわからなくなりました。&lt;/p>
&lt;p>Apache beam特有の概念を理解する必要があるので&lt;/p>
&lt;p>&lt;a href="https://beam.apache.org/documentation/programming-guide/">https://beam.apache.org/documentation/programming-guide/&lt;/a>&lt;/p>
&lt;p>を参考に解説してみます。&lt;/p>
&lt;h2 id="apache-beam-programming-guide">Apache Beam Programming Guide&lt;/h2>
&lt;p>Beasm SDKで提供されるクラス郡をここでは紹介していきます。このクラス郡を使うことでデータパイプラインを作成することができます。&lt;/p>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;p>まずBeamを使用するためには、まず最初にBeam SDKのクラスを使って起動プログラムを作成する必要があります。driver program は、あなたのパイプライン(入力、変形と出力のすべて)と実行環境を定義する必要があります。&lt;/p>
&lt;p>Beam SDKは大規模なデータ処理のメカニズムを単純な形で抽象化している&lt;/p>
&lt;ul>
&lt;li>Pipeline
&lt;ul>
&lt;li>Pipeline はデータ処理タスクの実行開始から終了までをカブセル化するクラスです。これは入力データの読み込みやデータの変形、出力データの書き込みを含む。Beam driver programs は必ずPipelineを作成します。またPipelines 作成時には、実行オプション(どの実行環境下でどのように実行するか)を必ず明記する必要があ。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>PCollection
&lt;ul>
&lt;li>Pcollection は分散データセットを表現するクラスです。ここでのデータセットは bounded (ファイルなどの固定されたソース、つまりバッチ)とunbounded (subscriptionなど連続的にアップロードされるソース、つまりストリーム)の両者を指しています。実行するパイプラインは外部データの読み込みによって初期化されたPCollectionによって構築されます。また外部データだけでなく、インメモリのデータからPCollectionを作ることも可能です。つまり、PCollectionはPipelineの出力と入力を担当する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>PTransform
&lt;ul>
&lt;li>PTransform パイプラインでのはデータ処理命令を表現するクラスです。すべての &lt;code>PTransform&lt;/code> は一つ以上のPCollection オブジェクトを入力として受け取り、ゼロもしくはそれ以上の数のPCollectionを出力として作成する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IOS transrforms
&lt;ul>
&lt;li>Beamはいくらかの入力と出力のインタフェースがあり、PTransformが読み込み、もしくは書き込みを多種多様な外部のストレージシステムに対して行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>基本的なBeamの起動プログラムは以下の手順で動く&lt;/p>
&lt;ol>
&lt;li>Pipeline オブジェクトを作成し、パイプラインの実行オプションとパイプラインランナーを設定する&lt;/li>
&lt;li>Pipeline データのために初期のPCollection を行う。そのためにIOs を用いて外部のストレージシステムもしくはインメモリデータから PCollectionを作成する。&lt;/li>
&lt;li>PTransform を各 PCollection へ適用する。Transform は新しい出力としてPCollection を作成する。PCollection を変数、PTransformは関数として考えると、Pipelineは変数と関数からなる複雑な処理グラフとして捉えることができる。&lt;/li>
&lt;li>IOs を使用し、最終的に PCollection を外部ソースに書き出す&lt;/li>
&lt;li>パイプラインをパイプラインランナーで実行する&lt;/li>
&lt;/ol>
&lt;p>あなたが Beam の起動プログラムを実行した時、パイプラインランナーはPCollection を基に作成した transformが適用される workflow graph が構築される。このグラフは適切な分散処理バックエンドで、非同期ジョブとして実行される。&lt;/p>
&lt;p>ここまでで Beam の基礎的な概念を理解できたと思うので最初のサンプルコードでの各行の実行内容について解説します&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">apache_beam&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">beam&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;span class="n">inputs_pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;data/*&amp;#39;&lt;/span>
&lt;span class="n">outputs_prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;outputs/part&amp;#39;&lt;/span>
&lt;span class="c1"># ローカル環境でDirectRunnerを実行&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Pipeline&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pipeline&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="c1"># 文字の集計データをPCollection に格納&lt;/span>
&lt;span class="c1"># 各要素は (word, count) のタプルであり、(str, int)の型となっている&lt;/span>
&lt;span class="n">word_counts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="c1"># 入力のPCollection は空のパイプラインとする&lt;/span>
&lt;span class="n">pipeline&lt;/span>
&lt;span class="c1"># テキストファイルから行を読み込む&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Read lines&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ReadFromText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputs_pattern&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Element type: str - text line&lt;/span>
&lt;span class="c1"># 正規表現を利用して行内のすべての単語に反復処理を行う&lt;/span>
&lt;span class="c1"># FlatMap will yield an element for every element in an iterable.&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Find words&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FlatMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s2">&amp;#34;[a-zA-Z&amp;#39;]+&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># Element type: str - word&lt;/span>
&lt;span class="c1"># 単語が存在した場合、value が１となるkey-value のペアを作成&lt;/span>
&lt;span class="c1"># すべての単語を集計していき、同一単語をグループ化する&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Pair words with 1&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># Element type: (str, int) - key: word, value: 1&lt;/span>
&lt;span class="c1"># sum() 関数を使ってkeyごとにグループを行う&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Group and sum&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CombinePerKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Element type: (str, int) - key: word, value: counts&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="c1"># 入力となるPCollection は上記で作成された&lt;/span>
&lt;span class="n">word_counts&lt;/span>
&lt;span class="c1"># 結果は文字列に処理することで、テキストファイルとして書き込み可能にする&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Format results&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">word_count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">word_count&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1"># Element type: str - text line&lt;/span>
&lt;span class="c1"># 最後に結果をファイルに書き込みます。&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;Write results&amp;#39;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">WriteToText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputs_prefix&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="c1">#20個の結果を各ファイルから出力してみる。その際に順序は保証されない&lt;/span>
&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;head -n 20 {}-00000-of-*&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputs_prefix&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>実行結果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">WARNING&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">apache_beam&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">runners&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">interactive_environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Dependencies&lt;/span> &lt;span class="n">required&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">Interactive&lt;/span> &lt;span class="n">Beam&lt;/span> &lt;span class="n">PCollection&lt;/span> &lt;span class="n">visualization&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">available&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">please&lt;/span> &lt;span class="n">use&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="sb">`pip install apache-beam[interactive]`&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">necessary&lt;/span> &lt;span class="n">dependencies&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">enable&lt;/span> &lt;span class="nb">all&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="n">visualization&lt;/span> &lt;span class="n">features&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">head&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="mi">20&lt;/span> &lt;span class="n">outputs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">part&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mo">00000&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="o">-*&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;KING&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">243&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;LEAR&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">236&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DRAMATIS&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;PERSONAE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;king&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;of&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">447&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Britain&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;OF&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;FRANCE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DUKE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;BURGUNDY&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;CORNWALL&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">63&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ALBANY&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">67&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;EARL&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;KENT&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">156&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;GLOUCESTER&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">141&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;EDGAR&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">126&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;son&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">29&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;to&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">438&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Gloucester&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>どうでしたか?
まだサンプルコードを動かしただけなので使いこなす自信はありませんが、Apache beam がどのような考えで設計され動かすことができるかが少しはつかめたのでは無いのでしょうか?&lt;/p>
&lt;p>次回は典型的なデータ処理をApache beamで動かしてみたいと思います。&lt;/p></description></item><item><title>機械学習・ソフトウェアエンジニアリングをテーマにしたPodcast just4fun.fm を始めてみた</title><link>https://shunyaueta.com/posts/2020-09-27/</link><pubDate>Sun, 27 Sep 2020 21:57:47 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-09-27/</guid><description>
&lt;p>機械学習エンジニアをしている hurutoriya が機械学習、Software Engineering 周りに関する学んだことなど最近楽しいと思っていることを発信していくPodcast です&lt;/p>
&lt;p>&lt;a href="https://anchor.fm/hurutoriya">&lt;img src="https://shunyaueta.com/posts/2020-09-27/images/1.png" alt="just4fun.fm at Anchor">&lt;/a>&lt;/p>
&lt;p>扱うトピックとしては、普段学んだ機械学習、ソフトウェアエンジニアリング、読んだ論文やデータ分析などについて扱っていきます。
もし、ご興味あれば購読お願いします。主要なPodcast Platformで購読可能です。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://anchor.fm/hurutoriya">just4fun.fm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy81ZDVkZTE0L3BvZGNhc3QvcnNz">Google Podcasts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://podcasts.apple.com/us/podcast/just4fun-fm/id1533036988?uo=4">Apple Podcasts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pca.st/bbgv6lyu">Pocket Casts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ご感想などは Twitter ハッシュタグ &lt;a href="https://twitter.com/hashtag/just4funfm?src=hashtag_click&amp;amp;f=live">#just4funfm&lt;/a> でお待ちしております&lt;/p>
&lt;h2 id="なぜ-podcast-なのか">なぜ Podcast なのか？&lt;/h2>
&lt;p>以前からPodcastは日常的に聴いていて、自分の中でもすごく好きなメディアのうちの一つです。
前からやってみようかなと思っていたんですが、周りの人たちがPodcastを始めたのを機によし自分もやるかと始めてみました&lt;/p>
&lt;p>Blogと比べてみると、&lt;/p>
&lt;ul>
&lt;li>ブログ書くよりかはサラッと配信できる、音声で配信するのも新鮮で面白い&lt;/li>
&lt;li>その代わり、換気扇とかの音が気になり音源環境とかはめちゃくちゃ気を使う&lt;/li>
&lt;li>発表レベルの構造化したトークよりも雑談レベルでワイワイするほうがPodcastは向いてる感じはする。前者だと準備やらなんやらで公開できずに死の谷に落ちそう&lt;/li>
&lt;li>喋っているうちに思考が洗練されていくので、あまり気負いすぎずに喋りたい事を発信していくのが良さそう&lt;/li>
&lt;/ul>
&lt;p>しばらく試験的に続けていきたいと思います。&lt;/p>
&lt;h2 id="anchor-凄い">Anchor 凄い&lt;/h2>
&lt;ul>
&lt;li>AnchorでPodcastを始めると、自動的にAppole Podcast, Google Podcast, Pocket CastなどPodcastのプラットフォームに自動配信される。
&lt;ul>
&lt;li>Google Podcastは、配信開始と通知が来ても実際は2-3日後に視聴可能になると問い合わせたら返信がきた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Support here. Sorry for the confusion with your podcast on Google. Allow me to explain this to you. We have noted that for some users the podcast link takes a week or so to become active, so it should begin working soon! If you&amp;rsquo;re still not seeing it update in the next few days though, I suggest reaching out to Google directly to see why your podcast doesn&amp;rsquo;t seem to be appearing on their end and be sure to let them know that the link doesn&amp;rsquo;t appear to be working. Thanks so much for understanding as we continue to distribute your podcast! All the best,&lt;/p>
&lt;/blockquote>
&lt;p>Anchor は &lt;a href="https://techcrunch.com/2019/02/14/spotify-gimlet-anchor-340-million">Spotify に買収されている&lt;/a>ので、サービス生存戦略的にも安心なので今回使ってみました&lt;/p>
&lt;p>サービス開発もかなり熱心にやっているので、これからの進化が楽しみです。
&lt;a href="https://www.theverge.com/2020/3/24/21192322/anchor-podcast-record-with-friends">URLを送るだけで、共同収録が可能な機能&lt;/a>はゲストがZoomとか使えない場合にはすごく気軽に招待できるので便利。難点としては、スマホアプリをホストとして動くので、web appからでも収録できるようにして欲しい&lt;/p>
&lt;p>ちょっと微妙な点としては、Episode description がうまくパースされずHTMLのリンクがanchor上だと死んでたり(他のGoogle Podcastなどはうまくパースされている)、音声データを扱う宿命でeditor がめちゃくちゃ重かったりする。後はスマホファーストでの開発の影響かweb appの機能が必要最低限なのは、優先度の問題で仕方ないと思いつつ改善されたら嬉しい・&lt;/p>
&lt;p>あと全然関係ないですが、&lt;a href="https://www.searchenginejournal.com/google-makes-podcasts-searchable-by-automatically-transcribing-them/300875/#:~:text=Google%20Podcasts%20is%20making%20it,the%20name%20of%20the%20podcast.">GoogleがPodcastの内容を文字起こしして、エピソード検索のメタデータとして活用している&lt;/a>らしくて感動した。&lt;/p>
&lt;p>日本語の音声認識モデルもGoogleで問題なく使われるクオリティになれば、Podcastの中身を検索できるのも近いですね&lt;/p>
&lt;h3 id="チラ裏">チラ裏&lt;/h3>
&lt;p>Podcast の由来は僕の好きな書籍の一つである &lt;a href="https://amzn.to/3i9OZbv">それがぼくには楽しかったから 全世界を巻き込んだリナックス革命の真実&lt;/a> から引用しました。&lt;/p></description></item><item><title>自分なりの機械学習エンジニアスキル構成論</title><link>https://shunyaueta.com/posts/2020-09-21/</link><pubDate>Mon, 21 Sep 2020 00:13:08 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-09-21/</guid><description>
&lt;p>機械学習エンジニアとして働き始めて2年7ヶ月が経過した。&lt;/p>
&lt;p>機械学習エンジニアというロールは会社によって期待される内容が異なってくるが、今の会社で働いてきた経験に基づき自分の中の機械学習エンジニアスキル構成論を整理してみる。&lt;/p>
&lt;h2 id="tl-dr">TL; DR&lt;/h2>
&lt;ul>
&lt;li>人によって考える理想のスキル論は違うので他の人の持論を聞いてみたい&lt;/li>
&lt;li>テクいことをやりたい気持ちはあるが、地道なやるべきことがたくさんあるのがこの世界&lt;/li>
&lt;/ul>
&lt;h2 id="自分の中で機械学習エンジニアにとって大事なスキル">自分の中で機械学習エンジニアにとって大事なスキル&lt;/h2>
&lt;ul>
&lt;li>Software Engineer 40%
&lt;ul>
&lt;li>機械学習サービス実装スキル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Product Manager 30%
&lt;ul>
&lt;li>機械学習プロジェクト自体を成功に導くスキル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data Scientist 30%
&lt;ul>
&lt;li>データに基づき、意思決定し改善していくスキル&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="machine-learning-engineer-as-software-engineer">Machine Learning Engineer as Software Engineer&lt;/h2>
&lt;p>なぜSWEの比率が一番上なのか？&lt;/p>
&lt;p>どれだけ良いモデルができたとしてもそれが活用されるシステムがなければ成果を出せないからです&lt;/p>
&lt;ul>
&lt;li>データを活用してインパクトの大きい課題を解決するための、サービスを実装して、運用して改善していく&lt;/li>
&lt;li>どの方法がベストか考えた上で、それを実現していく&lt;/li>
&lt;/ul>
&lt;p>例えば、R&amp;amp;Dスタイルでモデル開発と実装者を完全に分ける組織構造もあると思いますが、このスタイルはいろんな会社のお話を聞く限りは、組織構造がよほど洗練されていないとうまく稼働しないじゃないかなと思っている&lt;/p>
&lt;p>&lt;a href="https://netflixtechblog.com/full-cycle-developers-at-netflix-a08c31f83249">Full Cycle Developers at Netflix&lt;/a>では、システム開発のライフサイクルである&lt;/p>
&lt;p>&lt;strong>design, development, test, deploy, operate, support&lt;/strong>&lt;/p>
&lt;p>を1チームが一気通貫で責任を持つスタイルをNetflixが提唱している。&lt;/p>
&lt;p>今所属している会社もMicro Serviceでの開発に注力していて、まさにFull Cycleスタイルで機械学習サービス開発を行っている。
個人的に機械学習プロジェクトとこの方式の相性の良いところは、例えば、職能ごとにモデル開発、システム開発と運用を行うメンバーを分割すると、&lt;/p>
&lt;ul>
&lt;li>モデルを作ってデプロイはしたが運用は他人任せになってしまい継続的な改善が回しづらい&lt;/li>
&lt;li>役割が分離されていることで、モデルの詳細を完全に把握できないので実際のトラブル発生時に対応が困難&lt;/li>
&lt;li>運用を考えてモデルがデザインされていないので運用者にしわ寄せがくる&lt;/li>
&lt;/ul>
&lt;p>などアンチパターンが数多く存在する&lt;/p>
&lt;p>Micro Serviceでの開発は上記の課題を解決して、作って終わりではなく自分たちでシステムデザインからサポートまで行うことで、そのサービスの継続的な改善に責任と自由を手にして開発することできる
また、プロジェクトデザインの段階からシステム開発・運用を念頭に動くことができるので、やってみてうまく動かないなどの不確実性を大きく減少させる&lt;/p>
&lt;h2 id="machine-learning-engineer-as-product-manager">Machine Learning Engineer as Product Manager&lt;/h2>
&lt;p>機械学習プロジェクトは、POCなどで検証を行いプロジェクトが始まりますが最初の壁である&lt;/p>
&lt;ul>
&lt;li>機械学習で解ける余地のある大きなインパクト(やる価値)のある問題&lt;/li>
&lt;/ul>
&lt;p>をまず自分たちのサービスで発見する必要があります。(正直コレが一番難しい)&lt;/p>
&lt;p>&lt;a href="https://shunyaueta.com/posts/2020-04-18/">CourseraでHow Google does Machine Learning の講義を修了した&lt;/a>の講義でもGoogleでの機械学習プロジェクトのマネジメントについて言及されていますが、&lt;/p>
&lt;ul>
&lt;li>そもそもデータがない&lt;/li>
&lt;li>Human In The Loopを導入していない(継続的なデータの自浄作用が存在しない)&lt;/li>
&lt;/ul>
&lt;p>などそれらの要素が欠けるだけで簡単にプロジェクトは失敗します。&lt;/p>
&lt;p>上記の講義でまず取り掛かるべき機械学習プロジェクトというのは、&lt;/p>
&lt;blockquote>
&lt;p>現実世界で適用可能な機械学習というのは、自動化の技術です。
今まで人間が手作業で行っていた作業がログとして残っていて、そのデータを活用してそれらの作業を徐々に自動化していきます。&lt;/p>
&lt;/blockquote>
&lt;p>結論からして金言ですね、銀の弾丸など存在しない、機械学習エンジニアとして、テクいことはやりたいがその前にやるべき地道なことが無限にあるんです(切実)&lt;/p>
&lt;p>また、システム開発要素以外にもデータ収集・活用の要素が入ってくるのでステークホルダーとの協力が必要不可欠です。
MVPとして小さな成功を高速に積み重ねていくことで、組織内での機械学習への理解・信頼が高まっていきます。&lt;/p>
&lt;p>個人的に機械学習プロジェクトと非常に相性が良いなと思っているのが、&lt;a href="https://amzn.to/3mysnVD">リーン・スタートアップ&lt;/a>の考え方です。&lt;/p>
&lt;p>その結果データ分析で判明した考察から、&lt;/p>
&lt;ul>
&lt;li>既存のUIのこの部分を改善したい&lt;/li>
&lt;li>今は取れていないデータを構造化した状態で保存するようにしたい&lt;/li>
&lt;/ul>
&lt;p>など優先度が上がりづらい提案も受け入れやすくなる土壌になっていきます。&lt;/p>
&lt;p>日に日に、データの整備やワークフローの改善なども重要ポイントなので、コンサルティングとしての能力は凄い重要だと感じる&lt;/p>
&lt;h3 id="ネット上で閲覧できる有用な機械学習プロジェクトマネジメントの日本語資料">ネット上で閲覧できる有用な機械学習プロジェクトマネジメントの日本語資料&lt;/h3>
&lt;ul>
&lt;li>nishio さんの&lt;a href="https://www.slideshare.net/nishio/01-68382174">機械学習キャンバス0.1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/yurfuwa">@yurfuwa&lt;/a> さんの&lt;a href="https://speakerdeck.com/yurfuwa/ai-project-management-anti-pattern">AI Project Management Anti Pattern&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.slideshare.net/BrainPad/ss-149214163">ブレインパッドにおける機械学習プロジェクトの進め方&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="machine-learning-engineer-as-data-scientist">Machine Learning Engineer as Data Scientist&lt;/h2>
&lt;p>施策の効果検証、機械学習の知識、実験デザイン、データ分析などを活用して、プロジェクトの方向性、同改善していくべきかそれらをどう検証していくかがこの部分です。&lt;/p>
&lt;hr>
&lt;p>ちょっと疲れてきたのでこのへんで。&lt;/p>
&lt;p>機械学習エンジニアになった直後には、こんな抄訳記事も&lt;/p>
&lt;p>&lt;a href="https://shunyaueta.com/posts/2018-04-24/">[抄訳] Data engineers vs. data scientists&lt;/a>&lt;/p>
&lt;p>もあって当時は感銘を受けたが、今になって振り返るとかなり視座が変わったと思う&lt;/p>
&lt;p>経験を積む中で自分の中の軸が出来上がってきた証拠だと信じたい&lt;/p>
&lt;p>え、仕事で機械学習をやっているのに&lt;a href="https://amzn.to/3hIjyF2">仕事ではじめる機械学習&lt;/a>を読んだことがない？
神書籍なので、今すぐ買いましょう!&lt;/p></description></item><item><title>GitHub codeowners でGithubグループを指定しても反映されない時の対処方法</title><link>https://shunyaueta.com/posts/2020-09-19/</link><pubDate>Sat, 19 Sep 2020 11:31:36 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-09-19/</guid><description>
&lt;p>GitHub の &lt;a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners">CODEOWNERS&lt;/a> という機能を使えば、レポジトリに対するPRでは設定された CODEOWNER がAPPROVEを出さないとマージされないようにできます。&lt;/p>
&lt;p>この機能を使うことで、例えばそのリポジトリのオーナーであるグループが必ずPRを確認しないとマージできないようにすることでコードのクオリティを保つ仕組みが作れます。&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;ul>
&lt;li>GitHub codeowners で特定のグループをCODEOWNERSに設定したいときは、そのグループをレポジトリの &lt;code>/settings/access&lt;/code>で &lt;code>Maintain&lt;/code> として追加しないとGitHub PR で自動的にreviwer に追加されない&lt;/li>
&lt;li>リポジトリで&lt;code>.github/CODEOWNERS&lt;/code> のファイルを作成して、以下の形式でGitHub group を追加する&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">* @octo-org/codeowners-team
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>リポジトリの設定の&lt;code>/settings/access&lt;/code>にアクセスして、&lt;code>@octo-org/codeowners-team&lt;/code> を &lt;code>Maintain&lt;/code> として追加する。&lt;/li>
&lt;/ul>
&lt;p>*試していないのですが、&lt;code>Write&lt;/code> や &lt;code>Triage&lt;/code> 権限でも問題ないかもしれません。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-19/images/1.png" alt="repository access setting">&lt;/p>
&lt;p>この設定をしたあとに、GitHub PRを新たに作成すると、自動的に CODEOWNERS のapproveがないとマージされないように設定されるはずです。&lt;/p>
&lt;h3 id="自分自身がハマった経緯">自分自身がハマった経緯&lt;/h3>
&lt;p>グループ全体のアカウントが追加されている&lt;code>a-group/all&lt;/code>というGithub Groupがすでにリポジトリのアクセス権限に &lt;code>Write&lt;/code> 権限として追加されており、全員がwrite権限をもっているならcodeownersとしての権限も問題ないだろうと思っていたらハマりました。&lt;/p>
&lt;p>CODEOWNERS の仕組みを知ると理解できるのですが、&lt;code>a-group/all&lt;/code> が指定したいグループの包含関係にあるからといって、そのように取り扱ってくれるわけではないということですね。&lt;/p></description></item><item><title>pandas を使って特定のディレクトリのCSVファイルをすべて連結して一つのCSVファイルを作成</title><link>https://shunyaueta.com/posts/2020-09-09/</link><pubDate>Wed, 09 Sep 2020 23:49:37 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-09-09/</guid><description>
&lt;h2 id="目的">目的&lt;/h2>
&lt;p>複数の同じフォーマットのCSVファイルが特定のディレクトリに配置されており、そのCSVファイル群を一つのCSVファイルに連結したい&lt;/p>
&lt;p>今回は、PythonのPandas とpathlibを使って上記の目的を実現します。&lt;/p>
&lt;h3 id="実行環境">実行環境&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">pandas&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">pd&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__version__&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="s1">&amp;#39;1.1.2&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="mf">3.8&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Jul&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="mi">2020&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">07&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="n">Clang&lt;/span> &lt;span class="mf">11.0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">clang&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1103.0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mf">32.62&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目的となるcsvファイルは &lt;code>tmp&lt;/code> ディレクトリに以下のような形式で配置されているとする&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">tmp
├── 1.csv
├── 2.csv
└── 3.csv
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>各ファイルはこのような形式で保存されています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">id name created
1 John 2020/09/10
2 bob 2020/09/10
3 taro 2020/09/11
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下のPythonスクリプトを実行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pathlib&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">pandas&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">pd&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">contcat_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># pathlibのitedir()で対象とするディレクトリのCSVファイル一覧をジェネレーターとして取得&lt;/span>
&lt;span class="n">csvs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pathlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f_path&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">glob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;*.csv&amp;#39;&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="c1"># そのファイル一覧をPandasで読み込んで、pd.concat()で連結してDataFrameとして返す&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">csvs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">contcat_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;tmp&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># 連結されたDataFrameをCSVとして保存する&lt;/span>
&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;concat.csv&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>concat.csvを確認してみると&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">id name created
1 John 2020/09/10
2 bob 2020/09/10
3 taro 2020/09/11
4 hanako 2020/09/12
1 John 2020/09/10
2 bob 2020/09/10
3 taro 2020/09/11
4 hanako 2020/09/12
1 John 2020/09/10
2 bob 2020/09/10
3 taro 2020/09/11
4 hanako 2020/09/12
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>無事連結されたCSVを取得することができました&lt;/p>
&lt;h2 id="追記">追記&lt;/h2>
&lt;ul>
&lt;li>2020-09-12: @siumachi さんから&lt;a href="https://twitter.com/shiumachi/status/1304325924377096192">ご指摘&lt;/a>を受け、CSVファイル以外がディレクトリに混入していても問題ないように変更しました&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>拝見しました。forでディレクトリを走査するときは pathlib.Path.glob(&amp;quot;*.csv&amp;rdquo;)を使った方が、csv以外のファイルが混入したときの対策になると思ったのですが、いかがでしょう &lt;a href="https://docs.python.org/ja/3/library/pathlib.html#pathlib.Path.glob">https://docs.python.org/ja/3/library/pathlib.html#pathlib.Path.glob&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>MLOps の国際会議 OpML'20 に論文が採択されたので登壇してきた</title><link>https://shunyaueta.com/posts/2020-09-06/</link><pubDate>Sun, 06 Sep 2020 23:31:03 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2020-09-06/</guid><description>
&lt;p>MLOpsの査読付き国際会議 &lt;a href="https://www.usenix.org/conference/opml20">2020 USENIX Conference on Operational Machine Learning&lt;/a> (略称 OpML&amp;rsquo;20)に論文が採択されたので、登壇してきた。&lt;/p>
&lt;p>Podcastでも紹介しました。&lt;/p>
&lt;p>&lt;a href="https://anchor.fm/hurutoriya/episodes/1-MLOps--OpML20-ek0nr3/a-a58em8">#1 MLOps の国際会議 OpML20 について at just4fun.fm&lt;/a>&lt;/p>
&lt;h2 id="mlopsの査読付き国際会議とopmlの立ち位置">MLOpsの査読付き国際会議とOpMLの立ち位置&lt;/h2>
&lt;p>機械学習エンジニアリング・MLOpsの領域の会議でも一番有名なものとして2018年に発足した&lt;a href="https://mlsys.org/">MLSys&lt;/a>があります。(ちなみに最初はSysMLという名前でした)
このカンファレンスの傾向としては、アカデミアの研究者主体の発足経緯からアカデミアからインダストリーへの橋渡し的立ち位置となっています。
具体的には、発表者はアカデミアの方が大半でハードウェアから、モデルのOSS公開など幅広く機械学習エンジニアリング・MLOpsの周辺領域をカバーしています。&lt;/p>
&lt;p>OpMLはその一年後に、&lt;a href="https://www.usenix.org/">USENIX&lt;/a>が母体の会議としてMLOpsを軸にした会議として誕生しました。
USENIXはSRECON、OSDIなどを開催している団体です。
学術的なスタイルに則り、先端的な計算機システムの成果を論文として公開されています。MLSysと対称的にこちらはインダストリーからアカデミアへの橋渡し的立ち位置となっています。発表内容は企業での発表者が多く、実際の運用で得られた各企業のMLOpsのベストプラクティスなどがメインで話されています。
個人的にはOpMLのほうが、MLOpsのど真ん中を主体に置いているのでMLSysよりも盛り上がってほしいなと思っています。&lt;/p>
&lt;p>OpML&amp;rsquo;19がどのような様子だったかは、以下の記事がわかりやすいです。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/nttlabs/opml19-75e85c3384f7">OpML ‘19参加レポート&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.chezo.uno/the-first-conference-of-operational-machine-learning-opml-19-308baad36108?gi=33c290c07226">The first conference of Operational Machine Learning: OpML ‘19&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>自分自身、機械学習エンジニアリングやMLOps周りのカンファレンス情報などを追いかけていますが、この分野で査読付きかつ論文として残せる形式の国際会議は主に上記の２つの認識です。&lt;/p>
&lt;p>KDDやCOLING、NAACLなどの国際会議でもインダストリートラックが常設されるようになって久しいですが、最近ではインダストリートラックだけではなく、積極的に実応用前提のワークショップ(&lt;a href="https://sites.google.com/view/ecnlp/acl-2020">ECNLP at ACL2020&lt;/a>, &lt;a href="https://irsworkshop.github.io/2020/index.html">IRS2020 at KDD2020&lt;/a>など)が開催されており機械学習の理論と実応用の融合が進んでいます。&lt;/p>
&lt;h2 id="opml20への投稿と採択で得られたもの">OpML&amp;rsquo;20への投稿と採択で得られたもの&lt;/h2>
&lt;p>OpML&amp;rsquo;20では下記２つの発表枠があり、投稿者がどちらかを選んで発表を行います。&lt;/p>
&lt;ul>
&lt;li>査読付きで20mの口頭発表&lt;/li>
&lt;li>2ページの査読付き論文+20mの口頭発表&lt;/li>
&lt;/ul>
&lt;p>OpML20で&lt;a href="https://www.usenix.org/conference/opml20/call-for-participation">推奨されるトピック&lt;/a>でも、自分たちが持っているネタで&lt;/p>
&lt;blockquote>
&lt;p>New model introduction into production (e.g., staging, A/B test)&lt;/p>
&lt;/blockquote>
&lt;p>において新規性(Novelty)があると考えて、ここからストーリーを組み立てていきました。&lt;/p>
&lt;p>スケジュール感として投稿締切が2020/02/25で、その1ヶ月前の1月末から毎日1時間、Google Calendarで時間を抑えて同僚と集中的に論文の執筆を行いました。
最初にガッと3ページほど書いて、その後洗練させて2ページに圧縮して投稿しました。
あらめて添削や執筆をともに行ってくれた同僚たちに感謝します。&lt;/p>
&lt;p>そして投稿の1ヶ月後に通知メールが来て採択を知りました。
添削を何度も繰り返して時間が迫るなかなんとか投稿できたという状態で、とりあえず投稿できて良かったなと感じていた最中だったので、採択通知が来て本当におどきました。&lt;/p>
&lt;p>査読システムの良い点として、自分たちの投稿内容がその会議で発表足り得るものかがレビュアーからレビューされることです。
自分自身機械学習エンジニアとして働いていますが、その成果が査読を通して同じ分野で働いているエキスパートの第三者に認められたという事実が自分の仕事への自信に繋がりました。&lt;/p>
&lt;p>その後Reviwerの方に指摘された点を意識しつつ修正を行って、Camera Readyを無事に提出しました。
また今回は急遽オンライン開催へと変更されたので、動画投稿も必須になり初めての収録もなかなか難産でしたが無事提出することができました。&lt;/p>
&lt;h3 id="opml20で採択された論文">OpML&amp;rsquo;20で採択された論文&lt;/h3>
&lt;p>採択された内容は以下のページにまとまっているので、もしご興味があればご覧ください。
内容を簡単にまとめると、&lt;/p>
&lt;ul>
&lt;li>C2Cでの投稿内容監視で機械学習を導入&lt;/li>
&lt;li>Human In The Loopと組み合わせたバックテストにより、リリース時の機械学習モデルの劣化を事前防止&lt;/li>
&lt;li>不均衡なデータ分布を考慮したモデルリリース後の新たなA/B テスト手法の考案による、意思決定の高速化&lt;/li>
&lt;/ul>
&lt;p>です。&lt;/p>
&lt;p>&lt;a href="https://www.usenix.org/conference/opml20/presentation/ueta">&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/1.png" alt="Auto Content Moderation in C2C e-Commerce">&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20/presentation/ueta">Auto Content Moderation in C2C e-Commerce&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/_rvEcH_zyt4">講演動画-Youtube&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>当日はオンライン開催で、発表内容は事前にYouTubeで公開され、その後Slack上でリアルタイムに発表者に質問ができる Ask Me Anything (AMA)セッションが開催されました。
また、今回はオンライン開催になった影響で参加費は無料となりました。
AMAセッションでChairの方がファシリテーターとなり、予想以上に活発な議論が生み出され驚きました。&lt;/p>
&lt;p>オンライン開催になり、発表内容はすべてYouTubeで公開され、アメリカへの渡航の必要がなくなり気軽に参加できるのは非常に良い流れだと思います。&lt;/p>
&lt;p>一方で、日本からの参加だと深夜01:00-02:30の参加だったのでその点のみ非常に辛かったです。
懇親会などの偶発性を持った出会いなどはオンラインだとやはり、難しく感じました。&lt;/p>
&lt;h2 id="面白かった-opml20-の発表まとめ">面白かった OpML&amp;rsquo;20 の発表まとめ&lt;/h2>
&lt;p>OpML&amp;rsquo;20の発表一覧はこちらから確認できます。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20/conference-program">OpML&amp;rsquo;20 Conference Program&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>ここから面白かった発表を抜粋して紹介させていただきます。&lt;/p>
&lt;p>&lt;em>&lt;a href="https://twitter.com/i/events/1292673505356476417?s=20">Twitterでもまとめていた&lt;/a>のですが、記録のために分散させておきたいのでこちらでも記載しておきます&lt;/em>&lt;/p>
&lt;h3 id="runway---model-lifecycle-management-at-netflix">Runway - Model Lifecycle Management at Netflix&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20/presentation/cepoi">https://www.usenix.org/conference/opml20/presentation/cepoi&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/2.png" alt="Runway">&lt;/p>
&lt;p>RunwayというNetflixでのモデルのライフサイクルマネジメントツールの紹介
NetFlixで実際にあった課題&lt;/p>
&lt;ul>
&lt;li>モデルを誰が作ったか、現在どんなモデルがあるのか、特徴量、変換、データはどんなものが使われているか&lt;/li>
&lt;li>モデルのリリース、検証、モニタリングやアラートが標準化されていない&lt;/li>
&lt;li>計算機資源の無駄遣いなど&lt;/li>
&lt;/ul>
&lt;p>上記の課題を解決するためにRunwayが作成された。&lt;/p>
&lt;ul>
&lt;li>Runwayは現状A/Bテストやカナリーテストは提供できていない&lt;/li>
&lt;li>integration 周りは Jenkinsを使って実現している&lt;/li>
&lt;/ul>
&lt;p>k8s を明示的に言及していないってことは多分使っていなさそうではある。
計画段階だが、Netflixで開発している機械学習のワークフローエンジン&lt;a href="https://metaflow.org/">METAFLOW&lt;/a>とRunwayのインテグレーションも視野に入れてるらしい。&lt;/p>
&lt;p>一つの会社でこんだけ機械学習社内ツールが乱立してるのは競争力が非常に高いと感じた&lt;/p>
&lt;p>データリネージなどの&lt;a href="https://usenix-opml.slack.com/archives/C017CGC75PF/p1596040793061000">質問もされている&lt;/a>&lt;/p>
&lt;p>ガバナンスまわりを考えると、大企業だとデータリネージの必要性も最近わかるようになってきた。&lt;/p>
&lt;h3 id="more-data-science-less-engineering-a-netflix-original">More Data Science, Less Engineering: A Netflix Original&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20/presentation/goyal">https://www.usenix.org/conference/opml20/presentation/goyal&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/3.png" alt="MetaFlow">&lt;/p>
&lt;p>MLOPs NYCで公開されたMetaFlowの話。
スライドでのData Scientistの苦悩を描いたイラストが秀逸で面白かったです。&lt;/p>
&lt;p>METAFLOWのData Scientstのスキルを最大限に活かす思想は非常に共感できるので、どんどん発展してほしいです。&lt;/p>
&lt;p>最近ではRにも対応して驚きましたが、METAFLOWの思想である&lt;code>More Data Science, Less Engineering: A Netflix Original&lt;/code>に基づいていて非常に的確な対応ですね・&lt;/p>
&lt;h3 id="inside-nvidias-ai-infrastructure-for-self-driving-cars">inside NVIDIA’s AI Infrastructure for Self-driving Cars&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20/presentation/farabet">https://www.usenix.org/conference/opml20/presentation/farabet&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/5.png" alt="NVIDIA SELF DRIVING">&lt;/p>
&lt;ul>
&lt;li>自動運転のためにデータの収集からモデルのデプロイ・シミュレーションまで一気通貫で開発&lt;/li>
&lt;li>実世界でのGround Truthを考える
&lt;ul>
&lt;li>多種多様なデータ(LIDAR, Sensor, GPS. etc.)&lt;/li>
&lt;li>100種類以上の外的なシグナルの活用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/6.png" alt="NVIDIA SELF DRIVING">&lt;/p>
&lt;p>スケールするデプロイのための、データの生成から、モデルの学習→モデルの監査からシミュレーション・ハードウェアでのshadow patch を終えて、Prodにデプロイする流れ&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/7.png" alt="NVIDIA SELF DRIVING">&lt;/p>
&lt;h3 id="automating-operations-with-ml">Automating Operations with ML&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.usenix.org/conference/opml20/presentation/underwood">https://www.usenix.org/conference/opml20/presentation/underwood&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>オペレーションでの機械学習活用についてGoogle によるセッション&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ほとんどの場合、機械学習の維持コストのほうが実際のインパクトより高い&lt;/p>
&lt;/li>
&lt;li>
&lt;p>単純なヒューリスティックは柔軟性に欠けるが機械学習と同等に役に立つ&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>発表者のToddさんは他にもSRECON2019に
All of Our ML Ideas Are Bad (and We Should Feel Bad)
となかなか刺激的なタイトルで、SREの分野で機械学習の実応用はなかなかうまくいなかったぜと共有している&amp;hellip;&lt;/p>
&lt;h3 id="how-ml-breaks-a-decade-of-outages-for-one-large-ml-pipeline">How ML Breaks: A Decade of Outages for One Large ML Pipeline&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.usenix.org/conference/opml20/presentation/papasian">https://www.usenix.org/conference/opml20/presentation/papasian&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/8.png" alt="Google ML Breaks">&lt;/p>
&lt;p>日本語に訳すと、
機械学習システムの壊れ方:15年以上経過したMLパイプラインがどのようにしてぶっ壊れてきたか&lt;/p>
&lt;p>モデルの前提として&lt;/p>
&lt;ul>
&lt;li>15年以上まえから開発された機械学習パイプライン&lt;/li>
&lt;li>10年以上前からポストモーメンタムが行われている&lt;/li>
&lt;li>定期的に1時間かけてモデルを新規データで学習&lt;/li>
&lt;li>新モデルは学習後即、CDされる&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/9.png" alt="Google ML Breaks">&lt;/p>
&lt;ul>
&lt;li>失敗の要因を19種類にまとめた。オーケストレーションの失敗、CPU不足などなど&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-09-06/images/10.png" alt="Google ML Breaks">&lt;/p>
&lt;hr>
&lt;p>個人的には&lt;/p>
&lt;ul>
&lt;li>NVIDIAの inside NVIDIA’s AI Infrastructure for Self-driving Cars&lt;/li>
&lt;li>Googleの How ML Breaks: A Decade of Outages for One Large ML Pipeline&lt;/li>
&lt;/ul>
&lt;p>が骨太で非常に面白い発表でした&lt;/p>
&lt;p>MLOpsという言葉が誕生して久しいですが、機械学習システムの開発と運用に置いて、何をやるべきなのかが構造化されてきています。&lt;/p>
&lt;p>書籍では、日本語で読める良書として、&lt;a href="https://amzn.to/331unNb">仕事ではじめる機械学習&lt;/a>
や最近では、Googlerの方がオライリーで出版予定の&lt;a href="https://www.oreilly.com/library/view/machine-learning-design/9781098115777/">Machine Learning Design Patterns&lt;/a>
など非常に充実しています。&lt;/p>
&lt;p>これからも、機械学習と現実世界の橋渡しとしてこの領域はどんどん掘り進められていくと思います。&lt;/p>
&lt;p>MLOpsはデータの活用を前提にしたシステム開発というとてもエキサイティングです。&lt;/p>
&lt;p>もしOpMLの発表が面白いと感じた方は、来年のOpML21の口頭発表にも申し込んでみてはいかがでしょうか?&lt;/p></description></item><item><title>Python の内包表記とジェネレータ式のメモリ使用量比較</title><link>https://shunyaueta.com/posts/2020-08-23/</link><pubDate>Sun, 23 Aug 2020 21:28:10 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-08-23/</guid><description>
&lt;p>リストを構築する際に Python ではリスト内包表記とジェネレータ式の２種類が存在する。
今回、リスト構築時にメモリ使用量にどれだけ差異が発生するのか調査をしてみた。
メモリ使用量の調査には、&lt;a href="https://github.com/pythonprofilers/memory_profiler">memory_profiler&lt;/a>というパッケージを使用した。&lt;/p>
&lt;p>まず、２つのリストのデカルト積のタプルを表示するプログラムでの比較&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">memory_profiler&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">profile&lt;/span>
&lt;span class="nd">@profile&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> Comparision List comprehension VS generator memory usage
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">colors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;colors&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;span class="n">sizes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;S&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">shirts&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">colors&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sizes&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shirts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">colors&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sizes&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">Filename: src/listcomp_vs_generator.py
Line &lt;span class="c1"># Mem usage Increment Line Contents&lt;/span>
&lt;span class="o">================================================&lt;/span>
&lt;span class="m">4&lt;/span> 10.5 MiB 10.5 MiB @profile
&lt;span class="m">5&lt;/span> def main&lt;span class="o">()&lt;/span>:
&lt;span class="m">6&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> 7 Comparision List comprehension VS generator memory usage
&lt;/span>&lt;span class="s2"> 8 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="m">9&lt;/span> 10.5 MiB 0.0 MiB &lt;span class="nv">colors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;colors&amp;#34;&lt;/span> * &lt;span class="m">1000&lt;/span>
&lt;span class="m">10&lt;/span> 10.5 MiB 0.0 MiB &lt;span class="nv">sizes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;S&amp;#34;&lt;/span> * &lt;span class="m">100&lt;/span>
&lt;span class="m">11&lt;/span> 10.5 MiB 0.0 MiB &lt;span class="k">for&lt;/span> shirts in &lt;span class="o">((&lt;/span>color, size&lt;span class="o">)&lt;/span> &lt;span class="k">for&lt;/span> color in colors &lt;span class="k">for&lt;/span> size in sizes&lt;span class="o">)&lt;/span>:
&lt;span class="m">12&lt;/span> 10.5 MiB 0.0 MiB print&lt;span class="o">(&lt;/span>shirts&lt;span class="o">)&lt;/span>
&lt;span class="m">13&lt;/span> 15.1 MiB 0.1 MiB &lt;span class="o">[&lt;/span>print&lt;span class="o">((&lt;/span>color, size&lt;span class="o">))&lt;/span> &lt;span class="k">for&lt;/span> color in colors &lt;span class="k">for&lt;/span> size in sizes&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>次に、1000x1000 のデカルト積を作成した場合&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">memory_profiler&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">profile&lt;/span>
&lt;span class="nd">@profile&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> Comparision List comprehension VS generator memory usage
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">colors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;colors&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;span class="n">sizes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;S&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;span class="p">((&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">colors&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sizes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">[(&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">colors&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sizes&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">Line &lt;span class="c1"># Mem usage Increment Line Contents&lt;/span>
&lt;span class="o">================================================&lt;/span>
&lt;span class="m">4&lt;/span> 10.5 MiB 10.5 MiB @profile
&lt;span class="m">5&lt;/span> def main&lt;span class="o">()&lt;/span>:
&lt;span class="m">6&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> 7 Comparision List comprehension VS generator memory usage
&lt;/span>&lt;span class="s2"> 8 &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="m">9&lt;/span> 10.5 MiB 0.0 MiB &lt;span class="nv">colors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;colors&amp;#34;&lt;/span> * &lt;span class="m">1000&lt;/span>
&lt;span class="m">10&lt;/span> 10.5 MiB 0.0 MiB &lt;span class="nv">sizes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;S&amp;#34;&lt;/span> * &lt;span class="m">1000&lt;/span>
&lt;span class="m">11&lt;/span> 10.5 MiB 0.0 MiB &lt;span class="o">((&lt;/span>color, size&lt;span class="o">)&lt;/span> &lt;span class="k">for&lt;/span> color in colors &lt;span class="k">for&lt;/span> size in sizes&lt;span class="o">)&lt;/span>
&lt;span class="m">12&lt;/span> 434.6 MiB 5.8 MiB &lt;span class="o">[(&lt;/span>color, size&lt;span class="o">)&lt;/span> &lt;span class="k">for&lt;/span> color in colors &lt;span class="k">for&lt;/span> size in sizes&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>結果を見ると一目瞭然で、ジェネレータ式の場合だとイテレータプロトコルが要素を一つ一つ作成するので、メモリ使用量もリスト内包表記と比べると 40 倍以上と一目瞭然の差になった&lt;/p>
&lt;p>機械学習でも大規模なデータを扱うことが多い、なのでジェネレータ式を意識して書いてメモリ使用量を抑えていきたい。&lt;/p></description></item><item><title>AOJの「ITP I」40問をPythonで解いた</title><link>https://shunyaueta.com/posts/2020-08-04/</link><pubDate>Tue, 04 Aug 2020 03:38:58 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-08-04/</guid><description>
&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>コーディングの腕をもっと磨きたいなと思ったので、以下の記事を参考に始めてみた&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qiita.com/e869120/items/f1c6f98364d1443148b3">https://qiita.com/e869120/items/f1c6f98364d1443148b3&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>全部で 44 問ありますが、最後の 4 問は競プロとはあまり関係ないので、ITP1_1-A から ITP1_10-D までの 40 問を解くことをお勧めします。&lt;/p>
&lt;/blockquote>
&lt;p>まずは最初におすすめされた、AOJのITP1_1-A から ITP1_10-D までの 40 問を解いてみた
無料でこのサービスが提供されてるの素晴らしい
標準入力、出力の整形が少し手間取ったけど、あとは愚直に解いていった&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://judge.u-aizu.ac.jp/onlinejudge/">http://judge.u-aizu.ac.jp/onlinejudge/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>感想としては、&lt;/p>
&lt;ul>
&lt;li>やってみたら、意外と楽しい。特に自分で諦めずに試行錯誤して、オンラインで一発でACもらえるとめちゃくちゃ嬉しい&lt;/li>
&lt;li>テストケースに通る、すなわち正しい、それが書けたら達成感がある&lt;/li>
&lt;li>何かしらのお題に沿って、コードを書くという動機ができるので、書くことに慣れたい場合も有用そう&lt;/li>
&lt;/ul>
&lt;p>togglで時間計測しながら、やって見直してみたら15h46m 費やしていた。大体1問25mくらい&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-08-04/images/1.png" alt="統計">
&lt;img src="https://shunyaueta.com/posts/2020-08-04/images/2.png" alt="統計">&lt;/p>
&lt;p>次の目標、&lt;/p>
&lt;ul>
&lt;li>AtCoder で水色を目指す!!!&lt;/li>
&lt;li>データ構造周りや、アルゴリズム周りはまだまだ弱いのでそこらへんを抑えていきたい&lt;/li>
&lt;/ul>
&lt;p>当面は、以下の２つに投資していきます&lt;/p>
&lt;ul>
&lt;li>機械学習だけに縛られない、SWEとしてスキル底上げ&lt;/li>
&lt;li>機械学習関係の確固たる基礎知識と実装力&lt;/li>
&lt;/ul>
&lt;p>以下に自分が書いた回答例を放流しておきます。&lt;/p>
&lt;hr>
&lt;h2 id="rule">Rule&lt;/h2>
&lt;ul>
&lt;li>15分試行錯誤しても、緒がわからない場合は諦める&lt;/li>
&lt;li>わからなかったとき、もっと上手な書き方は以下を参考にしました&lt;/li>
&lt;li>&lt;a href="https://qiita.com/cmtennis1042/items/5f1e7f071081176e857f">https://qiita.com/cmtennis1042/items/5f1e7f071081176e857f&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="itp1_1_a---hello-world">ITP1_1_A: Hello World&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello world&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_1_b---x-cubic">ITP1_1_B: X Cubic&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_1_c---rectangle">ITP1_1_C: Rectangle&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_1_d---watch">ITP1_1_D: Watch&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">second&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>//&lt;/code> は整数の商を算出する&lt;/p>
&lt;h2 id="itp1_2_a---small-large-or-equal">ITP1_2_A: Small, Large, or Equal&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a &amp;gt; b&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a == b&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a &amp;lt; b&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_2_b---range">ITP1_2_B: Range&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Yes&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_2_c---sorting-three-numbers">ITP1_2_C: Sorting Three Numbers&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="n">l&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">sep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#best&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">three_numbers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_2_d---circle-in-a-rectangle">ITP1_2_D: Circle in a Rectangle&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Yes&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一発で通って、めちゃくちゃ興奮した!!&lt;/p>
&lt;h2 id="itp1_3_a---print-many-hello-world">ITP1_3_A: Print Many Hello World&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="p">[&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>##　ITP1_3_B: Print Test Cases&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;Case {i+1}: {num}&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_3_c---swapping-two-numbers">ITP1_3_C: Swapping Two Numbers&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">pairs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pairs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">pair&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pairs&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pair&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_3_d---how-many-divisors">ITP1_3_D: How Many Divisors?&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Best&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cnt&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_4_a---a--b-problem">ITP1_4_A: A / B Problem&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%i&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">%i&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">%-5f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_4_b---circle">ITP1_4_B: Circle&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">math&lt;/span>
&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%-5f&lt;/span>&lt;span class="s1"> &lt;/span>&lt;span class="si">%-5f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pi&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_4_c---simple-calculator">ITP1_4_C: Simple Calculator&lt;/h2>
&lt;p>&amp;lsquo;&amp;lsquo;&amp;lsquo;python
while True:
a, op, b = input().split()
a, b = map(int, [a, b])
if op == &amp;lsquo;?':
break
elif op == &amp;ldquo;+&amp;rdquo;:
print(a+b)
elif op == &amp;ldquo;-&amp;quot;:
print(a-b)
elif op == &amp;ldquo;&lt;em>&amp;quot;:
print(a&lt;/em>b)
elif op == &amp;ldquo;/&amp;quot;:
print(a//b)
'&amp;rsquo;&amp;rsquo;&lt;/p>
&lt;h2 id="itp1_4_d---min-max-and-sum">ITP1_4_D: Min, Max and Sum&lt;/h2>
&lt;p>&amp;lsquo;&amp;lsquo;&amp;lsquo;python
n = int(input())
a = list(map(int, input().split()))
print(min(a), max(a), sum(a))
'&amp;rsquo;&amp;rsquo;&lt;/p>
&lt;h2 id="itp1_5_a---print-a-rectangle">ITP1_5_A: Print a Rectangle&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">pair&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">#Best&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_5_b---print-a-frame">ITP1_5_B: Print a Frame&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;#&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_5_c---print-a-chessboard">ITP1_5_C: Print a Chessboard&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">line&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">line&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">line&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s1">&amp;#39;.&amp;#39;&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">line&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_5_d---structured-programming">ITP1_5_D: Structured Programming&lt;/h2>
&lt;p>C++のコードで3がつくものというロジックが読めなかった。。。10で割ってあまりが3だけだと、&lt;code>31&lt;/code> とかがエッジケースで通らなかった。。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">l&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">l&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># AC&lt;/span>
&lt;span class="n">N&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; {}&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_6_a---reversing-numbers">ITP1_6_A: Reversing Numbers&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">reversed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_6_b---finding-missing-cards">ITP1_6_B: Finding Missing Cards&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">all_cards&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;H&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">hold_cards&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">suit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">hold_cards&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">suit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">card&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">all_cards&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">card&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hold_cards&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">card&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>in&lt;/code> は&lt;code>O(n)&lt;/code>なので注意が必要&lt;/p>
&lt;h2 id="itp1_6_c---official-house">ITP1_6_C: Official House&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">pairs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">pairs&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="c1"># 4 buildings&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 3 floors&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 10 rooms&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pairs&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">pairs&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 3 floors&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># 10 rooms&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># modify&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[[&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">inputs&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>入力時に、&lt;code>位置情報:値&lt;/code> をpairで持つ辞書を作って全部屋をforで回して、マッチした時にその部屋の値を変更していくようにした。
1つめのtest caseは成功したが、２つ目のtest caseで同じ位置情報が入力された時に、辞書の&lt;code>key&lt;/code>が上書きされてうまく動かなくなった。
解決法として、入力値を全てリストで保持、その入力値を使って、直接その要素の値を逐次計算するようにした&lt;/p>
&lt;h2 id="itp1_6_d---matrix-vector-multiplication">ITP1_6_D: Matrix Vector Multiplication&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">mat&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">vec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">ans&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mat&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">ans&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ans&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_7_a---grading">ITP1_7_A: Grading&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;F&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="mi">80&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="mi">65&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_7_b---how-many-ways">ITP1_7_B: How many ways?&lt;/h2>
&lt;p>全探索で探索してみたけど、O(N^3)かかるかつ、選択されたものが再度選択されてしまう。set()で扱っても、探索候補からキューとして扱わないといけないことには気づいたがどう扱えばいいか考えつかず断念
その後、回答例を見ると、たしかにループで、外側とかぶらないように変数管理すればうまく重複排除できることに気がついた&amp;hellip;!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">cnt&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_7_c---spreadsheet">ITP1_7_C: Spreadsheet&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">c_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">c&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">c_sum&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">c_sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c_sum&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_7_d---matrix-multiplication">ITP1_7_D: Matrix Multiplication&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">mat_a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">mat_b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">tmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">tmp&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">mat_a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">mat_b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">row&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_8_a---toggling-cases">ITP1_8_A: Toggling Cases&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">input_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">input_str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">islower&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_8_b---sum-of-numbers">ITP1_8_B: Sum of Numbers&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_8_c---counting-characters">ITP1_8_C: Counting Characters&lt;/h2>
&lt;p>入力が複数行で何行入力されるか不明な場合は、&lt;code>sys.stdin.read()&lt;/code>を使う&lt;/p>
&lt;p>&lt;a href="https://qiita.com/kyuna/items/8ee8916c2f4e36321a1c#1-%E3%81%BE%E3%81%A8%E3%82%81">https://qiita.com/kyuna/items/8ee8916c2f4e36321a1c#1-%E3%81%BE%E3%81%A8%E3%82%81&lt;/a>&lt;/p>
&lt;p>&lt;code>readline()&lt;/code>だと一行ずつ読み込む&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;{k} : {v}&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_8_d---ring">ITP1_8_D: Ring&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Yes&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;No&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_9_a---finding-a-word">ITP1_9_A: Finding a Word&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">sentents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;END_OF_TEXT&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="n">sentents&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sentents&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_9_b---shuffle">ITP1_9_B: Shuffle&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_9_c---card-game">ITP1_9_C: Card Game&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">cards&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">p_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="n">p_h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">card&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">cards&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">card&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">card&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">p_t&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">p_h&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">card&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">card&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">p_t&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">p_h&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p_h&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_9_d---transformation">ITP1_9_D: Transformation&lt;/h2>
&lt;ul>
&lt;li>スライス表記で、&lt;code>l[start:end:step]&lt;/code>を理解できるとかける&lt;/li>
&lt;li>&lt;code>end&lt;/code> の記法が前から違和感あったんだけど、 @reto_nayuta さんにしていただいた説明がとてもわかり易かった!! 感謝&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>1-start というより 0-start exclusive、つまり [start, end) の右半開区間と解釈するのが自然かと
・i から長さ k 取る→a[i, i+k]
・i を境界に2つに分ける（二分探索等）→a[:i], a[i:]
・range の挙動とも一致→a[i:j] == [a[k] for k in range(i, j)]（R/Ruby/pandas/Rust は arr[range] 記法）
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://twitter.com/reto_nayuta/status/1290125805167632385">https://twitter.com/reto_nayuta/status/1290125805167632385&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">orders&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">order&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">orders&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;print&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;replace&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;reverse&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][::&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_10_d---distance-ii">ITP1_10_D: Distance II&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">math&lt;/span>
&lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hypot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_10_b---triangle">ITP1_10_B: Triangle&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">math&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">C&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">theta&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radians&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">theta&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">S&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">theta&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">L&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">c&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">S&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sep&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_10_c---standard-deviation">ITP1_10_C: Standard Deviation&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">math&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="bp">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">n&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">([(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="itp1_10_d---distance-ii-1">ITP1_10_D: Distance II&lt;/h2>
&lt;p>チェビシェフ距離、学生の頃を思い出して懐かしかった。
&lt;code>zip&lt;/code>できれいに書けた&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)]))&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)])&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">sum&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)])&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">max&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)]))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>How to write the UnitTest with stdin at Pytest</title><link>https://shunyaueta.com/posts/2020-07-25/</link><pubDate>Sat, 25 Jul 2020 03:18:14 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-07-25/</guid><description>
&lt;p>If you want to write UnitTest when using &lt;code>stdin&lt;/code> in Python.
Pytest provide &lt;code>setattr&lt;/code> function in &lt;code>monkeypatch&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">io&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">StringIO&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">divide&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readline&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">gather&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readline&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">input&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">())))&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">test_divide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">monkeypatch&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">monkeypatch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sys.stdin&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StringIO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">divide&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">test_gather&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">monkeypatch&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">monkeypatch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">setattr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sys.stdin&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">StringIO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1 2 3&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">gather&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.pytest.org/en/latest/monkeypatch.html#simple-example-monkeypatching-functions">Monkeypatching/mocking modules and environments&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/38723140/i-want-to-use-stdin-in-a-pytest-test">I want to use stdin in a pytest test&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/GenevieveBuckley/efd16862de9e2fe7adfd2bf2bef93e02">https://gist.github.com/GenevieveBuckley/efd16862de9e2fe7adfd2bf2bef93e02&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Machine Learning Casual Talks # 12 を開催しました</title><link>https://shunyaueta.com/posts/2020-06-13/</link><pubDate>Sat, 13 Jun 2020 23:06:44 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-06-13/</guid><description>
&lt;p>Machine Learning Casual Talks 第 12 回を開催しました。
前回から少し開きがあり、7 ヶ月ぶりの開催となりました。&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/172550/">https://mlct.connpass.com/event/172550/&lt;/a>&lt;/p>
&lt;p>今回の個人的なテーマはベストプラクティスとアンチパターンです。&lt;/p>
&lt;ul>
&lt;li>@keigohtr さんには、AWS の各種サービスを使った機械学習実験基盤をアベジャの適用事例と重ね合わせて、説得力のあるベストプラクティスを語っていただきました。&lt;/li>
&lt;li>@yuzutas0 さんには、機械学習の前に、データのマネジメントがいかに必要かを語っていただきました。建設的に改善していこうぜという未来が語られていて、個人的にお話を依頼した甲斐がありました&lt;/li>
&lt;li>同僚の @overs_5121 さんには、&lt;a href="https://developers-jp.googleblog.com/2020/04/tensorflow-lite.html">メルカリ : TensorFlow Lite で、気付きにくい便利機能をユーザーに提唱
&lt;/a> の裏話や、適用までの泥臭い事例をお話していただきました。&lt;/li>
&lt;/ul>
&lt;p>登壇者の皆様、改めて登壇の依頼をご快諾いただきありがとうございました。&lt;/p>
&lt;p>また、コロナウイルスの影響もあり試験的ですが完全なオンライン開催となりました。
配信面は今回は完全に @chezou さんに頼らせていただきました。
プロフェッショナルな配信ありがとうございました！
配信のベストプラクティスや様子などは、こちらを御覧ください&lt;/p>
&lt;p>&lt;a href="https://chezo.uno/post/google-meet%E3%81%A8youtube-live%E3%81%A6%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%9F%E3%83%BC%E3%83%88%E3%82%A2%E3%83%83%E3%83%95%E3%81%AE%E9%85%8D%E4%BF%A1%E3%82%92%E3%81%97%E3%81%9F/">Google Meet と YouTube Live でオンラインミートアップの配信をした&lt;/a>&lt;/p>
&lt;h2 id="勉強会の資料と動画">勉強会の資料と動画&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://mlct.connpass.com/event/172550/presentation/">資料ページ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/5tq7IY_XF3w">Machine Learning Casual Talks #12 - YouTube&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>所感としては、以前から配信 NG の発表以外は積極的に YouTube で公開していたのだが、参加者の皆様からはオンライン開催でありがたいと声が大きく、個人的に驚きました。&lt;/p>
&lt;p>自分が思うに、オンライン参加も配信動画を後から見るのも、リアルタイムで質問ができないこと以外は大きな差異が無いと思っていたのだが、参加者側からすると大きく異なるようで新鮮だった。&lt;/p>
&lt;h3 id="オンライン勉強会開催側のコツ">オンライン勉強会開催側のコツ&lt;/h3>
&lt;p>最低でも&lt;/p>
&lt;ul>
&lt;li>配信者&lt;/li>
&lt;li>司会者&lt;/li>
&lt;li>配信の監視を行う監視者&lt;/li>
&lt;/ul>
&lt;p>の 3 役がいないとオンライン開催は難しいことがわかった&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-06-13/images/1.png" alt="ライブ配信統計値">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-06-13/images/2.png" alt="ライブ配信視聴者数">&lt;/p>
&lt;p>ライブ配信視聴者数は、以下のような遷移となりました。
500 人参加申込みがあり、最大視聴者数が 252 人とギリギリ 5 割を超えました。&lt;/p>
&lt;p>今までのオフラインでの開催は 6-8 割くらいだったので、それと比較すると上出来かなと思います。
また、オンライン開催はオフライン開催と比べて会場の確保コストや懇親会おじさんの発生などを抑えられるので、その点もありがたかったです。
オフライン開催だと、会場撤収が効率的に終わっても 22:00、家に帰ると 23:00 なので、イベント主催者にとっても開催しやすい気がしますね。&lt;/p>
&lt;p>改善点としては、質問の数が少なめだったことと、オフラインでの交流を補うような要素(パネルディスカッションなど）をもう少し入れたいなと思っています。&lt;/p>
&lt;p>オンライン開催は、開催コストが高くて継続できないというイベント主催者あるあるの問題を解決する一つのきっかけにもなるんじゃないのかなぁと思いました。&lt;/p>
&lt;p>では、また次回の MLCT 開催をお待ち下さい!!&lt;/p></description></item><item><title>自走プログラマーを読み終えた</title><link>https://shunyaueta.com/posts/2020-05-10/</link><pubDate>Sun, 10 May 2020 17:13:34 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-05-10/</guid><description>
&lt;p>&lt;a href="https://amzn.to/2B3SxMq">自走プログラマー&lt;/a>を読み終えた。&lt;/p>
&lt;p>読み始めたきっかけとして、自分は機械学習エンジニアとして現在働いているが、できることの幅を広げるために最近はソフトウェアエンジニアとしてのスキルをもっと伸ばしたいと考えている。&lt;/p>
&lt;p>自走プログラマーは、Pythonを使ったアプリケーション開発のアンチパターンとベストプラクティスを例示して学ぶことができる書籍で、今回の自分の状況にすごくフィットしていて楽しく学習することができた。&lt;/p>
&lt;p>Python独特のはまりどころは、&lt;a href="https://amzn.to/3fi7Xvp">Kindle: The Hitchhiker’s Guide to Python&lt;/a>, &lt;a href="https://docs.python-guide.org/">The Hitchhiker’s Guide to Python&lt;/a> でも数多く参照されていて、こっちも後から読んでおきたいなと思いました。&lt;/p>
&lt;p>次は、ちゃんとした Pythonista になれるように、&lt;a href="https://amzn.to/3cWCTzU">Fluent Python&lt;/a> を読みます。@ynqa さん、以前この本を教えて下さり、ありがとうございました。&lt;/p>
&lt;p>長らく積ん読になっていますが、毎日読み進めていきます。&lt;/p>
&lt;p>20歳頃の寝る間を惜しんで、ウェブアプリを開発していたときのワクワク感が徐々に蘇ってきた気がしています。&lt;/p>
&lt;p>ある程度書けるようになってきたら、なにかアプリとか作って公開したいなと思っています！&lt;/p></description></item><item><title>ソフトウェア開発における Upstream と Downstream の意味</title><link>https://shunyaueta.com/posts/2020-04-27/</link><pubDate>Mon, 27 Apr 2020 23:55:42 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-27/</guid><description>
&lt;ul>
&lt;li>Upstream
&lt;ul>
&lt;li>Upstream はそのシステムが依存しているジョブ&lt;/li>
&lt;li>Upstream のデザインが変わることで、システムも影響をうける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Downstream
&lt;ul>
&lt;li>Downstream はそのシステムが影響を与える影響を与える部分&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>例えば、Web Application などでは、データベースは Downstream となる&lt;/p>
&lt;p>e.g. &lt;code>Web service→ Databese&lt;/code> という流れでデータが作成される&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://reflectoring.io/upstream-downstream/">https://reflectoring.io/upstream-downstream/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://softwareengineering.stackexchange.com/questions/71080/what-does-downstream-upstream-design-mean/83686">https://softwareengineering.stackexchange.com/questions/71080/what-does-downstream-upstream-design-mean/83686&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Upstream_(software_development)">https://en.wikipedia.org/wiki/Upstream_(software_development)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Downstream_(software_development)">https://en.wikipedia.org/wiki/Downstream_(software_development)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Pythonの関数のデフォルト引数はmutable(上書きされる)</title><link>https://shunyaueta.com/posts/2020-04-26/</link><pubDate>Sun, 26 Apr 2020 12:04:13 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-26/</guid><description>
&lt;p>例えば以下のように、デフォルト引数で初期化を行い、文字列を追加する関数があるとする。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]):&lt;/span>
&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hoge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">values&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>期待する振る舞いとしては。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]):&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hoge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">values&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>と関数呼び出しごとに、&lt;code>values&lt;/code> は空のリストに初期化されるので上記のように返ってきてほしい&lt;/p>
&lt;p>だが、実際に表示されるのは&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]):&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hoge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">values&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>である。&lt;/p>
&lt;p>実際に内部で何が起きているかというと&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]):&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hoge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">values&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">pinfo&lt;/span> &lt;span class="n">append_to&lt;/span>
&lt;span class="n">Signature&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="n">Docstring&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">no&lt;/span> &lt;span class="n">docstring&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">~/&amp;lt;&lt;/span>&lt;span class="n">ipython&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4530&lt;/span>&lt;span class="n">a91351ab&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">function&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">25&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">pinfo&lt;/span> &lt;span class="n">append_to&lt;/span>
&lt;span class="n">Signature&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">Docstring&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">no&lt;/span> &lt;span class="n">docstring&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">~/&amp;lt;&lt;/span>&lt;span class="n">ipython&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4530&lt;/span>&lt;span class="n">a91351ab&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">function&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">27&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">28&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">pinfo&lt;/span> &lt;span class="n">append_to&lt;/span>
&lt;span class="n">Signature&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">Docstring&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">no&lt;/span> &lt;span class="n">docstring&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">~/&amp;lt;&lt;/span>&lt;span class="n">ipython&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">23&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">4530&lt;/span>&lt;span class="n">a91351ab&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">function&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>が起きている。
&lt;code>pinfo&lt;/code> は ipython 上で、オブジェクトの情報が確認できる便利コマンドです。
関数呼び出しごとに、デフォルト引数の values が上書きされていっていることがわかります。
これは、Python のデフォルト引数が、関数が定義されたときのみ評価され、毎回毎回評価されるわけではない。(Ruby は評価される)
ここでわかるのは、mutable&lt;/p>
&lt;h2 id="対処方法">対処方法&lt;/h2>
&lt;p>関数が呼び出されるごとに新しいオブジェクトを作成する。
何も設定されていないときは、デフォルト引数を使うことで検知する&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hoge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">values&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hoge&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">values&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">35&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">35&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">pinfo&lt;/span> &lt;span class="n">append_to&lt;/span>
&lt;span class="n">Signature&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Docstring&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">no&lt;/span> &lt;span class="n">docstring&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">~/&amp;lt;&lt;/span>&lt;span class="n">ipython&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">8e047&lt;/span>&lt;span class="n">f793784&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">function&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">Out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Hoge&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">In&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="n">pinfo&lt;/span> &lt;span class="n">append_to&lt;/span>
&lt;span class="n">Signature&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">append_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Docstring&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">no&lt;/span> &lt;span class="n">docstring&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">File&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">~/&amp;lt;&lt;/span>&lt;span class="n">ipython&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">34&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">8e047&lt;/span>&lt;span class="n">f793784&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">function&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>想定通りの動きになった&lt;/p>
&lt;h2 id="ref">Ref&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python-guide.org/writing/gotchas/">https://docs.python-guide.org/writing/gotchas/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://moqada.hatenablog.com/entry/20090206/1233935560">http://moqada.hatenablog.com/entry/20090206/1233935560&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[抄訳] The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction</title><link>https://shunyaueta.com/posts/2020-04-25/</link><pubDate>Sat, 25 Apr 2020 01:35:20 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-25/</guid><description>
&lt;p>&lt;a href="https://shunyaueta.com/posts/2020-04-19/">[抄訳] What’s your ML test score? A rubric for ML production systems&lt;/a>で紹介した論文の続編があったので読んでみました。&lt;/p>
&lt;ul>
&lt;li>&lt;em>注意)この翻訳記事は原著論文の著者陣からレビューはされていません&lt;/em>&lt;/li>
&lt;li>&lt;em>Shunya Ueta, are providing a translation and abridgment, which has not been reviewed by the authors.&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="change-log">Change log&lt;/h2>
&lt;ul>
&lt;li>2021/02/03
&lt;ul>
&lt;li>ML Test Score を簡単に計算できる&lt;a href="https://docs.google.com/spreadsheets/d/1xDts6-rzSApFJ6yg9mqpLx8CtSrrTCJAsnbfCuRHjvI/edit?usp=sharing">Google Spread Sheets&lt;/a> を公開&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2020/06/24
&lt;ul>
&lt;li>著者の Eric Breck さんに連絡をし、抄訳の公開を快諾していただきました。ありがとうございます。&lt;/li>
&lt;li>完全な citation 情報を追記しました。&lt;/li>
&lt;li>この翻訳記事が著者のレビューを受けていないことを追記しました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="citation">Citation&lt;/h2>
&lt;hr>
&lt;p>&lt;a href="https://research.google/people/EricBreck/">Eric Breck&lt;/a>, &lt;a href="https://research.google/people/105277/">Shanqing Cai&lt;/a>, Michael Salib,
. &lt;a href="https://research.google/pubs/pub46555/">The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction&lt;/a>. In 2017 IEEE International Conference on Big Data (Big Data) (pp. 1123-1132). IEEE.&lt;/p>
&lt;hr>
&lt;p>大規模なオフラインの機械学習実験は注目されているが、反対にオンラインでの信頼性がある機械学習システムの開発は難しく、技術的負債が溜まりやすい&lt;/p>
&lt;p>&lt;code>図1&lt;/code> では、左側が伝統的なシステムのテストとモニタリング、右側は、機械学習システムのテストとモニタリングである
機械学習システムのテストとモニタリングが複雑になる要因として、コードだけではなく、動的に決定されるデータの質とモデルの多種多様な設定に依存するからである&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-04-25/images/fig-1.png" alt="Figure 1 in paper">&lt;/p>
&lt;h2 id="tl-dr">TL; DR;&lt;/h2>
&lt;ul>
&lt;li>機械学習システムの信頼性を評価する&lt;code>28&lt;/code>の実行可能なテスト項目とスコアリング方法を提案する。&lt;/li>
&lt;li>Google 内部の調査では、調査対象の 80%のチームが 28 のテスト項目の１つさえも行っていなかった。。(エンジニアリングに長けている Google 内部でさえも十分に行われてはいない)&lt;/li>
&lt;li>もし手持ちの機械学習システムの ML Test Score を計算したい場合は、簡単に計算可能な &lt;a href="https://docs.google.com/spreadsheets/d/1xDts6-rzSApFJ6yg9mqpLx8CtSrrTCJAsnbfCuRHjvI/edit?usp=sharing">Google Spread Sheets&lt;/a> を公開します。
&lt;ul>
&lt;li>閲覧権限のみ与えているので、&lt;code>File-&amp;gt; Make a copy&lt;/code> を選択して手元にコピーしてお使いください。&lt;/li>
&lt;li>&lt;a href="https://docs.google.com/spreadsheets/d/1xDts6-rzSApFJ6yg9mqpLx8CtSrrTCJAsnbfCuRHjvI/edit?usp=sharing">ML Test Score template - Googpe Spread Sheets&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="test-for-data-and-features">TEST FOR DATA AND FEATURES&lt;/h2>
&lt;ul>
&lt;li>Data 1: 期待する特徴量は全てスキーマで管理され、読み込み可能か?
&lt;ul>
&lt;li>How: このスキーマは学習データの統計値を計算することに有用である。これらを可視化することで事前のバイアスを検知したり、Fasets&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>などのツールを用いた統計値の可視化もとても有用である&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 2: 全ての特徴量は有用か?
&lt;ul>
&lt;li>全ての特徴量は、追加すればするほどコストになる。独立した全ての特徴量は有用だろうか?&lt;/li>
&lt;li>How: 特徴量削除や目的変数と特徴量の相関などを見てみよう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 3: 特徴量のコストは高くないか?
&lt;ul>
&lt;li>How: 推論速度や RAM の使用率だけを見るのではなく、その特徴量に関連するデータの依存先や不安定性なども考慮する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 4: 特徴量は要件に準拠しているか?
&lt;ul>
&lt;li>一般的には、機械学習システムにデータが送られる際には単一のリソースからデータを取得することが前提ですが、実験の際には知らずしらずのうちに精度を向上させるために特徴量をどんどん追加してしまいがちである&lt;/li>
&lt;li>How:  学習データのリソースがプロダクション環境から逸脱していないか監視する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 5: データパイプラインは適切なプライバシーコントロールはされているか?
&lt;ul>
&lt;li>How: データパイプライン構築の時には権限管理を厳密に行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 6: 新しい特徴量は素早く追加可能か?
&lt;ul>
&lt;li>新しいアイデアを素早く試せるチームは強い。世界規模、またはトラフィックが多い機械学習システムでも、1-2 ヶ月で新しい機能を追加することが可能である
の。&lt;code>Data 5&lt;/code> と相反する形にはなっている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 7: 全ての特徴量生成コードはテストされているか?
&lt;ul>
&lt;li>特徴量生成のコードは一見シンプルでユニットテストなどは必要そうに見えないかもしれないが、ここで発生するバグは発見することはとても難しい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="tests-for-model-development">TESTS FOR MODEL DEVELOPMENT&lt;/h2>
&lt;ul>
&lt;li>Model 1: 全てのモデルはレビューされ、リポジトリに格納されている
&lt;ul>
&lt;li>バージョン管理され、過去の実験との比較や再現実験などを可能にする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model 2: オフラインの疑似指標はオンラインメトリクスに相関しているか?
&lt;ul>
&lt;li>How: A/B テストで意図的にモデルのスコアを劣化させてテストする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model 3: 全てのハイパーパラメータはチューニングされているか?
&lt;ul>
&lt;li>学習率・NN の層の数・次元数など数多くのハイパーパラメータがあり、予測精度に大きな影響を与える&lt;/li>
&lt;li>How: グリッドサーチや確率的なパラメータチューニングをおこなう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model 4: 古くなった(陳腐)モデルの影響は把握されているか?
&lt;ul>
&lt;li>例えば学習パイプラインが失敗し、更新されなかったモデルをここで古びたモデルと呼ぶ。モデルが更新されないことでどれくらい予測精度に影響を与えるか理解することで、再学習の適切な期間も決定できる。ほとんどのモデルは外部世界の要因により更新しなければならない。&lt;/li>
&lt;li>How: 小規模な A/B テストにより、新モデルと旧モデルを比較することでモデルのリフレッシュネスがどれくらい重要か計測することができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model 5: 単純なモデルは必ずしも良くはない
&lt;ul>
&lt;li>少ない特徴量で単純な線形モデルがベースラインとして使われることがあるが、パイプライン構築のコストとその利益のトレードオフを常に考えていくべきである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model 6: 全ての重要なデータの部分集合でもモデルの質は十分なものになっているか?
&lt;ul>
&lt;li>How: 多様な基準でデータを抜き出し、モデルの精度が変化しないかを確認する。例えば、時間帯や性別、年齢などの基準でデータを抜き出してもモデルの精度は同一か？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model 7: 包括性を考慮したモデルになっているか?
&lt;ul>
&lt;li>機械学習システムでは Fairness などが最近課題となっている。例えば、Bolukbasi らは文字埋め込みにおいて性別の差が予測において不適切な影響を発生させていることがわかった。&lt;/li>
&lt;li>How: 特定のグループ間で、実験をおこない結果が異なっていないか確認する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="tests-for-ml-infrastructure">TESTS FOR ML INFRASTRUCTURE&lt;/h2>
&lt;ul>
&lt;li>Infra 1: 学習は再現性があるか?
&lt;ul>
&lt;li>理想としては、同じデータで学習を行った際には同じ結果が期待される。しかし不幸なことに非凸な問題(e.g. Deep Learning)などの学習は再現不可能なことがめずらしくない。シードの固定などをしても必ず再現性が担保されるわけでもない&lt;/li>
&lt;li>How: モデルのアンサンブルなどは有効である&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Infra 2: モデルの仕様はユニットテストされているか?
&lt;ul>
&lt;li>ユニットテストは外部依存性を排除し、素早く実行可能でなければならない。だが実際はモデルの学習には非常に時間がかかり、計算機資源も必須である&lt;/li>
&lt;li>How: まずモデルのテストは&lt;code>APIとしてのテスト&lt;/code>と&lt;code>アルゴリズムとして正しいかのテスト&lt;/code>の２つに分解して考える。(著者が執筆当時 OSS としての公開を計画中らしい&amp;hellip;&lt;a href="https://research.google/pubs/pub47967/">DATA VALIDATION FOR MACHINE LEARNING&lt;/a> を指しているのだろうか？)&lt;/li>
&lt;li>学習データをフルに活用したモデルの開発は律速になりがちである。そのためベストプラクティスとしては、ランダムに生成した入力データに対して、一つのステップで勾配降下法が上手く動いているかを確認するなどがある。また、モデルの学習過程でチェックポイントを作成しておくことで、学習ジョブが死んだとしても復旧可能になる&lt;/li>
&lt;li>機械学習アルゴリズムが正しいかどうかのテストとして、例えばアルゴリズムの特定の部分の計算が正しく実行されているかを確認することができます。別の解決策としては、数回の反復のみを計算し損失関数が減少しているかどうかを確認する。&lt;/li>
&lt;li>また、モデルのテストを行う際には&lt;code>黄金のテスト&lt;/code>を避けるべきである。例えば、部分的に学習したモデルと前回のモデルの結果を比較するのはメンテナンスすることが非常に難しい。そして上記のテストはテストが失敗した時に洞察をすることが難しい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Infra 3: 全ての機械学習パイプラインは結合テストされているか?
&lt;ul>
&lt;li>完璧な機械学習パイプラインとは主に、学習データの構築 → 特徴生成 → モデル学習 → モデル検証 → サービングシステムへのデプロイから構成される。単一のソフトウェアエンジニアチームは、特定の箇所にのみ集中して開発を行う。そして、その開発によりどこかが壊れパイプライン全体が動かなくなることも珍しくはない。そのため、完全に自動化された結合テストを定常的に行うべきである。&lt;/li>
&lt;li>How: 結合テストをモデルまたはサービングのリリース前に CI として実行する。結合テスト全体がうまく言っているかを目的として高速な結合テストのために、部分的な学習データやシンプルなデータを扱うことを推奨する。また、別途プロダクションに限りなく近づけたミラーリング環境での結合テストも行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Infra 4: モデルの品質は、サービングする前に検証されているか?
&lt;ul>
&lt;li>この検証段階で、モデルの受け入れ判定を行う&lt;/li>
&lt;li>How: 同じ検証データを用いて、モデル間の比較を行う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Infra 5: 一つのサンプルに対する学習、サービングの段階ごとの計算をデバッグ可能か?
&lt;ul>
&lt;li>モデルの学習を段階ごとに観測する。特定のツールを使うことで観測可能である。例: &lt;a href="https://research.google/pubs/pub45789/">TensorFlow Debugger&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Infra 6: カナリーリリースによって、モデルはプロダクション環境下で検証されているか?
&lt;ul>
&lt;li>オフラインテストをいくら広範囲に行ったとしても、プロダクション環境下でのパフォーマンスを保証してくれない。現実世界では、予測不可能な問題が起きる。そのため、常にプロダクション環境下への新モデルのリリースはリスクを生じる。&lt;/li>
&lt;li>一つの再帰的な問題として、カナリーはモデルの生成物とインフラのミスマッチを把握するのに有用である。モデリングのコードは、サービングのコードと比較して高頻度に変更される。新しいモデリングのコードで、サービングのシステムが動かないことは避けておきたい&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2020-04-25/images/fig-2.png" alt="Figure 2 in paper">&lt;/li>
&lt;li>図 2 で示すように、Day1 のモデルから Day2 のモデルに更新された際に、そのオペレーターに対応していないサービングシステムが混在することもあり得る&lt;/li>
&lt;li>How: ミスマッチの問題を解決するために、一つの取組みとしてプロダクション環境下のサービングのバイナリとインフラに対して新モデルの読み込みを行い、予測ができるかの検証を行う。また一般的にモデルのマイグレーションはカナリリリースにより、新モデルの挙動が問題ないことを確認し、徐々に新モデルの比率を上げて、旧モデルを減らす。そして最終的に旧モデルをゼロにすることでマイグレーションを完了させる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Infra 7: モデルは、安全かつ高速に前のバージョンに戻せるか?
&lt;ul>
&lt;li>モデルのロールバックが可能かどうかは主にインシデント発生時の対応方法として有用である。モデルのロールバックは、平常時にも常日頃から備えておくべきである。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="monitoring-tests-for-ml">MONITORING TESTS FOR ML&lt;/h2>
&lt;p>あなたの機械学習システムが、リリース時に正しく動いたかどうかだけではなく、機械学習モデルが正常に稼働し続けることを把握することは非常に重要です。
標準的なアプローチとしては、ダッシュボードを作成し、関連するグラフや統計情報を可視化し、確認できるようにします。そして、その値が大きく動いたときには自動的に担当のチームにアラートが飛ぶようにします。
機械学習システムでは、サービングシステム、学習パイプライン、入力データの監視が非常に重要です。
また、インシデントの対応として機械学習システムが主に行うのはシステムのロールバックではなく、モデルのロールバックである。&lt;/p>
&lt;ul>
&lt;li>Monitor 1. 依存先が変化した結果は通知されるか?
&lt;ul>
&lt;li>機械学習システムは、入力データに強く依存する。学習データや推論時に入力データの傾向や使用が変化した際にも把握しておかないといけない&lt;/li>
&lt;li>How: 開発者チームは、モデルが使用するデータを生み出す依存先をリストアップし依存先に対するアナウンスなどを常に把握しておく。また、依存先のオーナーは、そのデータが機械学習システムに使われていることを知っておく必要もある。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor 2. 学習とサービングの入力時、両者は普遍性を保っているか？
&lt;ul>
&lt;li>学習データとサービングデータの一貫性を監視することは非常に重要です。機械学習のモデルの振る舞いの異変を把握することは難しいですが、データの普遍性が保たれていないことはまず第一にできる取り組みです。&lt;/li>
&lt;li>How: スキーマ管理されたデータを取り扱うようにし、その監視も行う。例えば、&lt;a href="https://www.tensorflow.org/tfx/guide/tfdv#training-serving_skew_detection">TensorFlow Data Validation&lt;/a> では、スキーマのズレを監視することが可能である。また、このアラートの閾値は適切に設定しないと、Google 内の機械学習システム開発者チームはこのアラートを無視をするようになった逸話もある&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor 3. 学習時とサービング時の特徴量計算は同一か？
&lt;ul>
&lt;li>同一の入力に対しても学習時と推論時の一貫性を保っていない、&lt;code>training / serving skew&lt;/code>と呼ばれる問題がある。&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2020-04-25/images/fig-3.png" alt="Figure 3 in paper">&lt;/li>
&lt;li>How: この問題を解決するためには、実際のサービングシステムへのトラフィックを保管することが肝心である。サービングシステムへの入力データを保管することで、特徴量生成の比較も容易に行うことができる。確認すべき項目として、特徴量は、必ず学習時と推論時は同一でなければならない。&lt;/li>
&lt;li>別のアプローチとしては、学習データの統計値と推論時に入力されたデータの統計値を比較することも有用なアプローチである。典型的な統計値としては、最大・最小・平均・欠損値の割合などが挙げられる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor 4. モデルは極端に古い状態ではないか？
&lt;ul>
&lt;li>&lt;code>Model 4&lt;/code>でも述べたが、モデルの古さは予測精度において重要な指標である。なので、プロダクションで運用されているモデルがどれくらい古いかは監視する必要しておこう。以外にも更新頻度の低いモデルはメンテナンスコストが高い。想像してみよう、例えば一人のエンジニアが手作業で年に 1,2 回再学習されるモデルがあったとする。もしそのエンジニアがチームを離れることになれば、このモデルの再学習の再現は困難になるだろう。たとえ、ドキュメントなどを残していても時間経過により、それも意味を成さなくなる。&lt;/li>
&lt;li>How: 週次、もしくはもっと頻繁にモデルの再学習パイプラインを実行する。プロダクション環境下のモデルの古さは常に監視し、どのレベルの古さが予測精度に影響を与えるかを基準にアラート条件を策定する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor 5. モデルは数値的に安定しているか?
&lt;ul>
&lt;li>How: モデルから NaN や無限の値が出力されていないか監視する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor 6. このモデルは学習速度や、サービングレイテンシー、スループット、RAM 使用率に影響を与えるようなメモリリークやデグレーションなどは発生していないか?
&lt;ul>
&lt;li>DNN の学習は、計算コストが非常に高く計算機コストの増大はスケーリングのボトルネックにもなる。&lt;/li>
&lt;li>How: 計算使用の監視は、一般的なモニタリングでも重要な指標です。コードのコンポーネントやバージョンごとにモニタリングをするだけではなく、データやモデルも軸にした監視を行う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor 7. サービングシステムへの予測品質は測定可能か？
&lt;ul>
&lt;li>How: データの変更や設定の変更などによる予測品質が低下していないことを確認するためのいくつかの方法を説明する&lt;/li>
&lt;li>例えば、特定のタスクなどでは、データのラベルが即座に手に入る（広告クリックなど）。このラベルデータを使って、実際のサービングシステムの予測性能をほぼリアルタイムに算出可能である。このようにヒトを介したモデルの評価機構などは Human In The Loop ともよばれる。&lt;/li>
&lt;li>この仕組によって、定期的に学習のための新たなデータが取得できるようになる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="文化の変化">文化の変化&lt;/h2>
&lt;p>技術的負債は定量化が難しい。また負債を返済するための優先順位付けもやどれくらい改善されたかの測定も難しい。ここで提案した試験項目は定量化した機械学習のテストスコアを提供する。これは、測定可能かつ改善可能なものである。
この指標は、機械学習システムの開発者はどこを改善すればより信頼性のある機械学習システムを作ることができるかのガイドラインとなる。この方針は Google の &lt;a href="https://mike-bland.com/2011/10/18/test-certified.html">Test Cerfied&lt;/a>の仕組みを基に発案され、信頼性向上のためのはしごを提供する。&lt;/p>
&lt;ul>
&lt;li>ML Test Score の計算方法
&lt;ul>
&lt;li>手動で確認され、ドキュメントに結果をまとめ配布されている場合は、&lt;code>0.5&lt;/code>ポイント&lt;/li>
&lt;li>反復的に自動的に検証されていたら&lt;code>1.0&lt;/code>ポイント&lt;/li>
&lt;li>4 つの章で、独立して各ポイントの合計を計算&lt;/li>
&lt;li>各章のスコアを集計し、最小の値を最終的な ML Test Score とする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>なぜ最小の値を選択する理由として、全ての章が重要であり、すべての章を考慮したスコアを計算するべきだからである。また全てのテスト項目は同一の価値を持つ。
以下に、ML Test Score からその機械学習システムがどのレベルに達しているかの説明を示す&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ポイント&lt;/th>
&lt;th align="center">説明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td align="center">プロダクションレベルというよりも、研究プロジェクトの一種&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(0,1]&lt;/td>
&lt;td align="center">総合的にテストはされていないが、可能な限り信頼性向上に努めている&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(1,2]&lt;/td>
&lt;td align="center">基礎的なプロジェクトの要求事項は通過した。しかし、信頼性向上のためのさらなる投資が必要とされる&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(2,3]&lt;/td>
&lt;td align="center">適切なテストがされている、だが更に自動化の余地が残っている&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(3,5]&lt;/td>
&lt;td align="center">信頼性の高い自動化されたテストとモニタリングレベル。ミッションクリティカルな状況でも問題はない&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;5&lt;/td>
&lt;td align="center">卓越したレベルの機械学習システム&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rubic-の現実世界の機械学習システムへの適用と実際に起きたこと">Rubic の現実世界の機械学習システムへの適用と実際に起きたこと&lt;/h2>
&lt;p>我々は Google 内部の機械学習に携わるチームのために ML Test Score Certified Program を開発した。
36 チームにインタビューや Rubric を通じた評価を行い、その統計値を以下の図にまとめた。
&lt;img src="https://shunyaueta.com/posts/2020-04-25/images/fig-4.png" alt="Figure 4 in paper">&lt;/p>
&lt;h3 id="rubric-の重要性">Rubric の重要性&lt;/h3>
&lt;p>Google 内の事例では、グローバル・サービスがローカライズされた際に、特定の単一の国に対して粗悪な予測を提供していないかどうかのチェックリストとして役立ったり、各機械学習システムの評価の標準化の普及に役立った。最終的に ML Test Score が普及をしていく中で、あるチームは &lt;code>training / serving skew&lt;/code> の危険性を認識し、特徴生成の部分にテストを実施したり、手動テストを自動テストに切り替えていったりしていきました。&lt;/p>
&lt;h3 id="依存性の問題">依存性の問題&lt;/h3>
&lt;p>機械学習システムのデータの依存性の問題として、開発チームが Upstream サービスから提供されるデータの完全なる理解のオーナーシップを失ってしまう傾向もあります。&lt;/p>
&lt;h3 id="フレームワークの重要性">フレームワークの重要性&lt;/h3>
&lt;p>結合テストは、サービングシステムには適合されていることが多いが、学習パイプラインに適用されていることは稀である。それは、アドホックなスクリプトや手動実行に依存している部分が多いからである。&lt;/p>
&lt;p>モデルのカナリリリース(Infra 6) は、頻繁に多くのチームで既に実装されていた。だがカナリリリースに面白い２つの興味深い問題が浮き彫りになった。&lt;/p>
&lt;ul>
&lt;li>カナリリリースにより、サービングできない問題や数値的にモデルが安定していないなど多くの問題が見つかるが、実際には単体テストや結合テストで発見することが可能である&lt;/li>
&lt;li>既存のフレームワークでカナリリリースを実行しているチームは、好意的な印象をカナリリリースに対してもっているが、独自実装が必要だったチームは二度とやりたくないと言っていた&lt;/li>
&lt;/ul>
&lt;p>おそらく、一番重要かつ、最も実装されていないテストの一つが&lt;code>training / serving skew (Moniro 3)&lt;/code>だ。実際この問題は非常に発見が難しいが、&lt;a href="https://research.google/pubs/pub46484/">TFX&lt;/a> などのフレームワークによりこの課題を解決可能である。&lt;/p>
&lt;h3 id="rublic-の評価検証">Rublic の評価検証&lt;/h3>
&lt;p>Google 内で開発チームに対して、この指標が有用かそうでないかの評価を行った。
興味深い結果として、画像や音声のみを扱うチームは Data の章は多くの部分が適切ではないと答えた。
だが、人的検査や&lt;a href="https://arxiv.org/abs/1602.04938#:~:text=%22Why%20Should%20I%20Trust%20You%3F%22%3A%20Explaining,the%20Predictions%20of%20Any%20Classifier&amp;amp;text=In%20this%20work%2C%20we%20propose,model%20locally%20around%20the%20prediction.">LIME&lt;/a>などの解析は音声・画像のみのデータでも重要だと確認できた。
例えば、そのような検査は分布の不均衡や不確かな影響を受けている学習データを明らかにした。&lt;/p>
&lt;p>教師あり学習は、ラベル付きデータを必要とする。しかし、特定のドメインではそもそもデータセットが手に入らなかったり、取得コストが非常に高い。
あるグループはとても巨大で多様性があるデータセットを所有しており、人力でラベルを付けていくことは不可能に見えた。彼らは、ヒューリスティックなシステムを構築して、それを活用して機械学習モデルを構築しました。（機械学習の専門家はこの学習モデルは狂っていてうまくいくわけがないと言っていました）&lt;/p>
&lt;p>実際にヒトが評価を行ってみるとヒューリスティックシステムの性能は一貫して良いが、そこから学習した機械学習システムのほうが更に良かった。しかし、ここで基本的なヒューリスティックシステムに対する指標を我々が用意できていないことが露呈した。ラベリングコストが高いことは、学習モデルの定量的評価も難しいことを意味し、&lt;code>Model4&lt;/code>, &lt;code>Infra 4&lt;/code>の検査も困難になる。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://pair-code.github.io/facets/">https://pair-code.github.io/facets/&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://research.google/pubs/pub46484/">https://research.google/pubs/pub46484/&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>[抄訳] What’s your ML test score? A rubric for ML production systems</title><link>https://shunyaueta.com/posts/2020-04-19/</link><pubDate>Sun, 19 Apr 2020 22:18:10 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-19/</guid><description>
&lt;p>NIPS206 にて開催された &lt;a href="https://sites.google.com/site/wildml2016nips/">Reliable Machine Learning in the Wild - NIPS 2016 Workshop (2016)&lt;/a> という、&lt;code>現実世界でどうやって信頼性の高い機械学習に取り組んでいくか&lt;/code>についてのワークショップがある&lt;/p>
&lt;p>ここで Google から発表された &lt;code>What’s your ML test score? A rubric for ML production systems&lt;/code> がとても面白く、身になるものが多かったのでメモがてら抄訳を残しておく&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://research.google/pubs/pub45742/">PDF&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://0586f9b3-a-62cb3a1a-s-sites.googlegroups.com/site/wildml2016nips/SculleySlides1.pdf?attachauth=ANoY7crr9fea9TxDl1EIyOScNG1yJSo3gBkHKOq5exLlPtetuZ_EiAKL3rJq7h17Nwcx82i0CSwmLWc97IQiQdTBODUaMhMm7CBrbpU7uQXx55Km8JFTLlOMIgFflPev0_chmj41VydTan6OjwAOfeQ_U5tRz7m-HHi0rKvumbALo74j5XV0NbPaXcQDbwInz3CdFaDamzvwOH7nn0V-DADxKf6Kqkv-SA%3D%3D&amp;amp;attredirects=0">Slide&lt;/a>&lt;/li>
&lt;li>発表動画もワークショップページにて公開されています。&lt;/li>
&lt;/ul>
&lt;h2 id="change-logs">change logs&lt;/h2>
&lt;ul>
&lt;li>2021-04-25
&lt;ul>
&lt;li>この原著論文の完全版になっている論文の抄訳を新たに公開しています。&lt;/li>
&lt;li>&lt;a href="https://shunyaueta.com/posts/2020-04-25/">[抄訳]: The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="概略">概略&lt;/h2>
&lt;ul>
&lt;li>現実世界のプロダクションシステムで機械学習を使う際に、機械学習の研究実験と異なる、小さなもしくは小さくない問題がある&lt;/li>
&lt;li>テストとモニタリングはプロダクションレディの機械学習システムにとって必要不可欠&lt;/li>
&lt;li>しかし、どれくらいのテストとモニタリングをすれば十分と言えるのだろうか?&lt;/li>
&lt;li>この論文では、それらの問題を解決する &lt;code>ML Test Score&lt;/code> という基準を提案する&lt;/li>
&lt;/ul>
&lt;h2 id="introduciton">Introduciton&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Google 内で積み重ねたベストプラクティスをもとに、実行可能なテスト、そしてその機械学習システムがどのていどプロダクションレディなのかを示すスコアシステムを提案&lt;/p>
&lt;/li>
&lt;li>
&lt;p>このスコアは、機械学習を始めたばかるのチームからエキスパートがあつまるチームまで幅広く適用可能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注意: 一般的な Sofware Engineering のベストプラクティスは含んでいない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>そのかわり、学習とサービングのための Unit Test Coverage の計算方法など機械学習に必要不可欠な点を抑えている&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="ml-test-score-の計算方法">ML Test Score の計算方法&lt;/h3>
&lt;ul>
&lt;li>各テストの加点基準
&lt;ul>
&lt;li>1pt: 手動で実行し、その結果を文章として共有済&lt;/li>
&lt;li>2pt: CI に組み込まれ、自動的に反復実行済&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最終的な ML Score は以下の基準となる
&lt;ul>
&lt;li>&lt;code>0pt&lt;/code> : プロダクション向けというよりも研究プロジェクト&lt;/li>
&lt;li>&lt;code>1-2pt&lt;/code> : テストが少しはされているが、プロダクションではもっと深刻な罠がある可能性あり&lt;/li>
&lt;li>&lt;code>3-4pt&lt;/code> : 最初のプロダクションレディへの第一歩。しかし、さらなる投資が必要&lt;/li>
&lt;li>&lt;code>5-6pt&lt;/code> : 適切なテストがされているが、もっと自動化してみよう&lt;/li>
&lt;li>&lt;code>7-10pt&lt;/code> : 自動化されたテストとモニタリングが整備されている。重要なシステムでも適切なレベルに達している&lt;/li>
&lt;li>&lt;code>12+pt&lt;/code> : 卓越した自動化されたテストとモニタリング&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="前提条件">前提条件&lt;/h4>
&lt;ul>
&lt;li>システムアーキテクチャの前提として、生データから特徴量を抽出し、学習システムに流し込まれる。そして推論のためにサービングされ、その機能は顧客に影響を与える。また、ソースリポジトリや CI を通したテスト、実験のバージョン管理なども可能&lt;/li>
&lt;/ul>
&lt;h3 id="特徴量とデータセット">特徴量とデータセット&lt;/h3>
&lt;ul>
&lt;li>各特徴量の分布が期待した値になっているか?
&lt;ul>
&lt;li>一例として、特徴 A が 1 から５の値を持つ、または特徴 B の最も普遍期な値として「Harry」と「Potter」が全体の 10%を占める特徴に対して、上記の分布を検証するようなテストを書き、このテストが失敗すれば外部環境が変化しモデルの変更が余儀なくされていることが把握できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>各特徴と目的変数の関係性そして、ペアの相関が独立してあらわれるか?
&lt;ul>
&lt;li>個の特徴がモデルに使用される際に、&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>各特徴量のコストは検討されているか?
&lt;ul>
&lt;li>特徴量のコストとは、各特徴を追加した際の推論速度やメモリ使用率、データ依存  やその特徴に依存することによるシステムの不安定性などの検証&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>手動作業により適切でない特徴量は使用されていないか?&lt;/li>
&lt;li>データパイプラインの中で、プライバシーコントロールが考慮されているか?
&lt;ul>
&lt;li>Access Controll の権限は機械学習システムにも適切に付与されているか検証を行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロダクションモデルへ新しい特徴量を開発・追加するのに必要な日数はいくらか?
&lt;ul>
&lt;li>ちょっとしたアイデアをプロダクションで素早く検証できるチームは強い。速さはシステムの改善と外的変化の対応するために重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>学習とサービングで使用される特徴量生成に関わるコードすべてに対するテスト
&lt;ul>
&lt;li>軽視されがちだが、非常に重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="モデル開発">モデル開発&lt;/h3>
&lt;ul>
&lt;li>全てのモデルはコードレビューされリポジトリに格納されているか?
&lt;ul>
&lt;li>コードレビューは素晴らしい仕組みで、つまらないミスやインシデントに関わるような潜在的なものまで顕在化される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>オフラインの疑似指標とオンライン指標の関係性
&lt;ul>
&lt;li>1%の精度がお客さまの満足度にどうつながるのだろうか? (例: CTR) この検証は意図的に劣化させたモデルなどで小規模の AB テストを通して検証可能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>チューニング可能な各ハイパーパラメータのインパクト
&lt;ul>
&lt;li>グリッドサーチやベイズ最適化は、予測性能を向上させるだけではなく潜在的な信頼性の問題を明らかにできる。例えば、データ並列によるモデルの精度の変化は大きなインパクトである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデルのフレッシュネス
&lt;ul>
&lt;li>各モデルが、&lt;code>昨日&lt;/code> VS &lt;code>先週&lt;/code> VS &lt;code>過去一年&lt;/code> で学習されたとしてオンラインメトリクスへの影響がどう異なるか? 全てのモデルは外部要求により更新を余儀なくされる。この評価は注意深く行い、決定していくこと&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>単純なモデルをベースラインとした検証
&lt;ul>
&lt;li>線形モデルで少ない特徴量のモデルでベースラインを作成しよう。これは、大規模なパイプライン構築やコストのトレードオフの検証にとても効果的である&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>重要なデータを分割した際のモデル品質の検証
&lt;ul>
&lt;li>TBD: ちょっと理解しきれない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>暗黙的バイアスへの検証
&lt;ul>
&lt;li>例えば学習データの規模が小規模だと暗黙的なバイアスが掛かってしまう。(例：靴の認識で、男物の靴しか学習データが収集できず、女性の靴のデータがほぼ存在しないなど)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="機械学習インフラストラクチャ">機械学習インフラストラクチャ&lt;/h3>
&lt;ul>
&lt;li>モデルの学習の再現性検証
&lt;ul>
&lt;li>完全に同一データから、２つのモデル作成する。両者のスコア、サンプルに対する予測結果など大きな違いがないか検証を行う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデルの仕様に関する検証
&lt;ul>
&lt;li>有用な Assertion として、ロスの低下や学習ジョブがクラッシュしても復元可能など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>完全な機械学習パイプラインテストのための結合テスト
&lt;ul>
&lt;li>良い結合テストとは、もとのデータソースから特徴生成 → 学習 またはサービングまでをカバーする。結合テストは CI を通じて実行し、潜在的な問題をリリース前に発見するために新規リリースの前に検証される&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービング前のモデル品質テスト
&lt;ul>
&lt;li>サンプルデータを収集して、既知の正しい出力がされるように検証を行い、集計する。 前バージョンの機械学習モデルの予測結果を用いたバックテストも良い取り組みの一つ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一つのサンプル、もしくはバッチ学習をモデルに送り、学習から予測までの内部状態の変化の監視
&lt;ul>
&lt;li>少量のデータを流し、モデルの状態がどう変化するか監視するのは有効なアプローチである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>本番環境前のカナリアリリースによるテスト
&lt;ul>
&lt;li>モデリングのコードはサービングコードと違って高頻度に変化する。それにより以前のサービングコードが新しいモデルでは動かない危険性なども発生する。この検証は、モデルがプロダクション環境下で正常に読み込まれるか、正常に推論が稼働するかを確認する。新しいモデルは常に、小規模のトラフィックで検証されるべきである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>新しい機械学習モデルから、安全かつ素早く前の機械学習モデルに戻せるか?
&lt;ul>
&lt;li>モデルのローロバック手続きは、モデルの品質がリリースして良くなかった場合にとても便利である。以前の高性能なモデルに安全かつ素早く戻せる仕組みは非常に重要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="機械学習のためのモニタリング指標">機械学習のためのモニタリング指標&lt;/h3>
&lt;ul>
&lt;li>学習とサービングの両者にて、イベント発生時の不安定性の検証
&lt;ul>
&lt;li>モデルの学習時間の不安定性
&lt;ul>
&lt;li>モデルが頻繁に再学習されるような状況だと、特に問題である&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>サービング時間の不安定性
&lt;ul>
&lt;li>client 側の通信が停止したりすると、サービングされなくなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>学習時とサービング時でデータの不変性が保持されているかの検証
&lt;ul>
&lt;li>例: 特徴量 A と B は、常に同一の非零の要素数を持つ、特徴量 C は常に(0,100)の範囲内かなどを検証する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>学習したモデルと、サービングの特徴が完全に同一か
&lt;ul>
&lt;li>Training/ Serviing Skew とも呼ばれている (Concept Drift とも呼ばれています)&lt;/li>
&lt;li>学習したデータと本番のデータが時間経過、もしくは何らかの要因で異なってしまうことが原因です&lt;/li>
&lt;li>Training/Serving skew は &lt;a href="https://github.com/tensorflow/tfx/blob/master/docs/guide/tfdv.md">TFX&lt;/a> で説明されている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モデルは枯れているか?
&lt;ul>
&lt;li>使い古されたモデルの場合、パイプラインが停止しても何が原因か把握できる。例えば、重要なテーブルを作成する毎日実行されるジョブがストップしたとして、どんなアラートが良いだろうか? *TBD&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>学習、もしくはサービング時に&lt;code>NaN&lt;/code> または、 無限の値が発生への検証&lt;/li>
&lt;li>学習速度、サービング速度、スループットまたは RAM 使用率の検証
&lt;ul>
&lt;li>スケールする際に機械学習システムの計算機コストは悩みの種である。回帰テストなどで検証されるべきである&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>予測品質に関する回帰テスト
&lt;ul>
&lt;li>外部要因により、品質が下がる場合もあるが多くの場合は現実の問題を洗い出すことができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>翻訳でもし怪しい部分やもっとこうしたほうが良いというところがあれば、コメントか &lt;a href="https://twitter.com/hurutoriya">@hurutoriya&lt;/a> までご連絡ください&lt;/p>
&lt;p>実際読み込んで見ると、信頼性の高いモデルを届けるための秘訣が山盛りで、流石 Google 内のベストプラクティスをまとめたチェックリストですね
実際に開発している機械学習システムがあれば、この Test Score を当てはめてみてどの程度できているのか計測してみるが良さそう&lt;/p>
&lt;p>機械学習エンジニアとして働く自分として、興味のど真ん中にあるようなワークショップだが、2016,2017 年の二回しか開催されておらず、非常に悲しい
逆に言えば、すごく先進的なワークショップでこのワークショップが開催されていたのは凄いことだ&lt;/p>
&lt;p>自分が業務を通じて得た経験やベストプラクティスがすでに論文として世の中に公開されているのはすごく経験になるし、経験から学ぶのではなく歴史から学べるようにしていきたい！
なので、この Workshop 論文の発展形として、&lt;a href="https://research.google/pubs/pub46555/">The ML Test Score: A Rubric for ML Production Readiness and Technical Debt Reduction&lt;/a> が発表されているので読んでみる&lt;/p>
&lt;p>いや、実装寄りの勉強ばかりしていたけど気分転換にこういう知識体系に触れるのすごく楽しい&lt;/p></description></item><item><title>CourseraでHow Google does Machine Learning の講義を修了した</title><link>https://shunyaueta.com/posts/2020-04-18/</link><pubDate>Sat, 18 Apr 2020 00:59:23 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-18/</guid><description>
&lt;p>Coursera で&lt;a href="https://www.coursera.org/learn/google-machine-learning">How Google does Machine Learning&lt;/a> の講義を修了した&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-04-18/images/coursera.png" alt="coursera">&lt;/p>
&lt;p>&lt;a href="https://coursera.org/share/a4b6130f11ba4e96b80b16afe7277289">Certificate&lt;/a> はこちら&lt;/p>
&lt;p>7 割が、機械学習プロジェクトの始め方、実際のハマりどころなどが Google 内の実例などに基づいて語られていて面白かった。
特に、&lt;/p>
&lt;ul>
&lt;li>Secret Sourse&lt;/li>
&lt;li>ML Sutprise&lt;/li>
&lt;/ul>
&lt;p>の部分が、アンチパターンや成功方法などが語られていて実際に実務で機械学習をやっている自分としてはわかる~~~~と共感がすごくできて面白かった。初めて機械学習プロジェクトを担当する PM の方にも良い教材なのではと思いました。&lt;/p>
&lt;p>残りの 3 割は、qwiklab を使って、Notebook を立ち上げたり、Google BQ 叩いたり、Pandas, Google Cloud Vison API など各 ML 系の API を触るといった感じで、初心者過ぎて自分にはレベル感が少しあいませんでしたが、これも非エンジニアの方が機械学習ってこんな感じかと学ぶきっかけにはすごく良さそうです。&lt;/p>
&lt;p>最初の 7 割の部分は、改めてデータ利活用を前提にしたプロジェクトを牽引していく際にここで見つめ直す形になってよかったです。&lt;/p>
&lt;p>最近、Cousera での講義を始める機会があり Andrew Ng 先生の機械学習コースぶりに Coursera をやっているが、勉強のペースメーカーが決められるのと講義内容の質も高いので自分にとってはすごく相性が良い。&lt;/p>
&lt;p>技術書を読むときも同じペースで、実行できないかなと画策したい&lt;/p></description></item><item><title>Courseraで Getting Started with Google Kubernetes Engine の講義を修了した</title><link>https://shunyaueta.com/posts/2020-04-12/</link><pubDate>Sun, 12 Apr 2020 00:59:23 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-12/</guid><description>
&lt;p>表題のとおりですが、&lt;a href="https://www.coursera.org/learn/google-kubernetes-engine">Getting Started with Google Kubernetes Engine&lt;/a> という Coursera の講義を終了しました&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2020-04-12/images/coursera.png" alt="coursera">&lt;/p>
&lt;p>業務で k8s を本格的に使い始め、ちゃんと理解したいな~と思いこのコースを取りました。&lt;/p>
&lt;p>半年前に &lt;a href="https://amzn.to/3cqb8zV">Kubernetes 完全ガイド impress top gear シリーズ&lt;/a> をサラッと読んではいたのですが、やはり手を動かして学んでいないと実際に kubectl command など完全に忘れているし、スキルとして身についていない感半端なかったので、良い機会なので Hands-on が提供うされている Coursera を使って学んでみました。&lt;/p>
&lt;p>個人的にこの講義がめちゃくちゃオススメなのが、 GKE の講義なので Google が提供する &lt;a href="https://www.qwiklabs.com/">qwiklab&lt;/a> が使えます。
一時的に GCP プロジェクトが作成され、そこでハンズオンができるのですがこれが実際に手を動かしながら学ぶという形式にすごく良いのと k8s の構築もすべてクラウドでできえるので変に環境構築でハマることなく快適に学習に集中できました。&lt;/p>
&lt;p>もう、これがめちゃくちゃ快適でハンズオンとしてすごく快適に手を動かせなら、k8s の初歩的な概念や Command line などを学べました。&lt;/p>
&lt;p>実際に手を動かしながら学ぶべきものだと思うので、このハンズオン形式の講義はありがたかったです!&lt;/p>
&lt;p>後は学ぶにつれて、 k8s の凄さがわかってきたので理解して使いこなせるようになればスケールするシステムを個人でも作れそうなので、頑張っていきます。&lt;/p></description></item><item><title>遅すぎる `pandas.read_gbq` を使わずに、Google BigQueryから高速にデータを読み込む</title><link>https://shunyaueta.com/posts/2019-10-03/</link><pubDate>Thu, 03 Oct 2019 23:52:54 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2019-10-03/</guid><description>
&lt;p>&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_gbq.html">pandas.read_gbq&lt;/a> 便利ですよね。
クレデンシャルファイルを認証画面からコピペすれば Jupyter Notebook 上で簡単に認証され、Google BigQuery が実行されてその結果がそのままデータフレームとして扱えます。
Jupyter Notebook と Google BigQuery を連携させたいときは愛用していました(過去形)。&lt;/p>
&lt;h2 id="問題点">問題点&lt;/h2>
&lt;ul>
&lt;li>そこそこ大きなデータを持ってこようとすると、めちゃくちゃ遅くてストレスが凄い&lt;/li>
&lt;/ul>
&lt;p>解決方法として、Google BigQuery で巨大なデータをダウンロードする方法について書きます。&lt;/p>
&lt;p>実は Google の公式ドキュメントでも推奨されています。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/bigquery/docs/pandas-gbq-migration">https://cloud.google.com/bigquery/docs/pandas-gbq-migration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/bigquery/docs/bigquery-storage-python-pandas">https://cloud.google.com/bigquery/docs/bigquery-storage-python-pandas&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>方法は以下の２つ。&lt;/p>
&lt;ol>
&lt;li>&lt;code>google-cloud-bigquery&lt;/code> をインストールして、マジックコマンドで Google BQ を実行&lt;/li>
&lt;li>BQ 実行 →BigQuery table として保存 →GCS へ保存 → &lt;code>gsutil&lt;/code> でマシンへコピー&lt;/li>
&lt;/ol>
&lt;p>1 番目は、Jupyter 上でマジックコマンドで Google BQ が実行できて、速度も &lt;code>pandas.rad_gbq&lt;/code> よりも高速です
2 番目はそもそも実行結果が巨大な場合で、目安としては&lt;code>1GB以上&lt;/code>なら 2 番目の方法を使えば楽です。&lt;/p>
&lt;h2 id="1-google-cloud-bigquery-をインストールしてjupyter-notebook-のマジックコマンドで-google-bq-を実行">1, &lt;code>google-cloud-bigquery&lt;/code> をインストールして、Jupyter Notebook のマジックコマンドで Google BQ を実行&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">upgrade&lt;/span> &lt;span class="n">google&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">cloud&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">bigquery&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bqstorage&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">pandas&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>magic command を実行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">%&lt;/span>&lt;span class="n">load_ext&lt;/span> &lt;span class="n">google&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cloud&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bigquery&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>後は Jupyter Notebook のセルで以下のコマンドを実行すれば、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="o">%%&lt;/span>&lt;span class="n">bigquery&lt;/span> &lt;span class="n">df&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">use_bqstorage_api&lt;/span>
&lt;span class="n">SELECT&lt;/span>
&lt;span class="n">CONCAT&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s1">&amp;#39;https://stackoverflow.com/questions/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CAST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">STRING&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">view_count&lt;/span>
&lt;span class="n">FROM&lt;/span> &lt;span class="sb">`bigquery-public-data.stackoverflow.posts_questions`&lt;/span>
&lt;span class="n">WHERE&lt;/span> &lt;span class="n">tags&lt;/span> &lt;span class="n">like&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%g&lt;/span>&lt;span class="s1">oogle-bigquery%&amp;#39;&lt;/span>
&lt;span class="n">ORDER&lt;/span> &lt;span class="n">BY&lt;/span> &lt;span class="n">view_count&lt;/span> &lt;span class="n">DESC&lt;/span>
&lt;span class="n">LIMIT&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>df&lt;/code> にマジックコマンドで実行した SQL の実行結果が格納されます!
便利ですね&lt;/p>
&lt;h2 id="2-bq-実行-bigquery-table-として保存-gcs-へ保存--gsutil-でマシンへコピー">2, BQ 実行 →BigQuery table として保存 →GCS へ保存 → &lt;code>gsutil&lt;/code> でマシンへコピー&lt;/h2>
&lt;ul>
&lt;li>BigQuery でクエリを実行、実行結果を BigQuery Table へ保存&lt;/li>
&lt;li>注)実行結果の容量が巨大なので、保存先は基本的に Big Query Table へ保存するしか選択肢が無い&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2019-10-03/images/export-to-bqtable.png" alt="can&amp;rsquo;t export large file as one file">&lt;/p>
&lt;ul>
&lt;li>BigQuery table から GCS へテーブルを CSV として保存&lt;/li>
&lt;/ul>
&lt;p>Big Query table からエクスポート時に、ファイルサイズが大きいとエクスポートできないので、分割が必要です。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2019-10-03/images/cant-export-onefile.png" alt="can&amp;rsquo;t export large file as one file">&lt;/p>
&lt;p>&lt;a href="https://cloud.google.com/bigquery/docs/exporting-data">https://cloud.google.com/bigquery/docs/exporting-data&lt;/a>&lt;/p>
&lt;p>保存ファイル名を &lt;code>file-*&lt;/code> のようにワイルドカードを指定すると、自動的にひとつのテーブルを複数ファイルに分割して保存してくれる&lt;/p>
&lt;p>&lt;code>gsutil&lt;/code> commands で任意のマシンへダウンロードする。&lt;/p>
&lt;p>&lt;code>-m&lt;/code> オプションを付け足すと並列ダウンロードが始まるので、複数ファイルダウンロードする場合はおすすめです&lt;/p>
&lt;p>ストレスレスなデータ分析ライフを!&lt;/p></description></item><item><title>Jupyter Notebook上にTensorboard を わずか2行で表示させる</title><link>https://shunyaueta.com/posts/2019-09-25/</link><pubDate>Wed, 25 Sep 2019 23:16:07 +0900</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2019-09-25/</guid><description>
&lt;p>Pytorch 1.2 からは公式に Tensorboard がサポートされている&lt;/p>
&lt;p>Tensorboard とは、学習の状況を可視化できる TensorFlow Family の一種&lt;/p>
&lt;p>Jupyte Notebook 上で学習状況を確認したい場合に Tensorboard をそのまま表示して確認できれば楽なので、試してみる&lt;/p>
&lt;ul>
&lt;li>sample code: &lt;a href="https://pytorch.org/docs/stable/tensorboard.html">https://pytorch.org/docs/stable/tensorboard.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">torch&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">torchvision&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">torch.utils.tensorboard&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SummaryWriter&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">torchvision&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datasets&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">transforms&lt;/span>
&lt;span class="c1"># Writer will output to ./runs/ directory by default&lt;/span>
&lt;span class="n">writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SummaryWriter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">transform&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transforms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Compose&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">transforms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ToTensor&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">transforms&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Normalize&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">,),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">,))])&lt;/span>
&lt;span class="n">trainset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">datasets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MNIST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mnist_train&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">train&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">download&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">transform&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">transform&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">trainloader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">utils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DataLoader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trainset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">batch_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shuffle&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torchvision&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resnet50&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Have ResNet model take in grayscale rather than RGB&lt;/span>
&lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">conv1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Conv2d&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kernel_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stride&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">padding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bias&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">images&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">trainloader&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">grid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">torchvision&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">utils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make_grid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">images&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_image&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;images&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_graph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">images&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>その結果を Jupyter 上で確認したい場合、以下のマジックコマンドを実行する&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.tensorflow.org/tensorboard/r2/tensorboard_in_notebooks">https://www.tensorflow.org/tensorboard/r2/tensorboard_in_notebooks&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">%load_ext tensorboard
%tensorboard --logdir runs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>結果を 1 画面で完結して見せたい場合に便利そう&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2019-09-25/images/1.png" alt="tensorboard in jupyter notebook">&lt;/p>
&lt;p>完了!&lt;/p></description></item><item><title>How to connect the Google Compute Engine via Visual Studio Code</title><link>https://shunyaueta.com/posts/2019-09-24/</link><pubDate>Tue, 24 Sep 2019 17:35:05 +0900</pubDate><guid>https://shunyaueta.com/posts/2019-09-24/</guid><description>
&lt;h2 id="1-generate-ssh-config-file-using-gcloud-command-line">1. Generate SSH config file using &lt;code>gcloud&lt;/code> command line&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gcloud compute config-ssh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="https://cloud.google.com/sdk/gcloud/reference/compute/config-ssh">https://cloud.google.com/sdk/gcloud/reference/compute/config-ssh&lt;/a>&lt;/p>
&lt;p>You cant get ssh config for your Google Compute Engine project!&lt;/p>
&lt;p>Notice: you need choose target GCP project before run below command.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gcloud config &lt;span class="nb">set&lt;/span> project &amp;lt;your-project-id&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-install-remote-ssh-extention-in-visual-studio-code">2. Install &lt;code>Remote SSH&lt;/code> extention in Visual Studio Code.&lt;/h2>
&lt;p>&lt;a href="https://code.visualstudio.com/blogs/2019/07/25/remote-ssh">https://code.visualstudio.com/blogs/2019/07/25/remote-ssh&lt;/a>&lt;/p>
&lt;h2 id="3-press-p--select-target-connection-in-visual-studio-code">3. Press &lt;code>⇧⌘P&lt;/code> &amp;amp; Select target connection in Visual Studio Code!&lt;/h2>
&lt;p>Finaly you can connect in Visual Studio Code. Welcome to VS code when you write the code in SSH connection.&lt;/p></description></item><item><title>ビジネスでインパクトが出せるデータサイエンティストになるには</title><link>https://shunyaueta.com/posts/2019-09-23/</link><pubDate>Mon, 23 Sep 2019 18:48:47 +0900</pubDate><guid>https://shunyaueta.com/posts/2019-09-23/</guid><description>
&lt;p>&lt;a href="https://twitter.com/pseudo_finite">@pseudo_finite&lt;/a> さんから&lt;/p>
&lt;p>「ビジネスでインパクトが出せるデータサイエンティストになるためには」&lt;/p>
&lt;p>をご恵贈していただいたので、感想をここに記します。&lt;/p>
&lt;blockquote>
&lt;p>経営システム誌に寄稿したものができました。30 部あるので欲しい方はお声がけください。&lt;br>私の 10 年間の経験を整理して中堅のデータサイエンティスト向けに書いたものになります。批判的なフィードバックなどいただけると嬉しいです。(@pseudo_finite)
&lt;a href="https://twitter.com/pseudo_finite/status/1086194134027649024">tweet&lt;/a> January 18, 2019&lt;/p>
&lt;/blockquote>
&lt;h2 id="批評">批評&lt;/h2>
&lt;h3 id="1-データサイエンティストが力を発揮する場">1. データサイエンティストが力を発揮する場&lt;/h3>
&lt;blockquote>
&lt;p>データサイエンティストとして成果を発揮するには、事業ドメイン・そしてデータの規模と質に依存する&lt;/p>
&lt;/blockquote>
&lt;p>圧倒的に同意です。自分も現職に就職する際には、データ規模・質・種類や社内のデータに関する文化などを考慮して会社を選びました。
最後の一文も完全に同意で、良いデータさえあれば基本的に問題は解きやすく簡単になると思っています。&lt;/p>
&lt;h3 id="2-課題設定">2. 課題設定&lt;/h3>
&lt;blockquote>
&lt;p>データサイエンティストの仕事の肝は適切な課題設定&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>本質的な課題設定とはそもそもなんなのか&lt;/code>と考えてみます。&lt;/p>
&lt;p>ここで、本質的な課題設定を解明するための大きな障壁になるのは、&lt;/p>
&lt;ul>
&lt;li>自社が事業会社か&lt;/li>
&lt;li>ドッグフーディングできるサービスを運営しているか&lt;/li>
&lt;/ul>
&lt;p>どうかではないでしょうか?&lt;/p>
&lt;p>日常的に自社のサービスを使っていると、顧客視点での改善点や課題点などを見つけることができる。
また、サービスをより深く知ることで深い考察や客観的な観察をすることができる。
スタートアップ界隈では浸透している &lt;a href="https://amzn.to/2kQ10vh">リーンスタートアップ&lt;/a>の考え方は、本質的な課題の発見に非常に相性が良いと思っています。&lt;/p>
&lt;p>また、データ分析では、単なる集計や相関ではなく、顧客がどんな状況で何をしたいのかを考えてユーザーリサーチをすることも非常に重要です。
&lt;a href="https://amzn.to/2m2b3h0">ジョブ理論 イノベーションを予測可能にする消費のメカニズム&lt;/a> で語られているトピックですが、非常に勉強になります。&lt;/p>
&lt;h3 id="3-解決方法の設定">3. 解決方法の設定&lt;/h3>
&lt;blockquote>
&lt;p>自然なモデリングと実現可能性のあるモデリング&lt;/p>
&lt;/blockquote>
&lt;p>自分はデータサイエンティストではなく、機械学習エンジニアとして働いているので、その立場からの視点です。
実感するのはまず何よりも実装力が大事だと思います。&lt;/p>
&lt;p>実装ができるからこそ、実験ができる。その実験から知見を得て改善のサイクルが回り始める。&lt;/p>
&lt;p>関連する暦本先生の tweet が面白かったので、ご参考まで&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">深層学習時代になってますますですが研究者のコード書きは開発というより未解決の問題や仮説に決着をつける行為、サイエンスにおける実験そのものなのでコード書かない人がどうやって研究してるのか想像つかないです🤔 &lt;a href="https://t.co/mojhTqHqmx">https://t.co/mojhTqHqmx&lt;/a>&lt;/p>&amp;mdash; Jun Rekimoto : 暦本純一 (@rkmt) &lt;a href="https://twitter.com/rkmt/status/1173549120394383361?ref_src=twsrc%5Etfw">September 16, 2019&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h3 id="4-検証">4. 検証&lt;/h3>
&lt;blockquote>
&lt;p>施策実行後の検証は必須&lt;/p>
&lt;/blockquote>
&lt;p>個人的には自分が最も重要だと思う点はここである。
確かに施策が成功したら、燃え尽きたくなる気持ちはわかるが、なぜ成功したのかを解明して再現性を担保しなければ知見としてストックされない。
そして知見の溜め込みの速さ・多さこそがビジネスとしての優位性につながるのではないのだろうか?
これこそ、まさに科学的思考の本幹ですね。&lt;/p>
&lt;h3 id="5-育成">5. 育成&lt;/h3>
&lt;blockquote>
&lt;p>データサイエンティストの育成は非常に難しい&lt;/p>
&lt;/blockquote>
&lt;p>育成の点は、自分も最近考えていたことですが、&lt;/p>
&lt;ul>
&lt;li>例えば研究室のセミナーや論文の赤入れなどで議論をしたからこそ科学的思考方法が身についたのか?&lt;/li>
&lt;/ul>
&lt;p>を考えていました。&lt;/p>
&lt;p>僕の結論では、 強い相関はあれど研究室での議論により全員が身科学的思考方法を会得するのは難しいのではないかと思っています。
(もちろん全員が身につけることこそ、研究室の本懐だと思います)&lt;/p>
&lt;p>Software Enginnering やアカデミアの世界では、レビュー文化を体験してあくまで内容に関する批判であり、
フィードバックを受け入れて改善する姿勢を身に着けていることも大事だなと最近感じています。&lt;/p>
&lt;p>&lt;a href="https://amzn.to/2m3BQcE">Team Geek ―Google のギークたちはいかにしてチームを作るのか &lt;/a> の書籍で語られる HRT の精神ですね。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>自分も機械学習エンジニアとして働きはじめて、2 年弱が経過しようとしている。
シニアクラスになるためには、まだまだ不足点がたくさんあるが俯瞰的に見直せる良い機会になる良い予稿だった。&lt;/p>
&lt;p>岩永次郎さんが書かれている続編的な位置づけの&lt;/p>
&lt;p>&lt;a href="http://www.jsdss.org/wp-content/uploads/2019/04/jjsdss_v3n1_p17.pdf">データサイエンティストが実務を通して経験すべきこと&lt;/a>&lt;/p>
&lt;p>が、更に踏み込んだ内容になっているのでこの記事が面白いと感じた人はぜひご覧ください。&lt;/p></description></item><item><title>How to concat image using skimage</title><link>https://shunyaueta.com/posts/2019-06-17/</link><pubDate>Mon, 17 Jun 2019 00:07:33 +0900</pubDate><guid>https://shunyaueta.com/posts/2019-06-17/</guid><description>
&lt;p>When you need to concat same size image to make figure.&lt;/p>
&lt;p>skimage &amp;amp; numpy combination is too powerfull to concat images.&lt;/p>
&lt;p>This is sample script.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">skimage&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">io&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">skimage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astronaut&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">imgs&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">img&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">skimage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imsave&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sample_h.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hstack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imgs&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">skimage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imsave&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sample_v.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">vstack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">imgs&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After that you can get below images.&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2019-06-17/images/sample_h.png" alt="concat holiznal">&lt;/li>
&lt;li>&lt;img src="https://shunyaueta.com/posts/2019-06-17/images/sample_v.png" alt="concat vertical">&lt;/li>
&lt;/ul>
&lt;p>Via Gist:
&lt;a href="https://gist.github.com/hurutoriya/fedf059ad3db5c67b16d8d5dd6d3df70">https://gist.github.com/hurutoriya/fedf059ad3db5c67b16d8d5dd6d3df70&lt;/a>&lt;/p></description></item><item><title>Hugo Tips</title><link>https://shunyaueta.com/posts/2019-06-16/</link><pubDate>Sun, 16 Jun 2019 23:09:18 +0900</pubDate><guid>https://shunyaueta.com/posts/2019-06-16/</guid><description>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/about/new-in-032/">Hugo 0.32&lt;/a>から page bundle が使用可能に&lt;/li>
&lt;li>この機能で画像ファイルを以下のファイル構成で構築できる&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">- hoge/
- index.md
- hoge.png
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>これにより、markdown とアセットファイルが同一ディレクトリ内に収まるのでアセットファイルの管理が簡単になる&lt;/p>
&lt;ul>
&lt;li>&lt;code>hugo new&lt;/code> で特定のエディタを開くには?&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo new posts/hoge.md --editor&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>作成時に&lt;code>slug&lt;/code> に日付を含める&lt;/li>
&lt;li>今回は&lt;code>2020-09-09&lt;/code>の形式で slug を作成する&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo new posts/&lt;span class="k">$(&lt;/span>date &lt;span class="s1">&amp;#39;+%Y-%m-%d&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>/index.md
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>page をビルドして結果を確認する&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo server
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>下書きも含めてビルドする&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">hugo server -D
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Machine Learning Casual Talks #10 を開催しました #MLCT</title><link>https://shunyaueta.com/posts/2019-06-15/</link><pubDate>Sat, 15 Jun 2019 22:01:27 +0900</pubDate><guid>https://shunyaueta.com/posts/2019-06-15/</guid><description>
&lt;p>&lt;a href="https://mlct.connpass.com/event/125316/">MLCT #10&lt;/a> を開催しました。&lt;/p>
&lt;p>Machine Learning Casual Talks とは&lt;/p>
&lt;p>&lt;strong>&lt;em>実サービスにおける機械学習の経験をカジュアルに語り合おう&lt;/em>&lt;/strong>&lt;/p>
&lt;p>を目的としたコミュニティです。&lt;/p>
&lt;h2 id="スポンサー">スポンサー&lt;/h2>
&lt;p>前回と同じく本イベントは&lt;a href="https://about.mercari.com/">株式会社メルカリ&lt;/a>にスポンサーとして会場と懇親会の提供を受け開催することができました。
スポンサー依頼を快諾いただきありがとうございました!&lt;/p>
&lt;p>配信動画はこちら!&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/DarRgossyAk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;h2 id="slido-がパネルディスカッションでめっちゃ便利な件">Sli.do がパネルディスカッションでめっちゃ便利な件&lt;/h2>
&lt;p>今回は、パネルディスカッションで sli.do をスクリーンにフルスクリーンで表示してモデレーションを行いました。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2019-06-15/images/mlct10_discuss.jpg" alt="sli.do">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2019-06-15/images/mlct10_slido.png" alt="sli.do smartphone">&lt;/p>
&lt;p>手元のスマートフォンで質問をハイライトして、回答を終えたものはアーカイブという運用でしたが、とても快適なのでみなさんぜひお試しください。
スクリーンでの表示画面が SPA で同期されているので、手元のスマートフォンで更新すればリアルタイムで同期されるのがとても便利です。&lt;/p></description></item><item><title>Machine Learning Casual Talks #8 を開催しました #MLCT</title><link>https://shunyaueta.com/posts/2019-02-02/</link><pubDate>Sat, 02 Feb 2019 18:41:32 +0000</pubDate><guid>https://shunyaueta.com/posts/2019-02-02/</guid><description>
&lt;p>Machine Learning Casual Talks 第 8 回の開催を無事終えました&lt;/p>
&lt;p>MLCT とは&lt;/p>
&lt;p>&lt;strong>&lt;em>実サービスにおける機械学習の経験をカジュアルに語り合う&lt;/em>&lt;/strong>&lt;/p>
&lt;p>コミュニティです&lt;/p>
&lt;h2 id="スポンサー">スポンサー&lt;/h2>
&lt;p>&lt;strong>今回も同じく本イベントは&lt;/strong>&lt;a href="https://about.mercari.com/">&lt;strong>株式会社メルカリ&lt;/strong>&lt;/a>&lt;strong>にスポンサーとして会場と懇親会を提供を受け開催することができました!&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/113173/">Machine Learning Casual Talks #8 (2019/01/28 18:30〜)&lt;/a>&lt;/p>
&lt;p>当日の配信動画はこちら&lt;/p>
&lt;p>当日の発表資料はすべてこちらにあります&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/113173/presentation/">Machine Learning Casual Talks #8 - 資料一覧 - connpass&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*_xHXw_3LmwWoGuiZ" alt="image">&lt;/p>
&lt;p>エムスリー 西場さん&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*RJc9obUgkPed4vP1" alt="image">&lt;/p>
&lt;p>BEDORE すみのさん&lt;/p>
&lt;h2 id="tldr">TL;DR;&lt;/h2>
&lt;ul>
&lt;li>エムスリーの西場さん、すべてをこなす&lt;/li>
&lt;li>toB の機械学習サービス、システムアーキテクチャデザインかなり考えないとキツイ&lt;/li>
&lt;li>懇親会での 🍣 の需給予測失敗しかけた&lt;/li>
&lt;/ul>
&lt;h2 id="次回挑戦したいこと">次回挑戦したいこと&lt;/h2>
&lt;p>今回会場撤収時に有志の参加者、登壇者の方が撤収作業を手伝っていただき非常に助かりました。次回は有志で会場撤収ボランティアの参加枠を作ろうかなと思いました。運営コストを下げるのは、継続で一番大事だなと思っているので、お手伝いいただいた皆様ありがとうございました。助かるという感情が出てくる前に、素直にめちゃくちゃ嬉しかったです!&lt;/p>
&lt;p>参加率も 8 割を超えていて欠席率が非常に少なかったのも継続していきたい&lt;/p></description></item><item><title>Machine Learning Casual Talks #7 を開催しました #MLCT</title><link>https://shunyaueta.com/posts/2018-12-15/</link><pubDate>Sat, 15 Dec 2018 19:29:59 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-12-15/</guid><description>
&lt;p>Machine Learning Casual Talks 第七回を無事開催しました&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/104874/">Machine Learning Casual Talks #7 (2018/11/20 18:30〜)&lt;/a>&lt;/p>
&lt;p>MLCT とは&lt;/p>
&lt;p>&lt;strong>&lt;em>実サービスにおける機械学習の経験をカジュアルに語り合おう&lt;/em>&lt;/strong>&lt;/p>
&lt;p>というコミュニティです。&lt;/p>
&lt;h2 id="スポンサー">スポンサー&lt;/h2>
&lt;p>&lt;strong>今回も同じく本イベントは&lt;/strong>&lt;a href="https://about.mercari.com/">&lt;strong>株式会社メルカリ&lt;/strong>&lt;/a>&lt;strong>にスポンサーとして会場と懇親会を提供を受け開催することができました。スポンサー依頼を快諾いただきありがとうございました!&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*7UThZSqrj87v5rmk" alt="image">&lt;/p>
&lt;p>遺伝異常により髪が青く変色してしまったタカヤナギ=サン&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*FOlPFS2tBQEXr0y4" alt="image">&lt;/p>
&lt;p>ABEJA の機械学習導入事例と辛い話を大田黒さんにお話していただきました!&lt;/p>
&lt;p>今回の勉強会資料は以下にまとまっています。&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/104874/presentation/">Machine Learning Casual Talks #7 —  資料一覧  — connpass&lt;/a>&lt;/p>
&lt;p>今回の内容を今北産業&lt;/p>
&lt;ul>
&lt;li>機械学習エンジニアとしてのキャリアのお話を タカヤナギ=サン&lt;/li>
&lt;li>実世界に根付いた IOT と機械学習サービスはかなり辛い&lt;/li>
&lt;li>各社の機械学習エンジニアの定義が揺らいでいるので、世界が壊れる&lt;/li>
&lt;/ul>
&lt;h2 id="今回の改善点">今回の改善点&lt;/h2>
&lt;h3 id="参加枠の多様性">参加枠の多様性&lt;/h3>
&lt;ul>
&lt;li>絶対参加するぞ枠&lt;/li>
&lt;li>一般参加枠&lt;/li>
&lt;li>初回参加枠&lt;/li>
&lt;li>SNS 枠&lt;/li>
&lt;li>Blog 枠&lt;/li>
&lt;/ul>
&lt;p>と今までは一つの枠で扱っていたものを、5 つの枠に分散して用意してみました。&lt;/p>
&lt;p>なぜかというとドタキャンやノーショーの方の影響で本当に参加したい方や初回参加の方の機会が喪失してしまうのはいただけないので、それを解決したなと思ったのが始まりです。&lt;/p>
&lt;p>初回参加枠を設けることで、新規参加者が増えて内輪感が解消されるのも狙ってみました。その影響か前回と比較して 2 割ほど参加率が増えてよかったです :)&lt;/p>
&lt;h3 id="パネルディスカッション">パネルディスカッション&lt;/h3>
&lt;p>登壇者 2 名と僕がモデレーターを行い、パネルディスカッションを行いました。単なる発表保の質疑応答時よりも話が盛り上がってなによりでした~&lt;/p>
&lt;h2 id="次回予告">次回予告&lt;/h2>
&lt;p>次回 MLCT 第 8 回は 2019/01/28 に参加予定です!&lt;/p>
&lt;p>現実世界での機械学習の辛みを共有したい・語りたいという方はゼヒご参加ください~&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/113173/">Machine Learning Casual Talks #8 (2019/01/28 18:30〜)&lt;/a>&lt;/p></description></item><item><title>Machine Learning Casual Talks #6 を開催しました #MLCT</title><link>https://shunyaueta.com/posts/2018-10-14/</link><pubDate>Sun, 14 Oct 2018 03:01:01 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-10-14/</guid><description>
&lt;p>機械学習の信頼性が熱いよねというお話&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/1200/0*CP0ju6SD7HYdH3tc" alt="image">&lt;/p>
&lt;p>&lt;a href="https://medium.com/u/423df412be5e">柚餅子&lt;/a> さんの発表風景&lt;/p>
&lt;p>2018/09/25 の MLCT #6 を開催しました。&lt;/p>
&lt;p>MLCT とは&lt;/p>
&lt;p>&lt;strong>&lt;em>実務における機械学習の話や経験をカジュアルに語り合おう&lt;/em>&lt;/strong>&lt;/p>
&lt;p>というコミュニティです。&lt;/p>
&lt;h2 id="スポンサー">スポンサー&lt;/h2>
&lt;p>&lt;strong>今回も同じく本イベントは&lt;/strong>&lt;a href="https://about.mercari.com/">&lt;strong>株式会社メルカリ&lt;/strong>&lt;/a>&lt;strong>にスポンサーとして会場と懇親会を提供を受け開催することができました。スポンサー依頼を快諾いただきありがとうございました!&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/94911/">Machine Learning Casual Talks #6 (2018/09/25 19:00〜)&lt;/a>&lt;/p>
&lt;h2 id="発表資料一覧-スライドと配信動画">発表資料一覧 👇(スライドと配信動画)&lt;/h2>
&lt;p>&lt;a href="https://mlct.connpass.com/event/94911/presentation/">Machine Learning Casual Talks #6 - 資料一覧 - connpass&lt;/a>&lt;/p>
&lt;h3 id="柚餅子httpsmediumcomu423df412be5eさん">&lt;a href="https://medium.com/u/423df412be5e">柚餅子&lt;/a>さん&lt;/h3>
&lt;ul>
&lt;li>リブセンスにおける機械学習システムの信頼性エンジニアリング&lt;/li>
&lt;li>SRE の考えを機械学習システムに取り入れるというお話ですが、筋が良さそう。特に SLO 周りはうちでも取り入れないなぁと思いました&lt;/li>
&lt;/ul>
&lt;h3 id="naomichi-agatahttpsmediumcomu6bbb8660385f-さん">&lt;a href="https://medium.com/u/6bbb8660385f">Naomichi Agata&lt;/a> さん&lt;/h3>
&lt;ul>
&lt;li>ユーザーフィードバックと機械学習&lt;/li>
&lt;li>半教師あり学習で解くというアプローチは非常に筋が良さそうで気になった。技術書典の&lt;a href="https://techbookfest.org/event/tbf05/circle/53000005">書籍&lt;/a>も気になる 👀&lt;/li>
&lt;/ul>
&lt;h3 id="gamellahttpsmediumcomu94ce81a1a81c-さん">&lt;a href="https://medium.com/u/94ce81a1a81c">gamella&lt;/a> さん&lt;/h3>
&lt;ul>
&lt;li>マーケット予測モデルの PCDA の回し方&lt;/li>
&lt;li>ms 単位のデータを学習データにして株価の UP/DOWN を予測する。。。。適用するドメインの難易度が鬼ゲーすぎて、ハラハラしそうだけど解きがいがありそう&lt;/li>
&lt;/ul>
&lt;h3 id="yu-ya4-さん">@yu-ya4 さん&lt;/h3>
&lt;ul>
&lt;li>Big Query ML を使ってみた話&lt;/li>
&lt;li>さらっと BQML を試して成果が出ましたと言っていたが、良い問題を探し出す嗅覚がすごいなと思いました。実際 BQ だけで過不足なくモデリングが終わるなら理想の世界ですね~&lt;/li>
&lt;/ul>
&lt;h3 id="kosuke-kitaharahttpsmediumcomu15c608f0e1d1-さん">&lt;a href="https://medium.com/u/15c608f0e1d1">Kosuke Kitahara&lt;/a> さん&lt;/h3>
&lt;ul>
&lt;li>発表資料は後日公開されます。謎の力により Youtube 配信はされていません&lt;/li>
&lt;/ul>
&lt;h2 id="kpt">KPT&lt;/h2>
&lt;h3 id="keep">Keep&lt;/h3>
&lt;ul>
&lt;li>動画配信を問題なく完了できた&lt;/li>
&lt;li>魅力ある発表内容を維持できた&lt;/li>
&lt;/ul>
&lt;h3 id="problem">Problem&lt;/h3>
&lt;ul>
&lt;li>参加率が低かった。前回は 65%程度の参加率でしたが、今回は雨の影響もありますが 40% と低くなっていた&lt;/li>
&lt;li>倍率も毎回 1.5–2 倍程度なのでこれだと補欠枠で参加できなかった人が申し訳ないので、もっと熱意ある人が参加できるような仕組みを考えています&lt;/li>
&lt;/ul>
&lt;h3 id="try">Try&lt;/h3>
&lt;ul>
&lt;li>懇親会で議論できる場の形成を狙っていたが、知人同士で固まってしまう傾向が見られたので自然と議論できるようなオ&lt;a href="http://www.humanvalue.co.jp/hv2/our_theory/ost/ost.html">ープンスペース&lt;/a>をやってみる
&lt;blockquote>
&lt;p>[](&lt;a href="https://twitter.com/komiya_atsushi/status/1044554279527178242">https://twitter.com/komiya_atsushi/status/1044554279527178242&lt;/a>)
というわけでありがとうございました!&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>回数を重ねるごとに運営もこなれてきましたが、内輪感が出ないように頑張っていきたいなと思います!&lt;/p>
&lt;p>次回の開催は 2018/11/20 を計画しているのでよろしくおねがいします 🙇&lt;/p></description></item><item><title>Machine Learning Casual Talks #5 を開催しました #MLCT</title><link>https://shunyaueta.com/posts/2018-07-15/</link><pubDate>Sun, 15 Jul 2018 09:31:28 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-07-15/</guid><description>
&lt;p>2018/07/13 に MLCT #5 を開催してきたお話&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/2560/0*1dV8jG3d-X98MN8_" alt="image">&lt;/p>
&lt;p>Opening Talk by &lt;a href="https://medium.com/u/d2572dc96c55">Aki Ariga&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://mlct.connpass.com/event/88797/">Machine Learning Casual Talks #5 (2018/07/13 19:30〜)&lt;/a>&lt;/p>
&lt;p>&lt;strong>本イベントは&lt;/strong>&lt;a href="https://about.mercari.com/">&lt;strong>株式会社メルカリ&lt;/strong>&lt;/a>&lt;strong>にスポンサーとして会場と懇親会を提供を受け開催することができました。スポンサー依頼を快諾いただきありがとうございました。&lt;/strong>&lt;/p>
&lt;p>発表資料はこちら 👉 &lt;a href="https://mlct.connpass.com/event/88797/presentation/">here&lt;/a> (YouTube 配信もあります)* この記事では、技術的なお話というよりも開催に至るまでの話をメインに書いていきます。&lt;/p>
&lt;h2 id="start">Start&lt;/h2>
&lt;p>構想開始時期は 2018/04 頃に考えていて、弊社開催の&lt;br>
&lt;a href="https://tech.mercari.com/entry/mercari-mlopsnight-1">MLOps Night&lt;/a>と呼ばれるイベントの準備を行っているときに、社内だけではなく&lt;br>
*社外の人の機械学習の辛い話をうんうんと頷きながら聞きたいなぁ&lt;br>
*と思ったのが事の始まりです&lt;/p>
&lt;p>そのあと、とりあえず日程と発表者は事前に集めておかねばと思い&lt;a href="https://medium.com/u/1f02a92f1898">Takashi Nishibayashi&lt;/a> さんにラブコールを送っていた&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-07-15_machine-learning-casual-talks-sharp5-%E3%82%92%E9%96%8B%E5%82%AC%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-sharpmlct/images/2.png" alt="image">&lt;/p>
&lt;p>発表依頼の様子&lt;/p>
&lt;h2 id="chezou-さんとの出会いと-mlct-復活の狼煙">chezou さんとの出会いと MLCT 復活の狼煙&lt;/h2>
&lt;p>その後、&lt;/p>
&lt;ul>
&lt;li>勉強会の名前どうしよう 🤔&lt;/li>
&lt;li>運営の方針どうすべきか 🤔&lt;/li>
&lt;/ul>
&lt;p>を迷いつつ時間が過ぎていき業務の一環として&lt;a href="https://mlxse.connpass.com/event/80439/">機械学習工学キックオフシンポジウム&lt;/a> に参加していたら、そういえば &lt;a href="https://medium.com/u/d2572dc96c55">Aki Ariga&lt;/a> さんって MLCT 開催してたよな、あの勉強会すごく参考になること多かったから復活できないかなと思い始め、気がついたら懇親会で hagino3000 さんに chezou さんを紹介してもらい&lt;/p>
&lt;p>&lt;em>「MLCT 復活させたいです!!! 場所と運営準備は僕主体でやります!」&lt;/em>&lt;/p>
&lt;p>と提案したら、あっさりと快諾され運営者に混ぜてもらえることになりました&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-07-15_machine-learning-casual-talks-sharp5-%E3%82%92%E9%96%8B%E5%82%AC%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-sharpmlct/images/3.png" alt="image">&lt;/p>
&lt;p>メッセージ投げかけから 1 分で承認される&lt;/p>
&lt;p>あらためて、突然飛び込んできた見知らぬ人物の運営への参加を快諾してくださった、 &lt;a href="https://medium.com/u/d2572dc96c55">Aki Ariga&lt;/a>, &lt;a href="https://medium.com/u/5b6d3ed50e13">Atsushi KOMIYA&lt;/a>, @tetsuroito さんありがとうございました 🙇&lt;/p>
&lt;p>また社内にはコミュニティを運営する人たちが集まる #z-organizer という夢のような Slack チャンネルがあり、そこの方々からも今回の運営準備や行動理念など沢山の助言をいただきました! ありがとうございました!&lt;/p>
&lt;h2 id="mlct-5-開催の感想">MLCT #5 開催の感想&lt;/h2>
&lt;p>定員は 100 名で募集したところ、応募者が 200 人強、実参加者は 71 人と盛況にイベントを開催することができました。&lt;/p>
&lt;p>運営初回ということもあり、発表者は事前に僕と hagino3000 さん、同僚の hnakagawa, ynqa にお願いして数を揃えました。イベント告知後には soonraah さん、 overs_5121 さんに LT 参加応募をいただき定員に達してホッと覚えがあります。&lt;/p>
&lt;p>結果的に、機械学習の技術的な話から運用・先進的なミドルウェアの紹介などバランスが取れたコンテンツを提供できる形になって最高のスタートを切れたんじゃないかと思いました(自画自賛)&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/600/0*CfmthEvRrsEYmXxu" alt="image">&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/600/0*0mkGfXFZ8CspyovM" alt="image">&lt;/p>
&lt;p>スポンサーである株式会社メルカリからの ドリンクと懇親会の提供の様子&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/1200/0*XsCf8p2SILaQ6OOn" alt="image">&lt;/p>
&lt;p>会場の様子&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>MLCT はこれから 2 ヶ月ごとに定期開催していく予定です。日本の機械学習コミュニティをどんどん盛り上げていけたらなと思っています!&lt;/p>
&lt;p>司会のときにも言いましたが、&lt;br>
**_機械学習エンジニア界隈に知り合いがほぼ存在していないので&lt;br>
_**発表したい方絶賛大募集中です!&lt;/p>
&lt;p>では、これからもよろしくお願いします!!&lt;/p></description></item><item><title>イベント運営に便利なsli.do の使いこなしかた</title><link>https://shunyaueta.com/posts/2018-06-17/</link><pubDate>Sun, 17 Jun 2018 15:03:27 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-06-17/</guid><description>
&lt;p>イベント運営者必見 sli.do の使い方&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/1.png" alt="image">&lt;/p>
&lt;p>sli.do のディスプレイ画面&lt;/p>
&lt;p>sli.do という便利な質問投稿・回答サービスがあります。このサービスですが、イベント運営者あるあるの&lt;/p>
&lt;ul>
&lt;li>オフラインだと活発に質問が出ない&lt;/li>
&lt;li>Twitter は盛り上がってるが実際の反応はわからない&lt;/li>
&lt;li>Google Form はいまいち回答率が悪い&lt;/li>
&lt;/ul>
&lt;p>などの問題点を解決してくれるサービスです&lt;/p>
&lt;p>&lt;a href="https://www.sli.do/">Slido - Audience Interaction Made Easy&lt;/a>&lt;/p>
&lt;p>基本的な使い方は以下の公式動画がサクッとまとめられていて分かりやすいです&lt;/p>
&lt;p>これ見れば sli.do の機能は全て俯瞰できる&lt;/p>
&lt;p>UI が良く操作に迷うことはないので、各機能のスクショを貼りつつ紹介していきます&lt;/p>
&lt;h4 id="イベント設定">イベント設定&lt;/h4>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/2.png" alt="image">&lt;/p>
&lt;p>設定画面&lt;/p>
&lt;p>イベントの名前や、 短縮コード(イベントのハッシュタグにしておくと分かりやすい)を設定して導線をわかりやすくできる&lt;/p>
&lt;h2 id="投票機能">投票機能&lt;/h2>
&lt;p>無料版だと 3 つの投票までできる。大きなイベントでなければ十分。もちろん回答結果はシークレットにもできます。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/3.png" alt="image">&lt;/p>
&lt;p>3 つの投票機能&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/4.png" alt="image">&lt;/p>
&lt;p>複数選択肢&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/5.png" alt="image">&lt;/p>
&lt;p>自由記入式&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/6.png" alt="image">&lt;/p>
&lt;p>星によるレーティング&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/7.png" alt="image">&lt;/p>
&lt;p>各投票機能はアクティブにすると参加者は一つだけ投票可能になる&lt;/p>
&lt;h2 id="参加者からの質問回答結果のライブ表示">参加者からの質問・回答結果のライブ表示&lt;/h2>
&lt;p>右上のトグルボタンをクリックすると、投票結果をライブ表示できる。勉強会の発表中にサイドディスプレイがあれば常時表示しておくと&lt;strong>ライブ感&lt;/strong>が出て良いと思う&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/8.png" alt="image">&lt;/p>
&lt;p>ライブ画面への切り替え&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/9.png" alt="image">&lt;/p>
&lt;p>質問一覧&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/10.png" alt="image">&lt;/p>
&lt;p>回答ライブ画面&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/11.png" alt="image">&lt;/p>
&lt;p>上部のスイッチ画面から次の投票に切り替えることができる&lt;/p>
&lt;h2 id="回答解析機能">回答解析機能&lt;/h2>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-06-17/images/12.png" alt="image">&lt;/p>
&lt;p>管理画面から回答のインフォグラフィックを生成することもできる&lt;/p>
&lt;p>といたせりつくせりの機能が提供されています。&lt;/p>
&lt;p>まとめると&lt;/p>
&lt;ul>
&lt;li>イベント参加者からのオープンな質問投稿(匿名・非匿名)&lt;/li>
&lt;li>各質問・回答のライブ表示&lt;/li>
&lt;li>運営者からのサーベイ(イベントの感想など)&lt;/li>
&lt;/ul>
&lt;p>の 3 点が sli.do では使えます&lt;/p>
&lt;h2 id="tips">Tips&lt;/h2>
&lt;p>唯一惜しい機能としては、イベント管理者が単一ユーザーでしか管理できない点ですが共同アカウント作れば大丈夫そうです。&lt;/p>
&lt;p>&lt;a href="https://help.sli.do/034621-How-do-I-add-more-admins-to-my-event">How do I add more admins to my event?&lt;/a>&lt;/p>
&lt;p>Google Slides でも QA 機能ありませんかとかありますが、sli.do に比べて Open ではないので sli.do を選択しています。あと Google Slides は 1 スライド:1Question でまとめるのが難しい&lt;/p></description></item><item><title>[抄訳] Data engineers vs. data scientists</title><link>https://shunyaueta.com/posts/2018-04-24/</link><pubDate>Tue, 24 Apr 2018 02:18:46 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-04-24/</guid><description>
&lt;p>データサイエンティストとデータエンジニアの定義とその誤解による悲劇、そしてそれを救う存在である機械学習エンジニア&lt;/p>
&lt;h2 id="紹介記事">紹介記事&lt;/h2>
&lt;p>&lt;a href="https://www.oreilly.com/ideas/data-engineers-vs-data-scientists">Data engineers vs. data scientists&lt;/a>&lt;/p>
&lt;p>紹介記事を同僚から教えてもらい、面白かったので抄訳した&lt;/p>
&lt;blockquote>
&lt;p>[](&lt;a href="https://twitter.com/chezou/status/980349709339394048">https://twitter.com/chezou/status/980349709339394048&lt;/a>) &amp;gt; &lt;a href="https://medium.com/u/d2572dc96c55">Aki Ariga&lt;/a> さんが言及していた記事と方向性が同一で面白かった。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Data Scientists&lt;/strong> : ビジネスサイドを理解し、他者にわかりやすく可視化と言語化できる職能。そして高度な数学的知識に基づいたモデリングやアルゴリズム提案スキルも持っている。Data Scientists には高度な Programming skill は必ずしも必須ではない、なぜならモデリングやアルゴリズムを実装するためにプログラミングを習得した人が多いからだ。システムデザインや Programming スキルは、Software Engineer や DataEngineer からみると見れたものではない(そしてそうでなくてはならない、なぜならスペシャリストだから)&lt;/p>
&lt;p>&lt;strong>Data Engineer&lt;/strong> : 分散プログラミングを意識して構築できる職能。DE は卓越したプログラミングスキルとシステム構成力を持つ。定義 : つまりビッグデータに対してシステム的に解決できるスキル。クラスタ設計までが Data Engineer の役割であり運用(Ops)はやらない&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-24/images/1.png" alt="image">&lt;/p>
&lt;p>from : &lt;a href="https://www.oreilly.com/ideas/data-engineers-vs-data-scientists">https://www.oreilly.com/ideas/data-engineers-vs-data-scientists&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Data Scientists と Data Engineer の互いの特化したスキルは補完しあってこそ輝く。&lt;/li>
&lt;li>Data Scientist がデータパイプラインを作ると悲劇が起きてしまう。多くの企業が Data Scientist を Data Engineer として雇っているが、それは Data Scientists のスペックを活かしきれず、20–30%の効率で働かせてしまっている。そしてその ROI はめちゃくちゃ悪い。Data Scientists は適切なツールと選択肢を熟知していない(そして Data Engineer はシステムデザインと熟知しているのでミスは侵さない)&lt;/li>
&lt;li>e.g.&lt;/li>
&lt;li>実際著者が聞いたこんな話がある。 Data Scientists が Apache Spark を使って 10GB のデータ処理を行うのに 1 回 15m の時間がかかっていた。(だが RDBMS を使えば、10ms で終わる) Data Scientist は彼らの流儀を疑うこと無く 1 日に 16 回 Spark の処理を実行しており、15mx16=240m つまり 4h の時間を無駄にしてる。RDBMS を使えば、160ms で終わるというのに…&lt;/li>
&lt;li>Data Scientist が頑張ってシステムを構築するが、職能の限界で Data Engineer しか作れないシステムなので時間とお金の浪費になった&lt;/li>
&lt;li>&lt;strong>実情 :&lt;/strong> Data Scientist として雇われたのに、Data Engineer として働かざるを得ない人がほとんどだ
&lt;strong>理想的な人材配置
Case : 初期の組織&lt;/strong>: 2–3 人の Data Engineer : DataScientist Group
&lt;strong>Case : 更に複雑な事に取り組みたい&lt;/strong> 4–5 人の Data Engineer : 1 Data Scientist&lt;/li>
&lt;li>&lt;code>Data Engineer change to Data Scientist&lt;/code> の王道 → それが新しい職種 : &lt;strong>Machine Learning Engineer&lt;/strong>!!&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-24/images/2.png" alt="image">&lt;/p>
&lt;p>from : &lt;a href="https://www.oreilly.com/ideas/data-engineers-vs-data-scientists">https://www.oreilly.com/ideas/data-engineers-vs-data-scientists&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Machine Learning Engineer&lt;/strong> は両方の職種の経験がある。Machine Learning Engineer は Data Scientist が規律を守っていないコードのラストワンマイルを守り、データパイプラインを作る職種である。&lt;/li>
&lt;li>(&lt;em>ここで バランスを取るように Data Engineer のディスりが突然入る&lt;/em>) Data Engineer は白黒、0–1 の世界が好きなので推測の世界(DS)が好きではない。そのため、Machine Learning Engineer は Data Scientists ,Data Engineer のふたつにまたがる存在である&lt;/li>
&lt;li>時代の流れにより、最適化や機械学習のパッケージが揃いつつあり、既存の有名なアルゴリズムは簡単に使える。また Google Auto ML, Data Robot のように、Data Scientist の領域も代替可能な tools が普及しつつある&lt;/li>
&lt;li>&lt;strong>結論&lt;/strong>: Data Scientist, Data Engineer の役割が判明した今、組織の構造変革が必要&lt;/li>
&lt;li>Data Engineer を雇って Data Scientist の代わりにデータパイプラインのシステム構築させれば皆幸せになる。&lt;/li>
&lt;/ul></description></item><item><title>Google Colaboratory で Mecab-ipadic-Neologd を使用可能にする</title><link>https://shunyaueta.com/posts/2018-04-23/</link><pubDate>Mon, 23 Apr 2018 15:38:10 +0000</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2018-04-23/</guid><description>
&lt;p>Colabratory 上で 日本語に対する NLP をしたいときありませんか？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># install MeCab neologd&lt;/span>
!apt-get -q -y install sudo file mecab libmecab-dev mecab-ipadic-utf8 git curl python-mecab &amp;gt; /dev/null
!git clone --depth &lt;span class="m">1&lt;/span> https://github.com/neologd/mecab-ipadic-neologd.git &amp;gt; /dev/null
!echo yes &lt;span class="p">|&lt;/span> mecab-ipadic-neologd/bin/install-mecab-ipadic-neologd -n &amp;gt; /dev/null 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span>
!pip install mecab-python3 &amp;gt; /dev/null
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>インストールに成功しました。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-23/images/1.png" alt="image">&lt;/p>
&lt;p>Google Colabratory も以下で公開しているので参考にしてみてください&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/drive/1YK8XFnfD29775lEYWhwz3wh4h8boR9iE">colab-mecab-ipadic-NEologd.ipynb&lt;/a>&lt;/p></description></item><item><title>eBayのAR測定機能を試してみた</title><link>https://shunyaueta.com/posts/2018-04-16/</link><pubDate>Mon, 16 Apr 2018 14:57:41 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-04-16/</guid><description>
&lt;p>eBay が ARCore を使った商品の梱包測定機能を提供しているので試した&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/1.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/2.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/3.png" alt="image">&lt;/p>
&lt;p>梱包測定の仕組みとしては、ARCore(今回は Pixel2 XL で試した)で平面検出を行って、そこに eBay のダンボールオブジェクトを設置することで、ダンボールに入るかどうかを判定できる。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/4.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/5.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/6.png" alt="image">&lt;/p>
&lt;p>下のダンボールアイコンを選択して、検出された平面をタップするとダンボールオブジェクトを設置できる&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/7.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/8.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-16/images/9.png" alt="image">&lt;/p>
&lt;p>今回例として用いた MBP の空箱だと ARCore が空箱自体を平面と認識してしまうという罠があるので、床で平面検知を終えてから商品を置くという裏技が必要&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;ul>
&lt;li>ARCore を用いた AR 機能をすぐ試せる組織体制なのは凄い。ハッカソンで作ったのかな?&lt;/li>
&lt;li>実用性は 🙅、平面検出しかしてないので、荷物に合わせて最適なダンボールを選ぶのは結局ユーザー。そこまで自動化してこそ革新的な機能になるのではなかろうか&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a href="https://venturebeat.com/2018/03/19/ebay-uses-augmented-reality-to-help-sellers-find-the-right-box-for-their-product/">eBay uses augmented reality to help sellers find the right box for their product&lt;/a>&lt;/p></description></item><item><title>Google, Facebookが提供する機械学習基盤まとめ</title><link>https://shunyaueta.com/posts/2018-04-09/</link><pubDate>Mon, 09 Apr 2018 13:55:44 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-04-09/</guid><description>
&lt;p>Google, Facebook の機械学習基盤情報をまとめました&lt;/p>
&lt;p>Podcast でも紹介しました&lt;/p>
&lt;p>&lt;a href="https://anchor.fm/hurutoriya/episodes/2-Facebook-Google-ek6gm7/a-a58em8">#2 Facebook と Google の機械学習基盤について at just4fun.fm&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-09/images/1.gif" alt="image">&lt;/p>
&lt;p>TFX&lt;/p>
&lt;p>社内の勉強会で Google, Facebook が提供する機械学習基盤に関する論文を紹介したので、その資料を公開します#### 経緯&lt;/p>
&lt;p>機械学習をサービスとして提供開始すると、継続的な学習やプロダクション環境での機械学習の提供はモデル構築以外にもいろいろと考える問題が多くなります ¹&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-04-09/images/2.png" alt="image">&lt;/p>
&lt;p>[1] Hidden technical debt in Machine learning systems NIPS’15&lt;/p>
&lt;p>要するに機械学習をサービスとして届けるには、実はめちゃんこ大変なんだよという話なんですが、みんな同じ問題にぶち当たります。&lt;/p>
&lt;p>そのためプロダクションレディなレベルで機械学習を提供できるプラットフォームを各社が提案しておりその中でも Google, Facebook の事例を提供します。&lt;/p>
&lt;h3 id="tl-dr">TL; DR;&lt;/h3>
&lt;ul>
&lt;li>FBLearner: MLaaS の事例として最初に読むべき論文、MLaaS をどのような戦略で提供しているかを抽象的にまなべるため、鳥瞰図として読みましょう&lt;/li>
&lt;li>TFX は逆に機械学習基盤が必要とする技術スタックや要件などを詳細に説明しており、教科書的な立ち位置です。社内で機械学習基盤を内製したい場合に詳しく読み込むこと必須&lt;/li>
&lt;li>両社とも MLaaS をスケーラブルに提供する環境ができており、サービスのコアテクノロジーになっている&lt;/li>
&lt;/ul>
&lt;h3 id="google--tensorflow-expand">Google : Tensorflow Expand&lt;/h3>
&lt;p>TFX: A tensor flow-based production-scale machine learning platform&lt;/p>
&lt;h3 id="facebook--fbleaner">Facebook : FBLeaner&lt;/h3>
&lt;p>Applied machine learning at facebook a datacenter infrastructure perspective HPCA18&lt;/p>
&lt;p>&lt;a href="https://onnx.ai/">ONNX&lt;/a> を見ていると TensorFlow VS. ONNX 陣営が出来つつありどちらのプラットフォームに乗るかの戦略が大事だなと思います。&lt;/p>
&lt;p>Google はモバイル上の ML から超大規模分散学習まで TF シリーズで提供、実際のサービング環境も TFServing というスタックを提供しはじめていて個人的に TensorFlow が何歩も先にいっているという所感&lt;/p>
&lt;p>(逆に TensorFlow 一強状態になると、競争状態がなくなるので是非 ONNX 陣営には頑張ってほしい)&lt;/p></description></item><item><title>メルカリのTeam AI Meetup #1 に参加してきた #mercari_ai</title><link>https://shunyaueta.com/posts/2018-02-13/</link><pubDate>Tue, 13 Feb 2018 15:35:48 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-02-13/</guid><description>
&lt;p>メルカリが主催する機械学習のミートアップに参加してきたので備忘録がてらメモ書きです。書きなぐったメモなので意訳として捉えて下さい&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-02-13/images/1.png" alt="image">&lt;/p>
&lt;p>発表者の顔は隠しています。なにか問題があればお伝え下さい。&lt;/p>
&lt;p>&lt;a href="https://mercari.connpass.com/event/77545/">Team AI Meetup #1 (2018/02/13 19:00〜)&lt;/a>&lt;/p>
&lt;p>Twitter: &lt;a href="https://twitter.com/search?f=tweets&amp;amp;vertical=default&amp;amp;q=%23mercari_ai&amp;amp;src=tyah">#mercari_ai&lt;/a>&lt;/p>
&lt;h3 id="山口さん">山口さん&lt;/h3>
&lt;ul>
&lt;li>Image Net と mercari の持ってるデータセットは似てるのでいけるのでは!&lt;/li>
&lt;li>ルカリはクラス数 over 1100&lt;/li>
&lt;li>始期の推定値 Top5 29.3%&lt;/li>
&lt;li>エラー例 :画像からサイズを推定しないと男女のシューズを区別不可(人間でも不可能なエラー例が多い)&lt;/li>
&lt;li>意外と認識がうまくいく事例がかなりある(クラス設計の影響で推定が上手く出来ていないらしい)&lt;/li>
&lt;li>データセットはユーザーが作成してるので最高、画像が正方形なのも Good&lt;/li>
&lt;li>学習は GPU,推論は CPU 環境下で行っている&lt;/li>
&lt;li>画像検索自体はプロトタイプは出来ているが、実運用は計算量やリアルタイム性を担保するのが難しいので一旦保留中&lt;/li>
&lt;/ul>
&lt;p>大筋は以下の記事と資料で把握できます。k8s で運用しているなどの実運用の構成が今回の発表では差分として語られていました。&lt;/p>
&lt;p>&lt;a href="http://tech.mercari.com/entry/2017/12/23/100000">画像での商品検索に向けて - Mercari Engineering Blog&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://tech.mercari.com/entry/2017/09/04/170000">【Mercari Summer Internship】商品画像の色推定を行いました! - Mercari Engineering Blog&lt;/a>&lt;/p>
&lt;h3 id="工藤さん">工藤さん&lt;/h3>
&lt;ul>
&lt;li>運用を継続すると色んな問題が出てきたので、それを解決する基盤環境を作成しはじめた&lt;/li>
&lt;li>e.g. 学習データのバージョン管理、モデルのデプロイ, etc&lt;/li>
&lt;li>最終的には OSS としての公開も考えているとのこと&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://tech.mercari.com/entry/2017/12/02/093000">メルカリの今年 1 年間の機械学習の取り組みとこれから - Mercari Engineering Blog&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://rindai87.hatenablog.jp/entry/2018/01/04/005931">ML Ops Study (仮) #1&lt;/a>の発表内容も今回の機械学習の運用周りの Tips が共有されているので興味のある方はオススメです&lt;/p>
&lt;p>機械学習基盤といえば、最近&lt;strong>Polyaxon&lt;/strong>という OSS が公開されてました。&lt;/p>
&lt;p>&lt;a href="https://polyaxon.com/">Polyaxon&lt;/a>&lt;/p>
&lt;h2 id="qaセッション">&lt;strong>Q.A.セッション&lt;/strong>&lt;/h2>
&lt;ul>
&lt;li>Q. 論文などは参考にされますか？&lt;/li>
&lt;li>A. ある程度枯れた手法をメインに実装している&lt;/li>
&lt;li>TFX(KDD2017)など Google が出している機械学習の基盤関係の論文は非常に参考している&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>Q. 機械学習のプロジェクトをどう進めているか?&lt;/li>
&lt;li>A. ある程度の機械学習についての啓蒙が必要&lt;/li>
&lt;li>&lt;strong>必ずデモを見せて期待値のすり合わせを行っている&lt;/strong>&lt;/li>
&lt;li>&lt;strong>何もしらない人は機械学習に対して過度な期待ではなく間違った期待をしてしまっているのでそこのすり合わせは重要&lt;/strong>&lt;/li>
&lt;li>&lt;strong>e.g. データは無いが機械学習でなんとかして!&lt;/strong> など&lt;strong>雑感&lt;/strong> : 質疑応答でも機械学習を実運用したい場合にどう運用しているかにフォーカスした質問がメインでためになる質問が多かったので良かった。メルカリさんが今回のような知見を共有してくれるのは本当に尊敬できます。&lt;/li>
&lt;/ul></description></item><item><title>2018.01 KPT</title><link>https://shunyaueta.com/posts/2018-02-09/</link><pubDate>Fri, 09 Feb 2018 14:00:31 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-02-09/</guid><description>
&lt;p>2018 年 1 月の振り返りをざっくりと&lt;/p>
&lt;h2 id="keep">Keep&lt;/h2>
&lt;ul>
&lt;li>Mercari Competition にて初 Kaggle コンペ参加。 Best 116 位まで言ったんですが、NLP 周りの知見が無いのと、Kaggle 周りの力不足で現在は 317 位… ブロンズまで引き戻せるか…
&lt;blockquote>
&lt;p>[](&lt;a href="https://twitter.com/hurutoriya/status/952573577357770753">https://twitter.com/hurutoriya/status/952573577357770753&lt;/a>)
ぬか喜びしている図&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>Coursera で Ng 先生の&lt;a href="https://www.coursera.org/learn/machine-learning">ML コース&lt;/a>を始めた。あと 5 日位で無事終わりそう。とても分かりやすい(何故もっと早く受けなかったのか…)&lt;/li>
&lt;li>終わったら、&lt;a href="https://www.coursera.org/learn/competitive-data-science">How to Win a Data Science Competition: Learn from Top Kagglers&lt;/a>か Ng 先生の &lt;a href="https://www.deeplearning.ai/">deeplearning.ai&lt;/a> を始める予定&lt;/li>
&lt;li>本を 2 冊読めた。案外読む始めるのがハードル高いだけで、読み始めれば 1 日 30 分*5 日で読み終わることがわかったので今度から通勤途中に読むことにした。これで月 4 冊読んでいくようにしたい。2–3 月はメタ学習関連の本を読み進めていく。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://amzn.to/2Eel4ji">学力の経済学&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>[](&lt;a href="https://twitter.com/hurutoriya/status/960525598610268160">https://twitter.com/hurutoriya/status/960525598610268160&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="http://amzn.to/2EfPlOP">お金持ちになれる黄金の羽根の拾い方&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>[](&lt;a href="https://twitter.com/hurutoriya/status/952046931307458560">https://twitter.com/hurutoriya/status/952046931307458560&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Duolingo で英語学習を再開した。学習アプリとしてとても出来が良い。(名詞の複数形や冠詞などの細かい間違いを都度指摘されるのが好き。モバイルアプリ(iOS)は問題が重複して出題されるので PC メインで利用)&lt;/li>
&lt;/ul>
&lt;p>100%達成するぞ! Linkedin に成績が反映されなくなったのは残念。おそらく言語学習は継続性がないと意味がないのでそれを考慮してシステム変更したんだろうな&lt;/p>
&lt;ul>
&lt;li>住信 SBI ネット銀行を開設した。ネット銀行最高。&lt;/li>
&lt;li>&lt;a href="https://families.google.com/families">&lt;strong>Google Family&lt;/strong>&lt;/a> **を始めた。**予定管理は&lt;a href="https://timetreeapp.com/?locale=jp">TimeTree&lt;/a>を使ってデザインや使い勝手は不安が無かったんですが、Google Calendar に比べてアプリのインテグレーションや持続性(日本のベンチャー企業なのでいつまでそのサービスが持つのか)が不安になったので Google Family に乗り換えました。&lt;/li>
&lt;/ul>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;ul>
&lt;li>Kaggle のゴールドの壁を痛感。もっと精進せねば&lt;/li>
&lt;li>論文読みが止まってしまってた。機械学習基盤とプロダクション環境における機械学習関連の論文をテーマにしてまとめて書き上げる&lt;/li>
&lt;/ul>
&lt;h2 id="try">Try&lt;/h2>
&lt;ul>
&lt;li>02 月から仕事が始まるので(初社会人、入社完了したらまた振り返り Blog を書く)、社会人としてのメタスキルを実践できるようにしておく(e.g. &lt;a href="http://amzn.to/2EeUVRt">入社一年目の教科書&lt;/a> )&lt;/li>
&lt;li>日本語ニュース(TechCrunch Japan)を読むのを廃止、英語ニュースに切り替え&lt;/li>
&lt;li>英会話学習を始める、リスニング力も強化する(Podcast)&lt;/li>
&lt;li>対外発表の実績を積んでいく&lt;/li>
&lt;/ul></description></item><item><title>2018年の抱負</title><link>https://shunyaueta.com/posts/2018-01-29/</link><pubDate>Mon, 29 Jan 2018 16:08:35 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-29/</guid><description>
&lt;p>2018 年の抱負です。&lt;/p>
&lt;h2 id="works">Works&lt;/h2>
&lt;p>機械学習エンジニアとして六本木で働く事になりました。機械学習エンジニアとしてスペシャリストになれるように周辺スキルを伸ばしていきます。&lt;/p>
&lt;ul>
&lt;li>Kaggle Master に到達(1 gold medal, 2 silver medals)&lt;/li>
&lt;/ul>
&lt;p>初参加のコンペもずるずる下降してしまいブロンズ圏外に…&lt;/p>
&lt;ul>
&lt;li>Coursera, Udacity (MOOC)で CV, Robotics 周辺を学習していく&lt;/li>
&lt;li>Github で 50 star over の OSS を作る(CV or ML)&lt;/li>
&lt;li>勉強会に登壇 or 主催 する&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>メタ学習(学習の効率化)について小話&lt;/em>&lt;/strong>&lt;/p>
&lt;p>うまくなる技術&lt;a href="http://amzn.to/2DYm622">¹&lt;/a>などのメタ学習関連の本を色々と読み漁って学習のコツをいろいろ勉強してるんですが、&lt;strong>外的指標&lt;/strong>(Github Star, Kaggle Rank, Toggl tracking,Coursera Certificate)を目的にすると人間気持ちよく継続できるらしいのでそれに沿った行動をするよう心がけています。後 5–6 冊メタ学習の本を読み終えてまとまったらまた記事にする。&lt;/p>
&lt;p>サンシャイン丸の内さん&lt;a href="http://www.shiningmaru.com/entry/2017/10/28/192222">¹&lt;/a>や ふろむださん&lt;a href="http://d.hatena.ne.jp/fromdusktildawn/20080111/1200020891">¹&lt;/a>の記事も参考になるのでオススメです&lt;/p>
&lt;p>個人的に最近心に響いたのはのじゃろりおじさんの勉強の姿勢です。&lt;/p>
&lt;p>&lt;a href="http://ch.nicovideo.jp/nekomimi/blomaga/ar1390007">３ D や unity の勉強方法について。：ねこみみメモ&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>おそらく、やり続けて成功した人は「やり続ければ報われる！」と言うと思うのですが、&lt;strong>年齢や経済状況や自分の才能を疑ったり等……現実は難しいと思います。&lt;/strong>&lt;br>
私は偶然このタイミングで「オリジナルモデルの Vyoutuber を出せた」から幸運に恵まれただけで、純粋な技術ではおそらく就職は無理だったのではないかと思います。2018~19 年で見切りつけて諦めなきゃなと思ってたぐらいです。&lt;br>
なので「やり続ければ報われる」とはとても言えません。ただ**「やり続けて報われなくてもいいと思える事は、やり続けた方がいい」**とは思います。&lt;br>
他者の評価がどうであれ、やてって楽しくて満足できるのであればある意味常に成功している状態で、やればやるほど成功続きなわけです。&lt;/p>
&lt;/blockquote>
&lt;h2 id="english">English&lt;/h2>
&lt;ul>
&lt;li>DMM 英会話&lt;/li>
&lt;li>TOEFLE で 90 点、英語で働けるレベルを目指す&lt;/li>
&lt;li>英語 Blog 記事を定期的に書く&lt;/li>
&lt;/ul>
&lt;h2 id="health">Health&lt;/h2>
&lt;ul>
&lt;li>カラダステーションで内臓脂肪が少し高めになってたので走る(筋トレしかやってなかったツケが…)&lt;/li>
&lt;li>筋肉量も左右でバラツキ(利き手側じゃないほうが 100g 程度筋肉量が少ない)があるので整える&lt;/li>
&lt;/ul>
&lt;p>筋トレはケトルベル 16kg で色々とやってるので継続する。&lt;/p>
&lt;p>筋トレとランニング楽しむために Garmin Vivoactive3&lt;a href="http://amzn.to/2nncdAI">¹&lt;/a> を注文しました。&lt;/p>
&lt;p>使えない筋肉だと意味が無いのでプリズナートレーニング&lt;a href="http://amzn.to/2FoCLso">²&lt;/a>の本を読み込んで、筋肉全体の神経郡を発達させるような自重トレーニングをはじめました。&lt;/p>
&lt;p>プロテインは人工甘味料が入っていない以下の 2 種類で固定されました。&lt;/p>
&lt;p>過度な甘みは無く水単体でも飲めるくらいには自然な甘さなのでオススメです。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://iherb.co/jsMZJMC">Optimum Nutrition, ゴールドスタンダード、100%ホエイ、ナチュラル、チョコレート、4.8 ポンド (2.18 kg)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://iherb.co/3yJVPXTA">Dymatize Nutrition, ISO 100 加水分解化、100%ホエイプロテインアイソレート、グルメチョコレート、5 Lbs (2.3 kg)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="other">Other&lt;/h2>
&lt;ul>
&lt;li>本を毎月 3 冊読む(毎月 Blog で紹介)&lt;/li>
&lt;/ul></description></item><item><title>Where To Look: Focus Regions for Visual Question Answering (CVPR2016)を読んだ</title><link>https://shunyaueta.com/posts/2018-01-18/</link><pubDate>Thu, 18 Jan 2018 05:41:44 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-18/</guid><description>
&lt;p>Kevin J. Shih, Saurabh Singh, Derek Hoiem, “Where To Look: Focus Regions for Visual Question Answering”, in CVPR2016 &lt;a href="http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Shih_Where_to_Look_CVPR_2016_paper.pdf">link&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-18/images/1.png" alt="image">&lt;/p>
&lt;p>Summry&lt;/p>
&lt;p>を読んだので、軽くメモ。&lt;/p>
&lt;p>VQA(Visual Question Answer) 画像に対する質問に対して応答するタスクに対し、その質問クエリに対して画像のどの領域に注目すべきかのモデルの学習方法について論じた論文。&lt;/p>
&lt;h3 id="contribution">Contribution&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://www.visualqa.org/">VQA dataset&lt;/a>に対して、提案手法を適用。従来手法を全て上回った。&lt;/li>
&lt;li>画像に対して CNN を用いて物体領域の検出を行った後にベクトル化、質問クエリは&lt;code>word2vec&lt;/code>を用いてベクトル化を行う。&lt;/li>
&lt;li>その 2 つのベクトルを用いて内積計算により重み付けを行うことで、どの領域に注目すべきかを計算する。&lt;/li>
&lt;/ul>
&lt;h3 id="comments">Comments&lt;/h3>
&lt;p>引用文献の訳 9 割が 2014–2015(直近 2 年間)で発表された論文で、改めてこの分野の最先端を駆け抜けるのは凄まじい能力が必要になるなと思いました。&lt;br>
そして相変わらず CVPR の論文のネーミングセンスは良いですね。(ジャケ買いならぬジャケ読み)&lt;/p>
&lt;p>単純な質問なら、人間でも瞬間的に解答可能な物が多いなと感じた。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-18/images/2.png" alt="image">&lt;/p>
&lt;p>fig. 1&lt;/p>
&lt;p>セマンティックな疑問(Fig.1 雨は降っていますか?)の場合、人間に注目した場合は傘をさしているから雨と判断しても良いがもっと広い範囲で画像を見てみると空は快晴なので人間に注目するのは筋が悪く VQA はとても難しくチャレンジングな問題だと書かれていた。(それでも充分すごい領域に到達しているなと思うが)&lt;/p></description></item><item><title>Data-driven Crowd Analysis in Videos (ICCV2011)を読んだ</title><link>https://shunyaueta.com/posts/2018-01-17/</link><pubDate>Wed, 17 Jan 2018 05:55:41 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-17/</guid><description>
&lt;p>Data-driven Crowd Analysis in Videos (ICCV2011)を読んだ&lt;/p>
&lt;p>Mikel Rodriguez, Josef Sivic, Ivan Laptev, Jean-Yves Audibert, “Data-driven Crowd Analysis in Videos”, in ICCV2011.&lt;br>
&lt;a href="http://www.di.ens.fr/willow/research/datadriven/">Project Page&lt;/a>&lt;/p>
&lt;p>を読んだので、メモです。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-17/images/1.png" alt="image">&lt;/p>
&lt;p>Summary&lt;/p>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;ul>
&lt;li>高密度な群集内の個人を追跡を転移学習によって精度を向上させる手法&lt;/li>
&lt;/ul>
&lt;h2 id="contribution">Contribution&lt;/h2>
&lt;ul>
&lt;li>追跡の精度を転移学習によって向上させた&lt;/li>
&lt;li>転移学習を行うためのデータセットとそのフレームワークを考案&lt;/li>
&lt;/ul>
&lt;p>論文内では、転移学習の例として&lt;code>マラソンA&lt;/code>の群集を対象に追跡する際に、以下の流れで転移学習を行う。&lt;/p>
&lt;ol>
&lt;li>大域的な群衆状況のマッチング : 同じようなシーンを探索(この場合 DB 内にあるマラソン動画)&lt;/li>
&lt;li>局所的な群衆状況のマッチング : &lt;code>1&lt;/code>でマッチした動画においてオプティカルフローが類似するパッチを探索して転移学習&lt;/li>
&lt;/ol>
&lt;p>また、Rare Events(デモの最中に群集を横断するカメラマンなど、群衆の流れに対して同調しない動きを行う人物)に対しても実験を行い評価。&lt;/p>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>転移学習は自分のイメージだと、自然言語処理のイメージ(一般的な文書を学習したモデルを法律文書に対して適用するなど)しかなかったので新鮮な気持ちで読めた。&lt;br>
動画なら転移学習を行ったとしても、直感的に良い特徴を学べそうなので、良い仮説を立てている論文でした。&lt;/p>
&lt;p>最後に示されてる個人追跡における平均誤検出の単位が&lt;code>pixel&lt;/code>だが、Ground-Truth と提案手法の追跡軌跡の重複度具合を見てると誤検出が更に高そうに見えるけどどうなんでしょうか？&lt;br>
(テストデータのみ学習が &lt;code>58.82&lt;/code>、転移学習を行った提案手法だと &lt;code>46.88&lt;/code>になっていてもっと相対的な差が出てくるはず?)&lt;/p></description></item><item><title>Slicing Convolutional Neural Network for Crowd Video Understanding (CVPR2016)を読んだ</title><link>https://shunyaueta.com/posts/2018-01-16/</link><pubDate>Tue, 16 Jan 2018 06:04:37 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-16/</guid><description>
&lt;p>群衆解析の手法に興味があるので、サーベイの結果を放流しておきます。&lt;/p>
&lt;p>Jing Shao, Chen Change Loy, Kai Kang, and Xiaogang Wang, “Slicing Convolutional Neural Network for Crowd Video Understanding”, in CVPR, 2016.&lt;/p>
&lt;p>&lt;a href="http://www.ee.cuhk.edu.hk/~jshao/SCNN.html">Project Page&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-17/images/1.png" alt="image">&lt;/p>
&lt;p>Summary&lt;/p>
&lt;h3 id="一言説明">一言説明&lt;/h3>
&lt;p>時系列・空間的特徴から CNN で特徴を学習、群衆の動画に対して&lt;code>state-of-the-art&lt;/code>を達成&lt;/p>
&lt;p>3 個の CNN を用いて下記の３つの特徴を表現学習&lt;/p>
&lt;ul>
&lt;li>xy- : 空間的特徴&lt;/li>
&lt;li>xt- : x 軸の時系列特徴&lt;/li>
&lt;li>yt- : y 軸の時系列特徴&lt;/li>
&lt;/ul>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>Dataset として&lt;a href="http://www.ee.cuhk.edu.hk/~jshao/WWWCrowdDataset.html">WWW Crowd Dataset&lt;/a>&lt;br>
が公開されている。10,000 本の群衆の動画を収集公開しているとのこと。&lt;/p>
&lt;p>Demo Movie&lt;/p>
&lt;ul>
&lt;li>紹介動画を見てみたら分かるが、群衆の動画というよりも数が増大した結果一般的な画像認識のデモ動画になっている&lt;/li>
&lt;li>&lt;a href="http://www.ee.cuhk.edu.hk/~jshao/">Jing Shao&lt;/a>さんは CVPR2014 から群衆解析のための descriptor を提案したりしてたんだけど、2016 年から Deep な手法での群衆解析の研究をやっているのは手が早いなと&lt;/li>
&lt;li>所属グループは ISLVRC2015 の物体認識タスクで優勝した香港大学のグループ&lt;/li>
&lt;li>&lt;a href="http://mmlab.ie.cuhk.edu.hk/index.html">Multimedia Laboratory The Chinese University of Hong Kong&lt;/a>&lt;/li>
&lt;li>データセット、実装コードを必ず公開しているのは尊敬、またそれくらいやらないとトップには通過しないんだろうな&lt;/li>
&lt;li>CNN のアーキテクチャ毎の比較実験と考察をかなり入念に行っていた。数年後には各データのフォーマットに合わせたベストな DNN のアーキテクチャが決まってくるんじゃないだろうか&lt;/li>
&lt;/ul></description></item><item><title>Jupyter Notebookの差分を明瞭に確認する事ができるpackage : nbdime</title><link>https://shunyaueta.com/posts/2018-01-15/</link><pubDate>Mon, 15 Jan 2018 17:14:54 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-15/</guid><description>
&lt;p>Jupyter notebook をご利用の皆さん、朗報です。&lt;/p>
&lt;p>例えば、下記の２つの notebook の差分を比較したい際に、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nb_1.ipynb&lt;/strong>&lt;/li>
&lt;li>&lt;strong>nb_2.ipynb&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>diff&lt;/strong>コマンドを用いると下記のような結果になってしまいます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="gh">diff nb_1.ipynb nb_2.ipynb
&lt;/span>&lt;span class="gh">&lt;/span>[master] 14c14 &amp;amp;lt; “image/png”: “iVBORw0KGgoAAAANSUhEUgAAAX8AAAD8CAYAAACfF6SlAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xt8VPWd//HXh4SLEBAUCSgoqNiKl3pJvdRtGxRW0BZs\nvVRsvbRa+qs/u9vtbr1su/669mFbtr/t2u2DR1u26k+7damFqiyiKMigaEFABImAhIRLuF8TApIL\n+fz+yOCOIZDJzJk5M3Pez8cjD+ZMvud8P18nvnPynTnfY+6OiIhES5ewCxARkexT+IuIRJDCX0Qk\nghT+IiIRpPAXEYkghb+ISAQp/EVEIkjhLyISQQp/EZEIKg67gGPp37+/Dx06NOX9Dxw4QK9evYIr\nKA9EbcxRGy9ozFGRzpiXLl26y91P6bChu6f9BYwB1gCVwIPHaHML8D5QATzT0TEvvfRST8e8efPS\n2j8fRW3MURuvu8YcFemMGVjiSeR22mf+ZlYETAZGAzXAYjOb4e7vJ7QZDjwEXOXue81sQLr9iohI\n6oKY878MqHT3KndvBKYC49u0+SYw2d33Arj7jgD6FRGRFJmnuaqnmd0EjHH3e+LbtwOXu/t9CW2e\nBz4ArgKKgB+5+8vtHGsiMBGgtLT00qlTp6ZcV319PSUlJSnvn4+iNuaojRc05qhIZ8wjR45c6u5l\nHbXL1hu+xcBwoBwYDLxuZhe4+77ERu4+BZgCUFZW5uXl5Sl3GIvFSGf/fBS1MUdtvKAxR0U2xhzE\ntM9mYEjC9uD4c4lqgBnu3uTu1bT+FTA8gL5FRCQFQYT/YmC4mQ0zs27ArcCMNm2ep/WsHzPrD5wD\nVAXQt4iIpCDt8Hf3ZuA+YDawCnjW3SvM7BEzGxdvNhvYbWbvA/OA77v77nT7FhGR1AQy5+/us4BZ\nbZ57OOGxA9+Lf4mISMhy9grffLFuzzoeW/gYFTsrOKvfWdz76Xu5eNDFYZclInJcCv80PLfqOb76\n56/yYfOHAMxbP48n3n2Cn17zU77/me9jZiFXKCLSPi3slqJ51fO4ZdotHwX/ES3ewgNzHuCnC34a\nUmUiIh1T+Kdg98HdTJg+geaW5mO2+cFrP2DGmrYfehIRyQ0K/xTc/+r9bD+wvcN233jhG+w4oJUs\nRCT3KPw7afm25Tz57pNJtd394W6+N1sfcBKR3KPw76R/nv/POMmvh/SH9/7AW5veymBFIiKdp/Dv\nhDW71vDc6uc6vd8Dcx4g3QX0RESCpPDvhF+9/auU9luwcQFzquYEXI2ISOoU/kk60HiAp5c/nfL+\nj77xaIDViIikR+GfpOmrprO/cX/K+8/fMJ/FmxcHWJGISOoU/kn6/Yrfp32MxxY9FkAlIiLpU/gn\nYXv9dl6rfi3t4/yp4k9sq98WQEUiIulR+CfhudXP0eItaR+nqaWJJ5cld42AiEgmKfyT8OdVfw7s\nWP/xzn8E8otERCQdCv8O1B6qZd76eYEdr3pfNbH1scCOJyKSCoV/B15Z98pxF3BLxVPLnwr0eCIi\nnRVI+JvZGDNbY2aVZvZgO9+/y8x2mtm78a97gug3G16qfCnwY057fxoHGg8EflwRkWSlHf5mVgRM\nBsYCI4AJZjainaZ/dPeL4l+/S7ffbHB3Xq58OfDjHmw6yAtrXgj8uCIiyQrizP8yoNLdq9y9EZgK\njA/guKGr2FnB1vqtGTn2M+89k5HjiogkI4jwPw3YlLBdE3+urRvNbIWZTTOzIQH0m3Fzq+Zm7Niv\nrHuFPR/uydjxRUSOJ1v38P1v4L/cvcHMvgU8BVzdtpGZTQQmApSWlhKLxVLusL6+Pq39AZ5d+Wxa\n+x9PU0sTk16YxNiBYwM7ZhBjzidRGy9ozFGRjTEHEf6bgcQz+cHx5z7i7rsTNn8H/Et7B3L3KcAU\ngLKyMi8vL0+5qFgsRjr7t3gLqxatSnn/ZLx3+D0mlU8K7HjpjjnfRG28oDFHRTbGHMS0z2JguJkN\nM7NuwK3Ax25ea2aDEjbHAZlN1QC8t/099h7am9E+5lTNofZQbUb7EBFpT9rh7+7NwH3AbFpD/Vl3\nrzCzR8xsXLzZ35hZhZktB/4GuCvdfjPtjY1vZLyPppYmXlz7Ysb7ERFpK5A5f3efBcxq89zDCY8f\nAh4Koq9seXPTm1np5/nVz3PbBbdlpS8RkSN0he8xvLkxO+H/UuVLNDQ3ZKUvEZEjFP7tqKmrYVPd\npo4bBqC+sV5r/YhI1in827GoZlFW+9PVviKSbQr/diysWZjV/l5c+yLuntU+RSTaFP7tWLwlu/fa\n3Vi7kZU7Vma1TxGJNoV/G4dbDrNky5Ks9ztr7ayOG4mIBETh38bqXas50JT95ZZnVSr8RSR7FP5t\nvLP1nVD6fWvTW7raV0SyRuHfxtKtS0Ppt7mlmbnVmVtFVEQkkcK/jbDO/AFmV84OrW8RiRaFf4IW\nb+Hdbe+G1v/sdbP1kU8RyQqFf4KqvVXsb9wfWv8bajfwwe4PQutfRKJD4Z8gzLP+I16tejXsEkQk\nAhT+CZZvWx52CQp/EckKhX+CFTtWhF0C86rn0dzSHHYZIlLgFP4JVmwPP/z3N+7n7c1vh12GiBQ4\nhX9cXUMd6/etD7sMAOZW6fP+IpJZCv+4ih0VYZfwEc37i0imBRL+ZjbGzNaYWaWZPXicdjeamZtZ\nWRD9BimXVtVcWLOQA43ZX19IRKIj7fA3syJgMjAWGAFMMLMR7bTrDfwtkN07pSQpl8K/qaUpa/cQ\nFpFoCuLM/zKg0t2r3L0RmAqMb6fdj4FJwKEA+gxcxc7cmfYBzfuLSGYFEf6nAYk3vK2JP/cRM7sE\nGOLuLwbQX0a8v/P9sEv4mHnr54VdgogUsOJMd2BmXYBfAHcl0XYiMBGgtLSUWCyWcr/19fVJ77+/\naT9b67em3FcmLN2ylJlzZlJSXJL0Pp0ZcyGI2nhBY46KbIw5iPDfDAxJ2B4cf+6I3sD5QMzMAAYC\nM8xsnLt/7JZZ7j4FmAJQVlbm5eXlKRcVi8VIdv+3Nr0Fb6XcVUa00AKnQ/k55Unv05kxF4KojRc0\n5qjIxpiDmPZZDAw3s2Fm1g24FZhx5JvuXuvu/d19qLsPBRYCRwV/mFbtXBV2Ce2aV62pHxHJjLTD\n392bgfuA2cAq4Fl3rzCzR8xsXLrHz4ZVu3I0/DXvLyIZEsicv7vPAma1ee7hY7QtD6LPIK3etTrs\nEtr17rZ32XdoH3179A27FBEpMLrCl9wNf8d5Y8MbYZchIgUo8uHf0NxA9b7qsMs4pvkb5oddgogU\noMiHf+WeSlq8Jewyjim2PhZ2CSJSgCIf/mt2rwm7hONatm0ZtYdqwy5DRApM5MM/1++Z2+ItWudH\nRAKn8M/x8AeYv17z/iISLIV/HoT/6xtfD7sEESkwkQ//tXvWhl1Ch5ZsWaL1/UUkUJEO/9pDtew4\nsCPsMjrU3NLMwpqFYZchIgUk0uFfuacy7BKS9voGTf2ISHAiHf75MOVzhOb9RSRI0Q7/3fkT/gtr\nFtJ4uDHsMkSkQEQ6/Cv35s+0z6HmQyzZkjOrYItInot0+K/bsy7sEjpFi7yJSFCiHf578yz8Nyr8\nRSQYkQ3/+sZ6ttVvC7uMTlmwcUFOL0InIvkjsuFftbcq7BI6rbahlpU7VoZdhogUAIV/ntG8v4gE\nIZDwN7MxZrbGzCrN7MF2vv+/zOw9M3vXzBaY2Ygg+k1H3oa/5v1FJABph7+ZFQGTgbHACGBCO+H+\njLtf4O4XAf8C/CLdftOVr+G/YOMC3D3sMkQkzwVx5n8ZUOnuVe7eCEwFxic2cPe6hM1eQOjpla/h\nv3n/ZtbvWx92GSKS54oDOMZpwKaE7Rrg8raNzOx/A98DugFXt3cgM5sITAQoLS0lFoulXFR9ff1x\n91+5OX/fOJ0yewrXDrz2qOc7GnOhidp4QWOOimyMOYjwT4q7TwYmm9ltwA+BO9tpMwWYAlBWVubl\n5eUp9xeLxTjW/i3ewo4Fub+a57Hs7rW73bEdb8yFKGrjBY05KrIx5iCmfTYDQxK2B8efO5apwA0B\n9JuybfXbaDjcEGYJadGbviKSriDCfzEw3MyGmVk34FZgRmIDMxuesHk9EOqKatV7q8PsPm2rd61m\n54GdYZchInks7fB392bgPmA2sAp41t0rzOwRMxsXb3afmVWY2bu0zvsfNeWTTYXwhqlu6i4i6Qhk\nzt/dZwGz2jz3cMLjvw2in6AUQvgv2LiAGz4Z6uyZiOSxSF7hWyjhLyKSqmiGf+36sEtI29KtSznY\ndDDsMkQkT0Uz/AvgzL+5pZm3N78ddhkikqciF/4t3sLG2o1hlxEILfImIqmKXPhv3b+1YO6Fq8/7\ni0iqIhf+G2o3hF1CYP5S8xeaW5rDLkNE8lD0wn9f4YR/fWM9K7avCLsMEclD0Qv/AjrzB3hzoy72\nEpHOi1z4F8qbvUdo3l9EUhG58C+0M/83Nr6hm7uISKdFLvwL7cx/W/02qvfl90J1IpJ9Cv8CoM/7\ni0hnRSr8aw/VUtdQ13HDPKN5fxHprEiFfyGe9YPCX0Q6T+FfAD7Y/QE7DuTvbSlFJPsiFf6b6jZ1\n3ChPaYlnEemMSIV/oZ75g970FZHOCST8zWyMma0xs0oze7Cd73/PzN43sxVmNtfMzgii384q5DN/\nzfuLSGekHf5mVgRMBsYCI4AJZjaiTbNlQJm7XwhMA/4l3X5Tsam2cMN/2bZlHGzWzV1EJDlBnPlf\nBlS6e5W7NwJTgfGJDdx9nrsfSaaFwOAA+u20Qp72afEWKuoqwi5DRPJEEOF/GpB4Sl0Tf+5Y7gZe\nCqDfTmnxFjbv35ztbrPqvdr3wi5BRPJEcTY7M7OvAWXA54/x/YnARIDS0lJisVjKfdXX139s/72N\newvmJi7HsmzPsrT+m+Wbtq9xFGjM0ZCNMQcR/puBIQnbg+PPfYyZjQJ+AHze3RvaO5C7TwGmAJSV\nlXl5eXnKRcViMRL3X7plKfwl5cPlhQ8OfsCVf3Ul3Yu7h11KVrR9jaNAY46GbIw5iGmfxcBwMxtm\nZt2AW4EZiQ3M7GLgt8A4dw/laqSaupowus2qxpZGlmxZEnYZIpIH0g5/d28G7gNmA6uAZ929wswe\nMbNx8WY/B0qAP5nZu2Y24xiHy5hC/phnotc3vB52CSKSBwKZ83f3WcCsNs89nPB4VBD9pCMKZ/7Q\n+nn/h3go7DJEJMdF5grfQv+kzxFvbnqTwy2Hwy5DRHJcZMI/Kmf+dQ11LN++POwyRCTHKfwLkOb9\nRaQjkQh/d2dzXTSmfQDmb5gfdgkikuMiEf57D+3lw+YPwy4ja17f8Dot3hJ2GSKSwyIR/lE66wfY\n8+EeKnZonR8RObZohH9EPumTSFM/InI80Qj/iJ35g8JfRI4vGuEfxTP/9fNx97DLEJEcFY3wj+CZ\n/86DO1m9a3XYZYhIjopG+EfwzB8gtj4WdgkikqMiEf5b9m8Ju4RQzFs/L+wSRCRHRSL8o3rmP3+D\n5v1FpH0FH/5Nh5vYcSCUWwiEbseBHazatSrsMkQkBxV8+G+r3xZ2CaGaV62pHxE5WsGHf1Tn+4/Q\nvL+ItKfgwz+q8/1HxNbHtM6PiByl4MN/6/6tYZcQqt0f7mbljpVhlyEiOSaQ8DezMWa2xswqzezB\ndr7/OTN7x8yazeymIPpMVtSnfQDmVs0NuwQRyTFph7+ZFQGTgbHACGCCmY1o02wjcBfwTLr9ddaW\neoW/5v1FpK0gzvwvAyrdvcrdG4GpwPjEBu6+3t1XAFmffI76tA+0zvs3tzSHXYaI5JDiAI5xGrAp\nYbsGuDyVA5nZRGAiQGlpKbFYLOWi6uvricVirN22NuVjFIr9jfuZMnMKI/q0/YMsvx15jaNEY46G\nbIw5iPAPjLtPAaYAlJWVeXl5ecrHisVilJeXU/t2bUDV5bc9ffdQ/rnysMsI1JHXOEo05mjIxpiD\nmPbZDAxJ2B4cfy50Dc0N7P5wd9hl5IS51XrTV0T+RxDhvxgYbmbDzKwbcCswI4Djpi3qV/cmemvT\nWxxoPBB2GSKSI9IOf3dvBu4DZgOrgGfdvcLMHjGzcQBm9mkzqwFuBn5rZlm5wezWer3Ze0Tj4Ube\n2PhG2GWISI4IZM7f3WcBs9o893DC48W0TgdllT7p83FzquYw5uwxYZchIjmgoK/w1Zn/x71a9WrY\nJYhIjijo8NfVvR+3YvsKvQ8iIkCBh7+C7mivrtPZv4gUePhr2udomvoRESjw8NeZ/9FeWfeKlngW\nkcIOf33a52jbD2xnxfYVYZchIiEr2PA/7Icje+/ejrxc+XLYJYhIyAo2/Gubajnsh8MuIycp/EUk\npxZ2C9Kexj1hl5Cz3tz0JnUNdfTp3ifsUiTBwaaDvL/zfVbvWk313mq21m9lz4d7ONB0gKbDTZgZ\n9XvrOXPfmfQ/oT+Deg/ijBPP4KyTzuITJ3+CXt16hT0EySMK/whqbmnm1XWvcuOIG8MuJdIONR9i\nXvU8Zq+bzfwN83lv+3tJ/bW6YPeCdp8/q99ZXDzoYi4/7XKuHHwlZaeW0b24e9BlS4FQ+EfUS5Uv\nKfxD0OItvFb9Gk8tf4rnVz9PfWN9YMdet3cd6/auY9r70wDoUdyDzwz5DKOGjeLas6/looEX0cUK\ndqZXOqlgw39v496wS8hps9bOwt0xs7BLiYSDTQd5ctmT/HLRL1m7Jzs3GDrUfIjXql/jterX+MfX\n/pHSXqVcP/x6xn1iHKPPGk3Prj2zUofkpoINf535H9/W+q0s27aMSwZdEnYpBe1Q8yF+vfjX/OzN\nn4X+6bPtB7bzxLtP8MS7T9Cza0/Gnj2Wm0bcxPXDr6d3996h1ibZp/CPsJkfzFT4Z4i7M33VdP7h\nlX9gQ+2GsMs5ysGmg0xfNZ3pq6bTo7gH1w+/nq+c9xWuP+d6/UUQEQU7Aajw79jMD2aGXUJBqt5b\nzZg/jOHmP92ck8Hf1qHmQ0xfNZ1bpt3CgJ8P4Kt//iovfvAijYcbwy5NMqhww79J4d+RxVsW6yro\nALk7v178a87/9fm8su6VsMtJyYGmAzzz3jN84b++wKB/HcS3/vtbxNbHONyia2YKTcGGv97wTc6L\na18Mu4SCsOvgLsZNHce9s+7lYNPBsMsJxJ4P9zDlnSmMfGokpz92On/38t+xqGYR7h52aRKAQMLf\nzMaY2RozqzSzB9v5fncz+2P8+4vMbGgQ/R5LQ3MD+5v3Z7KLgvHCmhfCLiHvLaxZyMW/vbigp9G2\n7N/CY4se44rHr2DYL4dx/6v38/bmt/WLII+lHf5mVgRMBsYCI4AJZjaiTbO7gb3ufjbwb8CkdPs9\nnrA/VZFP5lTN0Y3d0/D4O4/zuSc/R01dTdilZM2G2g38/K2fc/nvLmfoL4fy3Ze/y/z182luaQ67\nNOmEIM78LwMq3b3K3RuBqcD4Nm3GA0/FH08DrrEMfsBcSzkn71DzIWavmx12GXnncMth/n7233PP\nf99DU0tT2OWEZmPtRn656JeUP1XOwP87kDueu4NnK55l36F9YZcmHQjio56nAZsStmuAy4/Vxt2b\nzawWOBnYFUD/R6lrqKN/t/50694tE4fPWY0NjSmNefHmxVx+WtuXLPftbNjJ5rrNWe/3hK4n8KPY\nj5i+ajqn9j41q32n+hpny9zqucytnktxl2KuGHwFf33mXzP6rNH0KO5B0+HUfkmG9TqHoYt1oW+P\nvlnpK6c+529mE4GJAKWlpcRisZSOU0QRT17wJCUlJQFWl/vq6+tTGvP+pv0MfWwozZ6Hf7YvzG53\nvYp68ej5j/Llvl/my5d8Obudk/prHJo6qFpWxcHmg6ysW8nyfctZWbeSNfvX0NDSkPxxsvw6B6mr\ndaVft36c1O0kTup2Uuvjrq3/9uvWj75d+3Ji1xPp27Uvfbr2ociKqK+vTzn/khVE+G8GhiRsD44/\n116bGjMrBk4Edrc9kLtPAaYAlJWVeXl5ecpFxWIx0tk/H6Uz5qu3X523H0/Mlv49+zP7a7NDvTAu\nn3+ur+O6jx43tzSzcsdKlmxZwjtb32H59uWs3LGSuoa6ECvsnO5F3RnUexCn9j6VQSWDGFTS+vjU\n3qcyqHfr9qDegzj5hJM7vYxKNl7nIMJ/MTDczIbRGvK3Are1aTMDuBP4C3AT8JrrYwI55aZzb1L4\nH0dpr1Lm3jGX8wacF3YpBaG4SzEXDbyIiwZe9LHna+pqWL1rNWt3r2Xd3nWs37eeipoKar2WHQd2\nZPweHX269+HkE06mf8/+nNLrFAb0GsCAngMoLSllYMnAj74GlQyi3wn9MlpLpqUd/vE5/PuA2UAR\n8IS7V5jZI8ASd58BPA783swqgT20/oKQHHLDJ2/g2y9+WzfAaUdpr1Lm3TmPc085N+xSCt7gPoMZ\n3Gcwo84c9dFzR86CW7yFXQd3sevgLnYf3M2+Q/vY37if+sZ6Pmz6kIbDDTQebuRwy+GP7lPdxbrQ\ntagrXbt0pXtxd04oPoETup5ASbcS+nTvQ+9uvenbo+9HX12LuoY19KwLZM7f3WcBs9o893DC40PA\nzUH0JZlxSq9TKB9aztzquWGXklP69+zP3DvmKvhzQBfr0nom3mtA2KUUhIK9wlc675bzbgm7hJzS\nt0dfXr39VU31SEFS+MtHbjz3Roq75NQHwELTs2tPZk6YedSctEihUPjLR07ueTKjzxwddhmhK+5S\nzLSbp3HV6VeFXYpIxij85WMmnD8h7BJCZRiPj3ucscPHhl2KSEYp/OVjvnTulyJ9M49Hr36UOz51\nR9hliGScwl8+pqRbCeM/0XZppmj41qXf4qHPPhR2GSJZofCXo0TxzHfs2WOZfN3ksMsQyRqFvxxl\n9JmjGVQyKOwysubC0gv5401/pKhLUdiliGSNwl+OUtSliNsvvD3sMrJiYMlAZk6YSe/uvcMuRSSr\nFP7SrrsvuTvsEjKuR3EPXrj1BYacOKTjxiIFRuEv7Trn5HP47OmfDbuMjHpy/JNcdtplYZchEgqF\nvxzTNy/5ZtglZMwPP/tDbj1f6wtKdCn85ZhuPu9mTjrhpLDLCNyXPvklHhn5SNhliIRK4S/H1KO4\nB1+/6OthlxGoT5V+it9/6fedvrmGSKFR+Mtx3fvpe+lihfFjckrPU5gxYQa9uvUKuxSR0BXG/9WS\nMWf2O5Prh18fdhlp69qlK9Nvmc7pJ54edikiOUHhLx367hXfDbuEtE2+bjKfPaOwP70k0hkKf+nQ\n1cOuzut17b9z2Xf45qWF+8klkVSkFf5mdpKZvWpma+P/tntHYzN72cz2mdnMdPqT8Nz/mfvDLiEl\no88czb9d+29hlyGSc9I9838QmOvuw4G58e32/ByIxnoBBeqW827hzH5nhl1Gp5xz8jk8e/OzWrNH\npB3phv944Kn446eAG9pr5O5zgf1p9iUhKupSxEN/lT/LHffr0Y+ZE2bSt0ffsEsRyUnm7qnvbLbP\n3fvGHxuw98h2O23LgX9w9y8c53gTgYkApaWll06dOjXl2urr6ykpKUl5/3yU6TE3tzRz++Lb2XZo\nW8b6CEKxFTPpgklc0u+SsEsJnH6uoyGdMY8cOXKpu5d11K7Du3Wb2RxgYDvf+kHihru7maX+m6T1\nGFOAKQBlZWVeXl6e8rFisRjp7J+PsjHmR/s9yt0zcnvRt9984TcFuzCdfq6jIRtj7nDax91Hufv5\n7Xy9AGw3s0EA8X93ZLRaCd2dn7qTc/ufG3YZx/TgVQ8WbPCLBCndOf8ZwJ3xx3cCL6R5PMlxRV2K\nmDRqUthltOu2C27jJ9f8JOwyRPJCuuH/M2C0ma0FRsW3MbMyM/vdkUZm9gbwJ+AaM6sxs2vT7FdC\n9MVPfJFrhl0Tdhkfc/Wwq3ly/JNas0ckSR3O+R+Pu+8GjkoBd18C3JOwrUsrC8yvxv6KT/3mUzS1\nNIVdChcPvJjnvvIc3Yq6hV2KSN7QFb6SknNPOZfvf+b7YZfBOSefw8tfe5k+3fuEXYpIXlH4S8r+\n6fP/xCf7fzK0/gf2GMic2+cwoNeA0GoQyVcKf0lZj+IePH3D0xR3SWv2MCWnn3g6v7jwF7r/rkiK\nFP6Slk+f9ml+PPLHWe1zaN+hxO6MMeiEQVntV6SQKPwlbQ9c9QBfPOeLWenr3P7n8sbX32BYv2FZ\n6U+kUCn8JW1mxh++/AcuGHBBRvu5ashVLPjGAgb3GZzRfkSiQOEvgejdvTcvf+1lhvXNzBn57Rfe\nztw75hbkDeVFwqDwl8Cc2vtU5t05j7NPOjuwY3Yr6sa/j/l3nv7S03Qv7h7YcUWiTuEvgTqj7xm8\n+Y03uXLwlWkf68LSC1l0zyK+c/l3AqhMRBIp/CVwA3oNYP5d87n/M/dTZJ2/kUqf7n2YNGoSS765\nJK9vHymSyxT+khFdi7oyafQk3vnWO1w//HqMjtfcOaXnKfzwsz+k6m+quP+q++la1DULlYpEU/av\nzpFIubD0QmbeNpN1e9Yx7f1pvL7xddbuXktdQx09intw+omnc8mgS7j2rGsZdeYoBb5Ilij8JSvO\nOuksHvirB3iAB8IuRUTQtI+ISCQp/EVEIkjhLyISQQp/EZEISiv8zewkM3vVzNbG/+3XTpuLzOwv\nZlZhZivM7Cvp9CkiIulL98z/QWCuuw8H5sa32zoI3OHu5wFjgMfMrG+a/YqISBrSDf/xwFPxx08B\nN7Rt4O4fuPva+OMtwA7glDT7FRGRNKQb/qXuvjX+eBtQerzGZnYZ0A1Yl2a/IiKSBnP34zcwmwMM\nbOdbPwCecve+CW33uvtR8/7x7w0CYsCd7r7wGG0mAhMBSktLL506dWoyY2hXfX09JSUlKe+fj6I2\n5qiNFzTmqEhnzCNHjlzq7mUdtesw/I+7s9kaoNzdtx4Jd3f/RDvt+tAa/D9x92lJHnsnsCHl4qA/\nsCuN/fNR1MYctfGCxhwV6Yz5DHfvcGo93eUdZgB3Aj+L//tC2wZm1g14Dng62eAHSKb44zGzJcn8\n9iskURtz1MYLGnNUZGPM6c75/wwYbWZrgVHxbcyszMx+F29zC/A54C4zezf+pXV6RURClNaZv7vv\nBq5p5/lLXv8NAAADtElEQVQlwD3xx/8J/Gc6/YiISLAK+QrfKWEXEIKojTlq4wWNOSoyPua03vAV\nEZH8VMhn/iIicgx5Hf5mNsbM1phZpZkdtbSEmXU3sz/Gv7/IzIZmv8pgJTHm75nZ+/F1lOaa2Rlh\n1Bmkjsac0O5GM3Mzy/tPhiQzZjO7Jf5aV5jZM9muMWhJ/GyfbmbzzGxZ/Of7ujDqDIqZPWFmO8xs\n5TG+b2b27/H/HivM7JJAC3D3vPwCimi9UvhMWq8aXg6MaNPmXuA38ce3An8Mu+4sjHkk0DP++NtR\nGHO8XW/gdWAhUBZ23Vl4nYcDy4B+8e0BYdedhTFPAb4dfzwCWB923WmO+XPAJcDKY3z/OuAlwIAr\ngEVB9p/PZ/6XAZXuXuXujcBUWtcaSpS49tA04Boz6/hO4rmrwzG7+zx3PxjfXAgMznKNQUvmdQb4\nMTAJOJTN4jIkmTF/E5js7nsB3H1HlmsMWjJjdqBP/PGJwJYs1hc4d38d2HOcJuNpvT7KvXVVhL7x\ni2kDkc/hfxqwKWG7Jv5cu23cvRmoBU7OSnWZkcyYE91N65lDPutwzPE/h4e4+4vZLCyDknmdzwHO\nMbM3zWyhmY3JWnWZkcyYfwR8zcxqgFnAd7JTWmg6+/97p+gG7gXKzL4GlAGfD7uWTDKzLsAvgLtC\nLiXbimmd+imn9a+7183sAnffF2pVmTUB+H/u/q9mdiXwezM7391bwi4sH+Xzmf9mYEjC9uD4c+22\nMbNiWv9U3J2V6jIjmTFjZqNoXXhvnLs3ZKm2TOlozL2B84GYma2ndW50Rp6/6ZvM61wDzHD3Jnev\nBj6g9ZdBvkpmzHcDzwK4+1+AHrSugVOokvr/PVX5HP6LgeFmNiy+ftCttK41lOjI2kMANwGvefyd\nlDzV4ZjN7GLgt7QGf77PA0MHY3b3Wnfv7+5D3X0ore9zjPPWq8zzVTI/28/TetaPmfWndRqoKptF\nBiyZMW8kvqKAmZ1La/jvzGqV2TUDuCP+qZ8rgFr/nyX005a30z7u3mxm9wGzaf2kwBPuXmFmjwBL\n3H0G8DitfxpW0vrGyq3hVZy+JMf8c6AE+FP8ve2N7j4utKLTlOSYC0qSY54N/LWZvQ8cBr7vrcut\n5KUkx/z3wH+Y2d/R+ubvXfl8Mmdm/0XrL/D+8fcx/g/QFcDdf0Pr+xrXAZW03hHx64H2n8f/7URE\nJEX5PO0jIiIpUviLiESQwl9EJIIU/iIiEaTwFxGJIIW/iEgEKfxFRCJI4S8iEkH/H6iRjqvW7TK6\nAAAAAElFTkSuQmCC\n”, — - &amp;amp;gt; “image/png”: “iVBORw0KGgoAAAANSUhEUgAAAX8AAAD8CAYAAACfF6SlAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XuUVOWZ7/HvQzcXFQko0LaiggYTSDQqxMu4JgMIEWIC\nJiJHnPGSUfHEozOJOQGZZDwZs8wMyTrRXFgzQzQcdOIgwqgEkBaabm4GpRFBUJCbl0YQ5dLQIDRN\nP+ePLpiiaejq2rtqV9X+fdaqRe3qt/b7vF3Nr3e/Vfvd5u6IiEi8tIm6ABERyT6Fv4hIDCn8RURi\nSOEvIhJDCn8RkRhS+IuIxJDCX0QkhhT+IiIxpPAXEYmh4qgLOJmuXbt6z549037+/v37OeOMM8Ir\nKA/EbcxxGy9ozHERZMwrVqz41N27tdjQ3QPfgKHAemAj8PBJ2owC3gbWAs+2tM9+/fp5EBUVFYGe\nn4/iNua4jdddY46LIGMGqjyF3A585G9mRcBEYAhQDSw3s5nu/nZSm97AeOA6d99tZt2D9isiIukL\nY87/KmCju2929zpgKjCiSZt7gYnuvhvA3XeE0K+IiKTJPOCqnmY2Ehjq7vcktm8Hrnb3B5LavAi8\nC1wHFAE/dfe5zexrDDAGoKSkpN/UqVPTrqu2tpaOHTum/fx8FLcxx228oDHHRZAxDxw4cIW792+p\nXbbe8C0GegMDgB7AIjO71N33JDdy90nAJID+/fv7gAED0u6wsrKSIM/PR3Ebc9zGCxpzXGRjzGFM\n+2wFzk/a7pF4LFk1MNPdD7v7Fhr/CugdQt8iIpKGMMJ/OdDbzHqZWTvgVmBmkzYv0njUj5l1BS4B\nNofQt4iIpCFw+Lt7PfAAUAa8A0xz97Vm9qiZDU80KwN2mtnbQAXwI3ffGbRvERFJTyhz/u4+B5jT\n5LFHku478FDiJiIiEdPyDgFt2rSJBx98kEGDBnHvvfeycuXKqEsSEWmRwj+AF154gUsvvZTf/e53\nVFRU8OSTT9K/f39+8YtfEPQjtCIimaTwT1NFRQWjRo3is88+O+7xhoYGxo0bxz//8z9HVJmISMsU\n/mnYuXMno0ePpr6+/qRtfvzjHzNzZtMPPYmI5AaFfxrGjh3Lxx9/3GK7v/3bv2XHDq1kISK5R+Hf\nSqtWrWLy5Mkptd25cycPPaQPOIlI7lH4t9I//dM/terN3D/+8Y+8+uqrGaxIRKT1FP6tsH79el54\n4YVWP2/cuHH69I+I5BSFfyv89re/Tet5S5YsYf78+SFXIyKSPoV/ivbv38/TTz+d9vMfe+yxEKsR\nEQlG4Z+iGTNmsG/fvrSfv3DhQpYvXx5iRSIi6VP4p+iZZ54JvI8nnngihEpERIJT+Kfg448/ZsGC\nBYH38/zzz7N9+/YQKhIRCUbhn4IXXniBhoaGwPs5fPhwyucIiIhkksI/Bf/1X/8V2r5+//vfh/KL\nREQkCIV/C2pqaqioqAhtf1u2bKGysjK0/YmIpEPh34JXXnnllAu4pWPKlCmh7k9EpLVCCX8zG2pm\n681so5k93MzX7zKzT8zszcTtnjD6zYaXX3459H1Onz6d/fv3h75fEZFUBQ5/MysCJgLDgL7AaDPr\n20zT59z98sTtyaD9ZoO7M3fu3ND3e+DAAV566aXQ9ysikqowjvyvAja6+2Z3rwOmAiNC2G/k1q5d\ny7Zt2zKy72effTYj+xURSUUY4X8e8GHSdnXisaZuNrPVZjbdzM4Pod+MKy8vz9i+X3nlFXbt2pWx\n/YuInEpxlvr5E/Cf7n7IzO4DpgCDmjYyszHAGICSkpJAn4qpra0N/KmaadOmBXr+qRw+fJgJEyYw\nbNiw0PYZxpjzSdzGCxpzXGRlzO4e6AZcC5QlbY8Hxp+ifRFQ09J++/Xr50FUVFQEev6RI0e8S5cu\nDmTsNmzYsEA1NhV0zPkmbuN115jjIsiYgSpPIbvDmPZZDvQ2s15m1g64FTju4rVmVpq0ORx4J4R+\nM+qtt95i9+7dGe1j/vz51NTUZLQPEZHmBA5/d68HHgDKaAz1ae6+1sweNbPhiWZ/Z2ZrzWwV8HfA\nXUH7zbTFixdnvI/Dhw8ze/bsjPcjItJUKHP+7j4HmNPksUeS7o+ncToobyxdujQr/bz44ovcdttt\nWelLROQoneF7EtkK/5dffplDhw5lpS8RkaMU/s2orq7mww8/bLlhCOL4SQYRiZ7CvxmvvfZaVvvT\n2b4ikm0K/2YsW7Ysq/3Nnj376MdgRUSyQuHfjGxfa/eDDz5gzZo1We1TROJN4d/EkSNHqKqqynq/\nc+bMabmRiEhIFP5NrFu3LpLllhX+IpJNCv8m3njjjUj6ffXVV3W2r4hkjcK/iRUrVkTSb319fUZX\nERURSabwbyKqI3+AsrKyyPoWkXhR+CdpaGjgzTffjKz/srIyfeRTRLJC4Z9k8+bN7Nu3L7L+33//\nfd59993I+heR+FD4J4nyqP+oefPmRV2CiMSAwj/JqlWroi5B4S8iWaHwT7J69eqoS6CiooL6+vqo\nyxCRAqfwT5IL4b9v3z5ef/31qMsQkQKn8E/Yu3cv7733XtRlAOjz/iKScQr/hLVr10ZdwjGa9xeR\nTAsl/M1sqJmtN7ONZvbwKdrdbGZuZv3D6DdMubSq5rJlyyJZX0hE4iNw+JtZETARGAb0BUabWd9m\n2p0J/D2Q3SulpCiXwv/w4cNZu4ykiMRTGEf+VwEb3X2zu9cBU4ERzbT7GTABOBhCn6HLpWkf0Ly/\niGRWGOF/HpB8wdvqxGPHmNmVwPnuPjuE/jLi7bffjrqE41RUVERdgogUsOJMd2BmbYBfAXel0HYM\nMAagpKQk0IXNW3Nh9H379rFt27a0+8qEFStWMGvWLDp27Jjyc+J2Mfi4jRc05rjIypjdPdANuBYo\nS9oeD4xP2v4c8CnwXuJ2EPgI6H+q/fbr18+DqKioSLnt0qVLHci525/+9KeMjbkQxG287hpzXAQZ\nM1DlKWR3GNM+y4HeZtbLzNoBtwIzk3651Lh7V3fv6e49gWXAcHfP/rUST+Kdd96JuoRmaepHRDIl\ncPi7ez3wAFAGvANMc/e1ZvaomQ0Puv9sUPiLSNyEMufv7nOAOU0ee+QkbQeE0WeY1q1bF3UJzXrz\nzTfZs2cPnTt3jroUESkwOsOX3A1/d2fx4sVRlyEiBSj24X/o0CG2bNkSdRkntXDhwqhLEJECFPvw\n37hxIw0NDVGXcVJx+4ibiGRH7MN//fr1UZdwSitXrqSmpibqMkSkwMQ+/HP9mrkNDQ1a50dEQqfw\nz/HwB837i0j4FP55EP6LFi2KugQRKTCxD/8NGzZEXUKLqqqqtL6/iIQq1uFfU1PDjh07oi6jRfX1\n9SxbtizqMkSkgMQ6/Ddu3Bh1CSnT1I+IhCnW4Z8PUz5HKfxFJEwK/zyxbNky6urqoi5DRApErMM/\nn6Z9Dh48SFVVzqyCLSJ5Ltbhv2nTpqhLaBUt8iYiYVH45xGFv4iEJbbhX1tby/bt26Muo1WWLFmS\n04vQiUj+iG34b968OeoSWq2mpoY1a9ZEXYaIFACFf57R1I+IhCGU8DezoWa23sw2mtnDzXz9f5rZ\nW2b2ppktMbO+YfQbhMJfROIscPibWREwERgG9AVGNxPuz7r7pe5+OfAL4FdB+w0qX8N/yZIluHvU\nZYhIngvjyP8qYKO7b3b3OmAqMCK5gbvvTdo8A4g8vfI1/Ldu3cp7770XdRkikueKQ9jHecCHSdvV\nwNVNG5nZ/wIeAtoBg5rbkZmNAcYAlJSUBLqEYW1t7Smfn89vnE6aNIkbbrjhhMdbGnOhidt4QWOO\ni6yM2d0D3YCRwJNJ27cDvztF+9uAKS3tt1+/fh5ERUXFSb925MgRb9++vdP4F0je3e69995Wj7kQ\nxW287hpzXAQZM1DlKWR3GNM+W4Hzk7Z7JB47manATSH0m7bt27dz6NChKEsIRG/6ikhQYYT/cqC3\nmfUys3bArcDM5AZm1jtp80Yg0hXVtmzZEmX3ga1bt45PPvkk6jJEJI8FDn93rwceAMqAd4Bp7r7W\nzB41s+GJZg+Y2Voze5PGef87g/YbRCG8YaqLuotIEGG84Yu7zwHmNHnskaT7fx9GP2EphPBfsmQJ\nN90U6eyZiOSxWJ7hWyjhLyKSLoV/nlqxYgUHDhyIugwRyVMK/zxVX1/P66+/HnUZIpKnYhf+DQ0N\nfPDBB1GXEQp95FNE0hW78N+2bVvBXAtX4S8i6Ypd+L///vtRlxCaP//5z9TX10ddhojkIYV/Hqut\nrWX16tVRlyEieUjhn+d0speIpCN24V8ob/YepXl/EUlH7MK/0I78Fy9erIu7iEirxS78C+3If/v2\n7Xm/UJ2IZJ/CvwBo6kdEWitW4V9TU8PevXtbbphnFP4i0lqxCv9CPOoHhb+ItJ7CvwC8++677Nix\nI+oyRCSPxCr8P/zww5Yb5Skt8SwirRGr8C/UI3/Q1I+ItE4o4W9mQ81svZltNLOHm/n6Q2b2tpmt\nNrNyM7swjH5bq5CP/BX+ItIagcPfzIqAicAwoC8w2sz6Nmm2Eujv7pcB04FfBO03HYUc/itXrtTF\nXUQkZWEc+V8FbHT3ze5eB0wFRiQ3cPcKdz+aTMuAHiH022qFPO3T0NDA2rVroy5DRPJEGOF/HpB8\nSF2deOxk7gZeDqHfVmloaGDr1q3Z7jar3nrrrahLEJE8UZzNzszsb4D+wF+d5OtjgDEAJSUlVFZW\npt1XbW3tcc/fvXt3wVzE5WRWrlwZ6HuWb5q+xnGgMcdDVsbs7oFuwLVAWdL2eGB8M+0GA+8A3VPZ\nb79+/TyIioqK47arqqocKOhbu3bt/ODBg4G+b/mk6WscBxpzPAQZM1DlKWRsGNM+y4HeZtbLzNoB\ntwIzkxuY2RXAvwPD3T2Ss5Gqq6uj6Dar6urqqKqqiroMEckDgcPf3euBB4AyGo/sp7n7WjN71MyG\nJ5r9EugIPG9mb5rZzJPsLmMK+ZM+yRYtWhR1CSKSB0KZ83f3OcCcJo89knR/cBj9BBGHI39o/Lz/\n+PHjoy5DRHJcbM7wLfRP+hy1dOlSjhw5EnUZIpLjYhP+cTny37t3L6tWrYq6DBHJcQr/AqR5fxFp\nSSzC391jM+0DsHDhwqhLEJEcF4vw3717N5999lnUZWTNokWLaGhoiLoMEclhsQj/OB31A+zatUvr\n/IjIKSn8C5SmfkTkVBT+BUrhLyKnovAvUAsXLjy6ppKIyAkU/gXqk08+Yd26dVGXISI5SuFfwOK2\nDK6IpC4W4f/RRx9FXUIkKioqoi5BRHJULMI/rkf+mvcXkZMp+PA/fPgwO3ZEcgmByO3YsYN33nkn\n6jJEJAcVfPhv37496hIipakfEWlOwYd/XOf7j1L4i0hzCj784zrff1RlZaXW+RGRExR8+G/bti3q\nEiK1c+dO1qxZE3UZIpJjQgl/MxtqZuvNbKOZPdzM179mZm+YWb2ZjQyjz1TFfdoHoLy8POoSRCTH\nBA5/MysCJgLDgL7AaDPr26TZB8BdwLNB+2sthb/m/UXkRGEc+V8FbHT3ze5eB0wFRiQ3cPf33H01\nkPXJ57hP+0DjvH99fX3UZYhIDikOYR/nAR8mbVcDV6ezIzMbA4wBKCkpCbQ8QW1tLZWVlWzYsCHt\nfRSKffv2MWnSJPr2bfoHWX47+hrHicYcD9kYcxjhHxp3nwRMAujfv78PGDAg7X1VVlYyYMAAampq\nQqouv+3atYsg389cdPQ1jhONOR6yMeYwpn22AucnbfdIPBa5Q4cOsXPnzqjLyAl601dEkoUR/suB\n3mbWy8zaAbcCM0PYb2BxP7s32auvvsr+/fujLkNEckTg8Hf3euABoAx4B5jm7mvN7FEzGw5gZl81\ns2rgFuDfzSwrF5jVm73/ra6ujsWLF0ddhojkiFDm/N19DjCnyWOPJN1fTuN0UFYp/I83f/58hg4d\nGnUZIpIDCvoMX4X/8ebNmxd1CSKSIwo6/HWC1/FWr16t90FEBCjw8FfQnUhH/yICBR7+mvY5kcJf\nRKDAw19H/id65ZVXtMSziBR2+OvI/0Qff/wxq1evjroMEYlYwYb/kSNHYnvt3pbMnTs36hJEJGIF\nG/41NTUcOXIk6jJyksJfRHJqYbcw7dq1K+oSctbSpUvZu3cvnTp1iroUSXLgwAHefvtt1q1bx5Yt\nW9i2bRu7du1i//79HD58GDOjtraWiy66iK5du1JaWsqFF17IxRdfzBe+8AXOOOOMqIcgeUThH0P1\n9fXMmzePm2++OepSYu3gwYNUVFRQVlbGwoULeeutt1L6a3XJkiXNPn7xxRdzxRVXcPXVV3PttdfS\nv39/2rdvH3bZUiAU/jH18ssvK/wj0NDQwIIFC5gyZQovvvgitbW1oe1706ZNbNq0ienTpwPQoUMH\n/uIv/oLBgwdzww03cPnll9OmTcHO9EorFWz47969O+oSctqcOXNwd8ws6lJi4cCBA0yePJlf//rX\nWbvA0MGDB1mwYAELFizgH/7hHygpKeHGG29k+PDhDBkyhNNPPz0rdUhuKtjDAB35n9q2bdtYuXJl\n1GUUvIMHD/L444/Tq1cvHnjggUivLPfxxx/zhz/8gZtuuolu3boxcuRIpk6dyr59+yKrSaKj8I+x\nWbNmRV1CwXJ3pk+fzhe/+EUeeuihnPvY8YEDB5gxYwajR4+me/fujBw5kueff54DBw5EXZpkicI/\nxhT+mbFlyxaGDh3KLbfcwvvvvx91OS06ePAgM2bMYNSoUXTv3p2//uu/Zvbs2dTV1UVdmmSQwj/G\nli9frrOgQ+Tu/Ou//itf/vKXeeWVV6IuJy379+/n2Wef5Zvf/CalpaXcd999VFZW6pyZAlSw4a83\nfFMze/bsqEsoCJ9++inDhw/n/vvvL5ipk127djFp0iQGDhzIBRdcwA9+8ANee+013D3q0iQEoYS/\nmQ01s/VmttHMHm7m6+3N7LnE118zs55h9Hsyhw4d0ptYKXrppZeiLiHvLVu2jCuuuKKgp9E++ugj\nnnjiCa655hp69erF2LFjef311/WLII8FDn8zKwImAsOAvsBoM+vbpNndwG53/zzwODAhaL+nkmtv\nruWy+fPn68LuATz11FN87Wtfo7q6OupSsub999/nl7/8JVdffTU9e/bk+9//PgsXLqS+vj7q0qQV\nwjjyvwrY6O6b3b0OmAqMaNJmBDAlcX86cL1l8APmWso5dQcPHqSsrCzqMvLOkSNH+OEPf8g999zD\n4cOHoy4nMh988AG//vWvGTBgAOeccw533HEH06ZNY8+ePVGXJi0I4ySv84APk7argatP1sbd682s\nBjgb+DSE/k+wd+9eunbtSrt27TKx+5xVV1eX1piXL1/O1Vc3fcly3yeffMLWrVuz3u9pp53GT3/6\nU2bMmMG5556b1b7TfY2zpby8nPLycoqLi7nmmmv4+te/zpAhQ+jQoUPavySjep2j0KZNGzp37pyV\nvnLqDF8zGwOMASgpKaGysjKt/RQVFTF58mQ6duwYYnW5r7a2Nq0x79u3j549e+rP9hScccYZPPbY\nY3znO9/hO9/5Ttb7T/c1jtLmzZs5cOAAa9asYdWqVaxZs4b169dz6NChqEvLirZt29KlSxfOOuss\nzjrrrGP3u3TpQpcuXejcuTOf+9zn6Ny5M506daKoqIja2tq08y9VYYT/VuD8pO0eiceaa1NtZsXA\n54CdTXfk7pOASQD9+/f3AQMGpF1UZWUlQZ6fj4KMedCgQXn78cRs6dq1K2VlZVx55ZWR1ZDPP9ff\n+MY3jt2vr69nzZo1VFVV8cYbbxz7pbB3794IK2yd9u3bU1payrnnnktpaemx+8nbpaWlnH322a1e\nRiUbr3MY4b8c6G1mvWgM+VuB25q0mQncCfwZGAkscH1MIKeMHDlS4X8KJSUllJeX86UvfSnqUgpC\ncXExl19+OZdffvlxj1dXV7Nu3To2bNjApk2beO+991i7di01NTXs2LEj4+cbdOrUibPPPpuuXbvS\nrVs3unfvTvfu3SkpKeGcc845distLaVLly4ZrSXTAod/Yg7/AaAMKAL+4O5rzexRoMrdZwJPAc+Y\n2UZgF42/ICSH3HTTTXzve9/TyTzNKCkpoaKigj59+kRdSsHr0aMHPXr0YPDgwcceO3oU3NDQwKef\nfsqnn37Kzp072bNnD/v27aO2tpbPPvuMQ4cOUVdXx5EjR45dp7pNmza0bduWtm3b0r59e0477TRO\nO+00OnbsSKdOnTjzzDPp3LnzsVvbtm2jGnrWhTLn7+5zgDlNHnsk6f5B4JYw+pLM6NatGwMGDKC8\nvDzqUnJK165dKS8vV/DngDZt2hw7EpfgCvYMX2m9UaNGRV1CTuncuTPz5s3TVI8UJIW/HHPzzTdT\nXJxTHwCLzOmnn86sWbNOmJMWKRQKfznm7LPPZsiQIVGXEbni4mKmT5/OddddF3UpIhmj8JfjjB49\nOuoSImVmPPXUUwwbNizqUkQySuEvx/n2t78d68v7PfbYY9xxxx1RlyGScQp/OU7Hjh0ZMaLp0kzx\ncN999zF+/PioyxDJCoW/nCCOR77Dhg1j4sSJUZchkjUKfznBkCFDKC0tjbqMrLnssst47rnnKCoq\niroUkaxR+MsJioqKuP3226MuIyvOOeccZs2axZlnnhl1KSJZpfCXZt19991Rl5BxHTp04KWXXuL8\n889vubFIgVH4S7MuueQS/vIv/zLqMjJq8uTJXHXVVVGXIRIJhb+c1L333ht1CRnzk5/8hFtv1fqC\nEl8KfzmpW265hbPOOivqMkL37W9/m0cffTTqMkQipfCXk+rQoQPf/e53oy4jVF/5yld45plnWn1x\nDZFCo/CXU7r//vtp06Ywfky6devGzJkzOeOMM6IuRSRyhfG/WjLmoosu4sYbb4y6jMDatm3LjBkz\nuOCCC6IuRSQnKPylRd///vejLiGwiRMnFvynl0RaQ+EvLRo0aFBer2v/4IMPFvQnl0TSESj8zews\nM5tnZhsS/zZ7RWMzm2tme8xsVpD+JDpjx46NuoS0DBkyhMcffzzqMkRyTtAj/4eBcnfvDZQntpvz\nSyAe6wUUqFGjRnHRRRdFXUarXHLJJUybNk1r9og0I2j4jwCmJO5PAW5qrpG7lwP7AvYlESoqKsqr\n5Y67dOnCrFmz6Ny5c9SliOQkc/f0n2y2x907J+4bsPvodjNtBwD/292/eYr9jQHGAJSUlPSbOnVq\n2rXV1tbSsWPHtJ+fjzI95vr6em6//Xa2b9+esT7CUFxczIQJE7jyyiujLiV0+rmOhyBjHjhw4Ap3\n799iQ3c/5Q2YD6xp5jYC2NOk7e5T7GcAMKul/o7e+vXr50FUVFQEen4+ysaYn3rqKQdy+vbkk09m\n/PsQFf1cx0OQMQNVnkLGtjjt4+6D3f3LzdxeAj42s1KAxL87WvxtI3ntzjvvpE+fPlGXcVIPP/xw\nLFYkFQkq6Jz/TODOxP07gZcC7k9yXFFRERMmTIi6jGbddttt/PznP4+6DJG8EDT8/wUYYmYbgMGJ\nbcysv5k9ebSRmS0GngeuN7NqM7shYL8SoW9961tcf/31UZdxnEGDBjF58mSt2SOSouIgT3b3ncAJ\nKeDuVcA9Sds6tbLA/Pa3v+UrX/kKhw8fjroUrrjiCl544QXatWsXdSkieUNn+Epa+vTpw49+9KOo\ny+CSSy5h7ty5dOrUKepSRPKKwl/S9o//+I988YtfjKz/c845h/nz59O9e/fIahDJVwp/SVuHDh14\n+umnKS4ONHuYlgsuuIBf/epXuv6uSJoU/hLIV7/6VX72s59ltc+ePXtSWVlJaWlpVvsVKSQKfwls\n3LhxfOtb38pKX3369GHx4sX06tUrK/2JFCqFvwRmZvzxj3/k0ksvzWg/1113HUuWLKFHjx4Z7Uck\nDhT+EoozzzyTuXPnZuyI/Pbbb6e8vLwgLygvEgWFv4Tm3HPPpaKigs9//vOh7bNdu3b85je/4emn\nn6Z9+/ah7Vck7hT+EqoLL7yQpUuXcu211wbe12WXXcZrr73Ggw8+GEJlIpJM4S+h6969OwsXLmTs\n2LFpXUilU6dOTJgwgaqqqry+fKRILlP4S0a0bduWCRMm8MYbb3DjjTemtOZOt27d+MlPfsLmzZsZ\nO3Ysbdu2zUKlIvGU/bNzJFYuu+wyZs2axaZNm5g+fTqLFi1iw4YN7N27lw4dOnDBBRdw5ZVXcsMN\nNzB48GAFvkiWKPwlKy6++GLGjRvHuHHjoi5FRNC0j4hILCn8RURiSOEvIhJDCn8RkRgKFP5mdpaZ\nzTOzDYl/uzTT5nIz+7OZrTWz1Wb2P4L0KSIiwQU98n8YKHf33kB5YrupA8Ad7v4lYCjwhJl1Dtiv\niIgEEDT8RwBTEvenADc1beDu77r7hsT9j4AdQLeA/YqISABBw7/E3bcl7m8HSk7V2MyuAtoBmwL2\nKyIiAZi7n7qB2XzgnGa+9GNgirt3Tmq7291PmPdPfK0UqATudPdlJ2kzBhgDUFJS0m/q1KmpjKFZ\ntbW1dOzYMe3n56O4jTlu4wWNOS6CjHngwIEr3L1/S+1aDP9TPtlsPTDA3bcdDXd3/0Iz7TrRGPw/\nd/fpKe77E+D9tIuDrsCnAZ6fj+I25riNFzTmuAgy5gvdvcWp9aDLO8wE7gT+JfHvS00bmFk74AXg\n6VSDHyCV4k/FzKpS+e1XSOI25riNFzTmuMjGmIPO+f8LMMTMNgCDE9uYWX8zezLRZhTwNeAuM3sz\ncdM6vSIiEQp05O/uO4Hrm3m8Crgncf8/gP8I0o+IiISrkM/wnRR1ARGI25jjNl7QmOMi42MO9Iav\niIjkp0I+8hcRkZPI6/A3s6Fmtt7MNprZCUtLmFl7M3su8fXXzKxn9qsMVwpjfsjM3k6so1RuZhdG\nUWeYWhpzUrubzczNLO8/GZLKmM1sVOK1Xmtmz2a7xrCl8LN9gZlVmNnKxM/3N6KoMyxm9gcz22Fm\na07ydTOz3yS+H6vN7MpQC3D3vLwBRTSeKXwRjWcNrwL6NmlzP/Bvifu3As9FXXcWxjwQOD1x/3tx\nGHOi3ZmOJYuFAAAC3ElEQVTAImAZ0D/qurPwOvcGVgJdEtvdo647C2OeBHwvcb8v8F7UdQcc89eA\nK4E1J/n6N4CXAQOuAV4Ls/98PvK/Ctjo7pvdvQ6YSuNaQ8mS1x6aDlxvqVxJPHe1OGZ3r3D3A4nN\nZUCPLNcYtlReZ4CfAROAg9ksLkNSGfO9wER33w3g7juyXGPYUhmzA50S9z8HfJTF+kLn7ouAXado\nMoLG86PcG1dF6Jw4mTYU+Rz+5wEfJm1XJx5rto271wM1wNlZqS4zUhlzsrtpPHLIZy2OOfHn8Pnu\nPjubhWVQKq/zJcAlZrbUzJaZ2dCsVZcZqYz5p8DfmFk1MAd4MDulRaa1/99bRRdwL1Bm9jdAf+Cv\noq4lk8ysDfAr4K6IS8m2YhqnfgbQ+NfdIjO71N33RFpVZo0G/p+7/18zuxZ4xsy+7O4NUReWj/L5\nyH8rcH7Sdo/EY822MbNiGv9U3JmV6jIjlTFjZoNpXHhvuLsfylJtmdLSmM8EvgxUmtl7NM6Nzszz\nN31TeZ2rgZnuftjdtwDv0vjLIF+lMua7gWkA7v5noAONa+AUqpT+v6crn8N/OdDbzHol1g+6lca1\nhpIdXXsIYCSwwBPvpOSpFsdsZlcA/05j8Of7PDC0MGZ3r3H3ru7e09170vg+x3BvPMs8X6Xys/0i\njUf9mFlXGqeBNmezyJClMuYPSKwoYGZ9aAz/T7JaZXbNBO5IfOrnGqDG/3sJ/cDydtrH3evN7AGg\njMZPCvzB3dea2aNAlbvPBJ6i8U/DjTS+sXJrdBUHl+KYfwl0BJ5PvLf9gbsPj6zogFIcc0FJccxl\nwNfN7G3gCPAjb1xuJS+lOOYfAr83sx/Q+ObvXfl8MGdm/0njL/Cuifcx/g/QFsDd/43G9zW+AWyk\n8YqI3w21/zz+3omISJryedpHRETSpPAXEYkhhb+ISAwp/EVEYkjhLyISQwp/EZEYUviLiMSQwl9E\nJIb+P2c9rHcimwD6AAAAAElFTkSuQmCC\n”, 16c16 &amp;amp;lt; “&amp;amp;lt;matplotlib.figure.Figure at 0x10ba48cc0&amp;amp;gt;” — - &amp;amp;gt; “&amp;amp;lt;matplotlib.figure.Figure at 0x11037dcc0&amp;amp;gt;” 34c34 &amp;amp;lt; “ax.fill(x, y, zorder=10,facecolor=’green’)\n”, — - &amp;amp;gt; “ax.fill(x, y, zorder=10,facecolor=’black’)\n”,`
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>diff&lt;/code>は単純な文字列の差分比較を行うだけなので、notebook が&lt;code>json&lt;/code>で管理されており、&lt;code>matplotlib&lt;/code>で生成される出力結果の保存内容にも差異がでるのでこうなってしまいます。&lt;/p>
&lt;p>&lt;a href="https://github.com/jupyter/nbdime">jupyter/nbdime&lt;/a>を用いることで、notebook 形式の json をパースしたうえでの差分比較が可能になります。&lt;/p>
&lt;p>提供されるコマンド一覧&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nbdiff&lt;/strong> : ノートブックの差分比較をターミナルで行う&lt;/li>
&lt;li>&lt;strong>nbdiff-web&lt;/strong> : Notebook の差分をブラウザで行う&lt;/li>
&lt;/ul>
&lt;p>簡単な実行結果&lt;/p>
&lt;h3 id="差分比較">差分比較&lt;/h3>
&lt;h4 id="ターミナル上での差分比較">ターミナル上での差分比較&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">nbdiff nb_1.ipynb nb_2.ipynb
nbdiff nb_1.ipynb nb_2.ipynb
— — nb_1.ipynb 2017–02–02 11:00:48
+++ nb_2.ipynb 2017–02–02 11:01:07
&lt;span class="c1">## inserted before /cells/0/outputs/0:&lt;/span>
- output:
- output_type: display_data
- data:
- image/png: iVBORw0K…&lt;span class="p">&amp;amp;&lt;/span>lt&lt;span class="p">;&lt;/span>snip base64, &lt;span class="nv">md5&lt;/span>&lt;span class="o">=&lt;/span>052a34b732d64628…&lt;span class="p">&amp;amp;&lt;/span>gt&lt;span class="p">;&lt;/span>
- text/plain: &lt;span class="p">&amp;amp;&lt;/span>lt&lt;span class="p">;&lt;/span>matplotlib.figure.Figure at 0x11037dcc0&lt;span class="p">&amp;amp;&lt;/span>gt&lt;span class="p">;&lt;/span>&lt;span class="sb">``&lt;/span>&lt;span class="c1">## deleted /cells/0/outputs/0:&lt;/span>
* output:
* output_type: display_data
* data:
* image/png: iVBORw0K…&lt;span class="p">&amp;amp;&lt;/span>lt&lt;span class="p">;&lt;/span>snip base64, &lt;span class="nv">md5&lt;/span>&lt;span class="o">=&lt;/span>657f3d90cea1a3d0…&lt;span class="p">&amp;amp;&lt;/span>gt&lt;span class="p">;&lt;/span>
* text/plain: &lt;span class="p">&amp;amp;&lt;/span>lt&lt;span class="p">;&lt;/span>matplotlib.figure.Figure at 0x10ba48cc0&lt;span class="p">&amp;amp;&lt;/span>gt&lt;span class="p">;&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="c1">## modified /cells/0/source: @@ -8,6 +8,6 @@ y = np.sin(4 * np.pi * x) * np.exp(-5 * x)`fig, ax = plt.subplots()``ax.fill(x, y, zorder=10,facecolor=’green’)zorder=10,facecolor=’black’) ax.grid(True, zorder=5) plt.show()`&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="web-ブラウザ上での差分比較">Web ブラウザ上での差分比較&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">nbdiff-web nb_1.ipynb nb_2.ipynb &lt;span class="o">[&lt;/span>master&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>I nbdimeserver:274&lt;span class="o">]&lt;/span> Listening on 127.0.0.1, port &lt;span class="m">51809&lt;/span> &lt;span class="o">[&lt;/span>I nbdiffweb:48&lt;span class="o">]&lt;/span> URL: &lt;span class="o">[&lt;/span>http://127.0.0.1:51809/diff?base&lt;span class="o">=&lt;/span>nb_1.ipynb&lt;span class="p">&amp;amp;&lt;/span>amp&lt;span class="p">;&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="o">=&lt;/span>nb_2.ipynb&lt;span class="o">](&lt;/span>http://127.0.0.1:51809/diff?base&lt;span class="o">=&lt;/span>nb_1.ipynb&lt;span class="p">&amp;amp;&lt;/span>amp&lt;span class="p">;&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="o">=&lt;/span>nb_2.ipynb&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>I web:1971&lt;span class="o">]&lt;/span> &lt;span class="m">200&lt;/span> GET /diff?base&lt;span class="o">=&lt;/span>nb_1.ipynb&lt;span class="p">&amp;amp;&lt;/span>amp&lt;span class="p">;&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="o">=&lt;/span>nb_2.ipynb &lt;span class="o">(&lt;/span>127.0.0.1&lt;span class="o">)&lt;/span> 15.43ms &lt;span class="o">[&lt;/span>I web:1971&lt;span class="o">]&lt;/span> &lt;span class="m">200&lt;/span> GET /static/nbdime.js?v&lt;span class="o">=&lt;/span>ce2758430f38b0ad261242e2b658a8e4 &lt;span class="o">(&lt;/span>127.0.0.1&lt;span class="o">)&lt;/span> 228.07ms &lt;span class="o">[&lt;/span>I web:1971&lt;span class="o">]&lt;/span> &lt;span class="m">200&lt;/span> POST /api/diff &lt;span class="o">(&lt;/span>127.0.0.1&lt;span class="o">)&lt;/span> 41.45ms &lt;span class="o">[&lt;/span>W web:1971&lt;span class="o">]&lt;/span> &lt;span class="m">404&lt;/span> GET /favicon.ico &lt;span class="o">(&lt;/span>127.0.0.1&lt;span class="o">)&lt;/span> 0.79ms&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-15/images/1.png" alt="image">&lt;/p>
&lt;p>Web ブラウザ上での画面&lt;/p>
&lt;h3 id="git-との連携">Git との連携&lt;/h3>
&lt;p>&lt;a href="http://nbdime.readthedocs.io/en/latest/#git-integration-quickstart">nbdime - diffing and merging of Jupyter Notebooks - nbdime 0.4.1 documentation&lt;/a>&lt;/p>
&lt;p>Git の環境下で、複数人で notebook を編集する機会がある人は便利そう&lt;br>
(Notebook 上で複数人でガンガン編集してると、Git の差分比較を行っても混沌としそうだが…)&lt;/p>
&lt;p>そう考えると&lt;a href="https://github.com/jupyter/jupyter-drive">Jupyter Drive&lt;/a>がいいのか。&lt;/p>
&lt;p>&lt;a href="https://github.com/jupyter">Jupyter&lt;/a>を確認すると、Jupyter に関するパッケージが活発に開発されていて中々楽しい 😄&lt;/p></description></item><item><title>Analyzing Free-standing Conversational Groups: A Multimodal Approach (ACMMM15) を読んだ</title><link>https://shunyaueta.com/posts/2018-01-14/</link><pubDate>Sun, 14 Jan 2018 10:41:12 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-14/</guid><description>
&lt;p>スタンディングディスカッション形式での会話を評価した研究&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-14/images/1.png" alt="image">&lt;/p>
&lt;p>Summary Slide&lt;/p>
&lt;p>X Alameda-Pineda, Y Yan, E Ricci, O Lanz, N Sebe&lt;br>
“Analyzing Free-standing Conversational Groups: A Multimodal Approach”, in 2015 ACM Multimedia Conference&lt;/p>
&lt;p>&lt;a href="http://xavirema.eu/wp-content/papercite-data/pdf/Alameda-ACMMM-2015.pdf">link&lt;/a>&lt;/p>
&lt;p>を読んだので、軽くメモ。&lt;/p>
&lt;p>マルチモーダル系の論文初めて読んだんですが、まとめるとコントリビューションが 5 つあると主張。&lt;/p>
&lt;h3 id="contribution">Contribution&lt;/h3>
&lt;ul>
&lt;li>音声・近接情報、そして監視カメラからの身体と頭の姿勢推定からマルチモーダルに解析&lt;/li>
&lt;li>フリースタンディングディスカッションを身体・頭の姿勢推定から解析&lt;/li>
&lt;li>カメラと音声・近接センサーからなるマルチモーダルな解析するためのフレームワークを提案&lt;/li>
&lt;li>ラベリングされてないデータに対する行列補間問題の考案&lt;/li>
&lt;li>SALSA(データ・セット)を公開・評価&lt;/li>
&lt;/ul>
&lt;p>SALSA というポスターセッションの動画と音声のデータも公開されている&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://tev.fbk.eu/salsa">&lt;em>SALSA: Synergetic sociAL Scene Analysis&lt;/em>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>動画は Google Drive で公開されていて時代の波を感じる。&lt;/p>
&lt;ul>
&lt;li>データセットを公開&lt;/li>
&lt;li>論文も読みやすい&lt;/li>
&lt;li>新しい行列補完計画法(アルゴリズム)を提案&lt;/li>
&lt;li>実問題に取り組む&lt;/li>
&lt;/ul>
&lt;p>と盛り沢山な内容で面白かった。&lt;/p>
&lt;p>スライド内のリンクは Google Slide で共有しているのでこちらを参照すると便利です。&lt;/p>
&lt;p>&lt;a href="https://docs.google.com/presentation/d/1G6zfzV4jIm7qj4LkHkm3Gk_qHEml0SWZExkNuqw0ef8/embed?start=true&amp;amp;loop=true&amp;amp;delayms=1000&amp;amp;slide=id.g1502801dfc_2_6">X Alameda-Pineda, Y Yan, E Ricci, O Lanz, N Sebe &amp;quot;Analyzing Free-standing Conversational Groups: A…&lt;/a>&lt;/p></description></item><item><title>PythonでGaussian Kernelのアニメーションを作成</title><link>https://shunyaueta.com/posts/2018-01-13/</link><pubDate>Sat, 13 Jan 2018 17:03:43 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-13/</guid><description>
&lt;p>Python でアニメーションを作成したかったのでメモ&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-13/images/1.gif" alt="image">&lt;/p>
&lt;p>Gaussian Kernel GIF Animation&lt;/p>
&lt;p>当然ながら、HTML5 の Video は再生されないので GIF に変換した結果が以下。&lt;/p>
&lt;p>これで HTML5 で再生される。&lt;/p>
&lt;p>**&lt;em>GIF&lt;/em>**で表示する方法として
&lt;code>%matplotlib nbagg&lt;/code>&lt;/p>
&lt;p>というオプションが存在しているが、Kernel が busy 状態を何度も繰り返すので、自分は mp4 で出力するようにした。&lt;br>
実験結果も以前は GIF で保存してたが、最近は全て&lt;code>mp4&lt;/code>で管理するようにした。&lt;/p>
&lt;p>あと、**np.linspace()**が iterable ではないので、イマイチな書き方になった。。&lt;br>
**np.arange()**を使うべきなのか…&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/">Embedding Matplotlib Animations in Jupyter Notebooks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/Tatejimaru137/items/6083e2e3a4e618da6274">Jupyter 上で matplotlib のアニメーションを再生する - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Call center stress recognition with person-specific models を読んだ</title><link>https://shunyaueta.com/posts/2018-01-12/</link><pubDate>Fri, 12 Jan 2018 17:19:48 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-12/</guid><description>
&lt;p>Affective Computing: 計算機と人間の感情や情緒の関係性を考える領域&lt;/p>
&lt;p>MIT Media Lab Affective Computing Group のプロジェクト。&lt;br>
2 年前に MIT Media Lab へ訪問した際に、色々と見せてもらったけどかなり野心的な事に取り組んでいて感動してた。(デバイスも自分たちでプロトタイプを作りまくっていて、&lt;strong>Deploy or Die&lt;/strong>の意思を感じ取れる)&lt;/p>
&lt;p>論文のまとめスライドは以下&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-13/images/1.png" alt="image">&lt;/p>
&lt;p>One Slide Summary&lt;/p>
&lt;p>HCI 系の論文は初めてまともに読んだんですが、&lt;/p>
&lt;ul>
&lt;li>実験デザインが一番難しそう&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>人と計算機の関係を研究するので、必然的に人間の感性をどう評価する話にもつながってきてる?&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>手法に重きを置くというよりも、問題に重きを置いている印象&lt;/li>
&lt;/ul>
&lt;p>普段自分は、数値線形代数や機械学習、コンピュータビジョンを主にやっていて、精度をどれだけ出せるか、正解率をどれだけ向上や、速度をどれだけ上げれるかを理論的に保証、提案したりしていますが、面白い問題や興味深いデータを集めることも大事だなと思った。&lt;/p>
&lt;p>実験計画法&lt;a href="https://www.slideshare.net/nami134105/ss-61422707">¹&lt;/a>もかなり重要で、メンターの人から実験計画法の成り立ちを教えてもらってとてもおもしろかった。&lt;/p></description></item><item><title>FUSE: Full Spectral Clustering(KDD2016) を読んだ</title><link>https://shunyaueta.com/posts/2018-01-11/</link><pubDate>Thu, 11 Jan 2018 17:30:28 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-11/</guid><description>
&lt;p>べき乗法と独立成分分析を用いたマルチスケールに頑強なクラスタリング手法の提案&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-13/images/1.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>べき乗法では近似固有ベクトル(Pseudo-eigenvectors)は複数の真の固有ベクトルの線形結合からなる。有益でない固有ベクトルも含まれるのでいかにそれを除去するか&lt;/li>
&lt;li>Fig.1 で言ってることがいまいちわからない。ｃ,ｄも変化がないように見える。論文で言及してる stripe が何を指してるかが不明
分かった。赤・青・黒の３つのクラスタで分かれている。最初は黒色がクラスタ境界面に見えた。論文内での multi scale というのは、データの幾何的な分布を指している？&lt;/li>
&lt;li>固有値計算は O(n³）かかるから計算量が~~って毎回言われるが、行列の状態に依存するので毎回最悪の場合を主張されてるも困る&lt;/li>
&lt;li>ZP self-turining spectral clustering をなぜ対抗馬にして比較してるのかは謎。&lt;/li>
&lt;li>ICA&lt;a href="http://www.kecl.ntt.co.jp/icl/signal/sawada/mypaper/subspace2010rev.pdf">¹&lt;/a>を行ったあとにその行列に対して回転処理を行い情報量の最小化を狙う&lt;/li>
&lt;li>クラスタ数が多い場合、PIC では良い結果が出づらい
multi scale なデータの場合標準の spectral clustering では失敗することが多々ある&lt;/li>
&lt;li>fig.2 (a) 見ればわかるが&lt;em>k&lt;/em>-means では分離が困難&lt;/li>
&lt;li>fig.2(b) ４－５本目の固有ベクトルを基底ベクトルにもつ空間ではクラスタのオーバーラップが少ない&lt;/li>
&lt;li>つまり１－５本目の固有ベクトル全て含めてクラスタリングすれば結果が良好になるのではないか？（仮説）&lt;/li>
&lt;li>fig.2 © ４回べき乗法を行った。結果が似てる。（縦軸が何を表してるかは不明）。四回が上から四本求めたのか、一番上の固有ベクトルを４回求めたのか分からない&lt;/li>
&lt;li>fig. (d) 提案手法を適用。k-means で分離可能 行列&lt;strong>V&lt;/strong>を&lt;em>p&lt;/em>回べき乗法を行って構築 &lt;strong>E=MV&lt;/strong>の最小化を行う&lt;/li>
&lt;li>ICA を最小化するために Jacobi Rotation を用いる。探索には貪欲法を採用&lt;/li>
&lt;/ul>
&lt;h2 id="contribution">Contribution&lt;/h2>
&lt;ul>
&lt;li>マルチスケール（多種多様な）データ分布に対してクラスタリングが可能&lt;/li>
&lt;li>計算時間は従来（ncut)と同等&lt;/li>
&lt;/ul>
&lt;h2 id="感想">感想&lt;/h2>
&lt;ul>
&lt;li>PIC(Power Itetaion Clusterg)をまさか拡張してくるとは思わなかったなので、興味深い論文。(実装して再現実験したけど、Early stopping の段階で高確率でクラスタリングが失敗していて使い物にならなかった印象があるので…)&lt;/li>
&lt;li>データの分布が多様な場合、上位数本のベクトルではなく、そこから更に下の固有ベクトルに着目したほうが結果が良好になるのは面白い&lt;/li>
&lt;li>KDD の論文、相変わらず読みやすかった。&lt;/li>
&lt;/ul></description></item><item><title>サイトのPWA化、ホスティングをGithub PagesからFirebaseへ移行</title><link>https://shunyaueta.com/posts/2018-01-09/</link><pubDate>Tue, 09 Jan 2018 18:59:59 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-01-09/</guid><description>
&lt;p>PWA と FireBase を試してみたかった&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-09/images/1.png" alt="image">&lt;/p>
&lt;p>firebase init で現れる画面、テンション上がる&lt;/p>
&lt;p>Github Pages + CloudFlare で独自ドメインの &lt;a href="https://shunyaueta.com/">shunyaueta.com&lt;/a> をホスティングしてたんですが、Firebase でホスティングできると聞いて Firebase に移行しました。&lt;/p>
&lt;p>PWA にしたのは完全に趣味です。&lt;/p>
&lt;h2 id="tldr">TL;DR;&lt;/h2>
&lt;ul>
&lt;li>Web App を作ってる人は manifest.json を設置するだけでも Android の使用感が改善されそう&lt;/li>
&lt;li>独自ドメインでお手軽に SSL ホスティングしたいなら Firebase hosting めっちゃおすすめです(1GB のホスティングは無料)&lt;/li>
&lt;li>FireBase Hosting だけだと Firebase 本来の旨味は味わえません&lt;/li>
&lt;/ul>
&lt;h2 id="pwa">PWA&lt;/h2>
&lt;p>1 年前ですが、簡潔に PWA の事が書かれています&lt;/p>
&lt;p>&lt;a href="https://html5experts.jp/agektmr/20527/">プログレッシブウェブアプリ詳解 ─ 過去・現在・未来&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-09/images/2.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-09/images/3.png" alt="image">&lt;/p>
&lt;p>左: PWA 化以前 右: PWA 化以降&lt;/p>
&lt;p>ServiceWorker と manifest.json,あとは&amp;lt;meta name=”theme-color”&amp;gt;を指定すると PWA のスコアが 100 点になる 🎉&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-09/images/4.png" alt="image">&lt;/p>
&lt;p>manihest.json によるホームアイコン作成誘導&lt;/p>
&lt;p>Favicon の各画像の生成は下記のサイトが便利でした。要求される解像度毎の画像(Favicon,Home icon, Apple home icon)が生成されて mahifest.json も同梱されます。(画像の圧縮率も選べる)&lt;/p>
&lt;p>&lt;a href="https://realfavicongenerator.net/">Favicon Generator for all platforms: iOS, Android, PC/Mac&amp;hellip;&lt;/a>&lt;/p>
&lt;p>後は、&lt;/p>
&lt;p>&lt;a href="https://medium.com/dev-channel/learn-how-to-build-a-pwa-in-under-5-minutes-c860ad406ed">Learn how to build a PWA in 5 minutes&lt;/a>&lt;/p>
&lt;p>を参考に最小実装で実現しました。(Web 通知は無意味だから止めました)&lt;/p>
&lt;p>CSS は Skelton を採用しました。(css only 実装で js がなくてシンプルで良い)&lt;/p>
&lt;p>&lt;a href="https://github.com/dhg/Skeleton">dhg/Skeleton&lt;/a>&lt;/p>
&lt;p>&lt;strong>Web App やってる人は、実装コスト 1 時間程度で済むので皆 manifest.json を設置するべき!!!&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>[](&lt;a href="https://twitter.com/agektmr/status/894753854373351424">https://twitter.com/agektmr/status/894753854373351424&lt;/a>)
kitamura さんの受け売りです&lt;/p>
&lt;/blockquote>
&lt;p>Web App Manifest については下記の記事が分かりやすいです。&lt;/p>
&lt;p>&lt;a href="https://qiita.com/horo/items/ff665e4a6613e7684f8f">Web App Manifest で Web アプリをインストール可能に - Qiita&lt;/a>&lt;/p>
&lt;p>というか皆 Chrome の中の人の記事だった(どうりで詳しいわけですね…)&lt;/p>
&lt;h2 id="ホスティング">ホスティング&lt;/h2>
&lt;p>Github Pages+CloudFlare(独自ドメイン運用)で SSL 認証された Web Page のホスティングを実現していました。&lt;/p>
&lt;p>FireBase では、&lt;a href="https://firebase.google.com/docs/hosting/">FireBase Hosting&lt;/a>を使うことで独自ドメインでもデフォルトで https で Web サイトがホスティングされます(最高)&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2018-01-09/images/5.png" alt="image">&lt;/p>
&lt;p>やり方は以下を参考&lt;/p>
&lt;p>&lt;a href="https://firebase.google.com/docs/hosting/deploying">Deploy Your Site | Firebase&lt;/a>&lt;/p>
&lt;p>めっちゃ簡単にデブロイできます…!!&lt;/p>
&lt;h2 id="成果物">成果物&lt;/h2>
&lt;p>&lt;a href="https://shunyaueta.com/">Shunya Ueta | Engineer&lt;/a>&lt;/p>
&lt;h2 id="所感">所感&lt;/h2>
&lt;p>今回は静的かつ小規模な Web サイトを PWA 化したので、恩恵殆ど無いですがまともな WebApp だと恩恵めっちゃ受けると思います。(Twitter Lite や日経電子版の web サイトなど)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.twitter.com/engineering/en_us/topics/open-source/2017/how-we-built-twitter-lite.html">How we built Twitter Lite&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/edwardkenfox/items/4c0b9550ffa48c1f0445">いまさら聞けない PWA と AMP - Qiita&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>HerokuのDBにpgadmin4で接続してローカルにデータをダウンロードする</title><link>https://shunyaueta.com/posts/2017-12-27/</link><pubDate>Wed, 27 Dec 2017 08:12:17 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-27/</guid><description>
&lt;p>pyadmin4 で Heroku 上の DB に接続する記事が日本語になかったので、メモ&lt;/p>
&lt;h3 id="接続前の準備">接続前の準備&lt;/h3>
&lt;p>Heroku にログインして、対象の App の DB のページへ&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/1.png" alt="image">&lt;/p>
&lt;p>Heroku App DB page&lt;/p>
&lt;p>そこから DB のセッティングページにある credential ボタンをクリック&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/2.png" alt="image">&lt;/p>
&lt;p>click credential button&lt;/p>
&lt;p>そこに記載されている各種情報を pgadmin4 に入力して Heroku 上の DB に接続する&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/3.png" alt="image">&lt;/p>
&lt;p>Copy information&lt;/p>
&lt;h3 id="pgadmin4-で-heroku-の-db-に接続">pgadmin4 で Heroku の DB に接続&lt;/h3>
&lt;p>以下のページから pgAdmin4 をダウンロード&lt;/p>
&lt;p>&lt;a href="https://www.pgadmin.org/download/">Download&lt;/a>&lt;/p>
&lt;p>そこからアプリを開くと下記の画面になるので、&lt;code>Add new Server&lt;/code>をクリック&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/4.png" alt="image">&lt;/p>
&lt;p>Click Add New Server&lt;/p>
&lt;p>Heroku 上の DB の情報を入力していく。Server の名前は適当で大丈夫です。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/5.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/6.png" alt="image">&lt;/p>
&lt;p>接続されるとこんな感じになります。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/7.png" alt="image">&lt;/p>
&lt;h3 id="query-tool">Query Tool&lt;/h3>
&lt;p>&lt;code>Query Tool&lt;/code>を使うことで Heroku 上の DB に対して SQL クエリを投げる事ができます。&lt;/p>
&lt;p>&lt;code>Query Tool&lt;/code>は上部のツールバーからアクセス可能です。 注意) 左カラムのテーブルをクリックした後でないとアクティブになりません。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/8.png" alt="image">&lt;/p>
&lt;p>SQL の実行結果&lt;/p>
&lt;p>雷ボタンで SQL を実行可能 ↓ ボタンで SQL 結果をローカルに CSV 形式で保存できます。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-27/images/9.png" alt="image">&lt;/p></description></item><item><title>“Learning Deep Representations for Graph Clustering (AAAI2014)” を読んだ</title><link>https://shunyaueta.com/posts/2017-12-23/</link><pubDate>Sat, 23 Dec 2017 17:38:19 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-23/</guid><description>
&lt;p>自己符号化器と Spectral Clusteing の関連性を示した論文&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://research.microsoft.com/pubs/226627/%5BAAAI2014%5D%20DNN%20for%20Graph%20Cut.pdf">Paper link&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="author">Author&lt;/h4>
&lt;ul>
&lt;li>Fei Tian : &lt;a href="http://home.ustc.edu.cn/~tianfei/">http://home.ustc.edu.cn/~tianfei/&lt;/a>&lt;/li>
&lt;li>中国科学技術大学 Ph.D １年生&lt;/li>
&lt;li>MSRA と共同研究、2014 年に AAAI2 本,COLING1 本を 1st で通してる。&lt;/li>
&lt;li>この資料も面白い。ILSVRC2015 で 152 層の Deep Residual Learning を提案し優勝(Error Rate : 3.57%)&lt;/li>
&lt;li>&lt;a href="http://research.microsoft.com/en-us/um/people/kahe/ilsvrc15/ilsvrc2015_deep_residual_learning_kaiminghe.pdf">MSRA @ ILSVRC2015 資料&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="motivation-研究背景動機">Motivation (研究背景・動機)&lt;/h4>
&lt;ul>
&lt;li>Deep Learning が数多くの応用でめざましい成果をあげている。&lt;/li>
&lt;li>音声認識&lt;/li>
&lt;li>画像認識&lt;/li>
&lt;li>自然言語処理&lt;/li>
&lt;li>DL において Clustering に関する適切な調査が行われてない。&lt;/li>
&lt;li>論文の目的として、DL における Clustering の調査を行う&lt;/li>
&lt;/ul>
&lt;h4 id="概要">概要&lt;/h4>
&lt;ul>
&lt;li>Graph Clustering はクラスタリングでも重要な手法の一つ&lt;/li>
&lt;li>Graph Clustering の応用&lt;/li>
&lt;li>Image segmentation&lt;/li>
&lt;li>Community Detection&lt;/li>
&lt;li>VLSI Design&lt;/li>
&lt;li>嬉しい点 : ベクトル空間におけるクラスタリングの問題 → データの類似度グラフ問題への変換が可能&lt;/li>
&lt;li>自己符号化器と Spectral Clustering の類似性&lt;/li>
&lt;li>Spectral Clustering : グラフラプラシアンに対して EVD を行い k 本の非零固有ベクトルを用いた空間に対して k-means を行ったもの。&lt;/li>
&lt;li>自己符号化器 : 入力データを低次元化、情報が最大限になるようにデータの次元を再構築する&lt;/li>
&lt;li>計算量 : 対象とするグラフは n 個のノードを持つ&lt;/li>
&lt;li>EVD : ナイーブに実装すると O(n3)の計算量、最速の実装は O(n2)の計算量&lt;/li>
&lt;li>自己符号化器 : ノードがスパースな際は計算量は O(kn)&lt;/li>
&lt;li>スパース表現 : データが大きくなるならスパース性を有効活用したい&lt;/li>
&lt;li>EVD : 固有ベクトルが高い確率で密になるため、スパース性が保証されない&lt;/li>
&lt;li>自己符号化器 : スパース性を用いるのは容易&lt;/li>
&lt;/ul>
&lt;h3 id="既存研究で未検証な事柄何を解決解明したいのか">既存研究で未検証な事柄、何を解決・解明したいのか？&lt;/h3>
&lt;ul>
&lt;li>Graph Clustering のための Deep Learning の活用方法と調査&lt;/li>
&lt;li>自己符号化器と Spectral Clustering の類似性とその比較・検証&lt;/li>
&lt;/ul>
&lt;h3 id="method-提案手法">Method (提案手法)&lt;/h3>
&lt;ul>
&lt;li>GraphEncoder(for graph clustering.)&lt;/li>
&lt;li>グラフラプラシアン(L=D−1S)に対してスパース自己符号化器(Sparse-AutoEncoders)を通した最終層に k-meas クラスタリングを行う&lt;/li>
&lt;li>AutoEncoder は入力層・隠れ層・出力層の 3 層を Stacked する。&lt;/li>
&lt;li>X(j)=D−1S の列ベクトルを各ユニットに入力し、隠れ層の活性化関数 h(j)を得て、X(j+1)=h(j)と Γ 回(層の階数分)更新する。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-23/images/1.png" alt="image">&lt;/p>
&lt;h3 id="evaluation-検証方法評価方法優位性">Evaluation (検証方法・評価方法・優位性)&lt;/h3>
&lt;ul>
&lt;li>実世界のグラフデータに対して NMI によってクラスタリングの評価実験を行う。&lt;/li>
&lt;li>データの種類&lt;/li>
&lt;li>ワイン&lt;/li>
&lt;li>ニュース記事&lt;/li>
&lt;li>タンパク質構造グラフ&lt;/li>
&lt;/ul>
&lt;p>以下の三種で比較&lt;/p>
&lt;ul>
&lt;li>Spectral Clustering&lt;/li>
&lt;li>k-means&lt;/li>
&lt;li>Sparse-AutoEncoders(Graph-Encoder)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-23/images/2.png" alt="image">&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-23/images/3.png" alt="image">&lt;/p>
&lt;p>次元の減少推移&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-23/images/4.png" alt="image">&lt;/p>
&lt;p>層を重ねる毎に NMI が向上している。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-23/images/5.png" alt="image">&lt;/p>
&lt;h3 id="conclusion-結論貢献">Conclusion (結論・貢献)&lt;/h3>
&lt;ul>
&lt;li>Deep Learn と Graph Clustering の関係性、結果を調査。&lt;/li>
&lt;li>GraphEncoder の嬉しいところ&lt;/li>
&lt;li>隠れ層の次元は入力層の次元より低い。これは全てのエッジが必須ではないことを直感的に示す。&lt;/li>
&lt;li>エッジの除去を行いグラフ表現を更に明確にするために、浅い層から深い層へ。&lt;/li>
&lt;li>EVD の計算量は最速でも O(n2.367)で、グラフは密なグラフ表現。(Toeplitz Matirix)&lt;/li>
&lt;li>GraphEncoder は O(ncd)、d は隠れ層の最大次元、c はグラフの平均次元。(例: 各ノードが k 本のエッジを持つ類似度グラフの場合 c=k。ソーシャルグラフで表すと、c は友達の平均の数を示す。)&lt;/li>
&lt;li>EVD は並列化が困難。確率的勾配降下法(SGD)は EVD と比べると並列化が容易である。&lt;/li>
&lt;/ul>
&lt;h3 id="提案手法の限界残された課題">提案手法の限界(残された課題)&lt;/h3>
&lt;p>実行時間の比較が行われていないが、あくまでこの論文の価値は DL と Graph Clusetering の関連性を示しているのが価値なのでそこは許して下さいって感じ。### Comments (疑問点・わからなかったところ・議論)&lt;/p>
&lt;ul>
&lt;li>トップカンファレンスを年 2 本、2nd tier を 1 本 1st で出せるのは、どうやればそのレベルに到達するんだ?&lt;/li>
&lt;li>トレンドに乗った良い論文。&lt;/li>
&lt;li>Good Writing. 内容もシンプルなので 90 分でサクッと気持よく読めた。論文読むより、スパース自己符号化の勉強に時間取られた。&lt;/li>
&lt;li>Corollary2 で ~ symmetrix matrix D−1S って言ってる割に行列の対称性は保証されてないので 3.1 全般が怪しい、辻褄があってない。&lt;/li>
&lt;/ul></description></item><item><title>JupyterNotebookをリモートサーバー上で公開して、どこでも研究開発 &amp; 講義でJupyterhubを利用する</title><link>https://shunyaueta.com/posts/2017-12-22/</link><pubDate>Fri, 22 Dec 2017 17:48:12 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-22/</guid><description>
&lt;p>JupyterNotebook をリモートサーバー上で公開して、どこでも研究開発。&lt;/p>
&lt;p>講義で Jupyterhub を利用するお話です。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-22/images/1.gif" alt="image">&lt;/p>
&lt;p>GIF 画像は下記の記事で知った&lt;code>tqdm&lt;/code>というパッケージを使いたくなったので載せてみた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://postd.cc/my-top-5-new-python-modules-of-2015/">私が選ぶ 2015 年の”新しい”Python モジュール トップ 5&lt;/a>
&lt;a href="http://amzn.to/2DGM8UA">IPython データサイエンスクックブック ―対話型コンピューティングと可視化のためのレシピ集&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>IPython データサイエンスクックブックをキッカケに研究室でも JupyterNotebook の凄さを皆が知り、MATLAB の kernel を通して利用を始めたりしています。自分は Python2→MATLAB→MATLAB &amp;amp; Python3 という流れで移り変わっています。&lt;/p>
&lt;h2 id="jupyternotebook-をリモートサーバー上で公開">JupyterNotebook をリモートサーバー上で公開&lt;/h2>
&lt;p>コードは以下の通りです。特に問題なく公開することができました。&lt;/p>
&lt;h3 id="環境">環境&lt;/h3>
&lt;ul>
&lt;li>CentOS 7 系&lt;/li>
&lt;/ul>
&lt;p>下記の記事を参考にセットアップする。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/Kodaira_/items/feadfef9add468e3a85b">pyenv と virtualenv で環境構築&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>今回は pyenv を使って Python3.5.1 でホストしています。&lt;/p>
&lt;p>昨日この記事を読んで、Anaconda がオススメされているので今度セットアップするときに使ってみよう。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://jupyter-notebook.readthedocs.org/en/latest/public_server.html#notebook-public-server">Running a public notebook server | JupyterNotebook Docment&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>こまかい設定等は以下の記事で説明されています。IPython Notebook を対象にした記事ですが、ほとんど一緒なので問題ありません。(config.py 自体がコメントで丁寧に各設定が記述されています。)&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/ynakayama/items/ab3ea36fa8a7f0f6e5b3">IPython notebook サーバーを立ち上げる&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://akiniwa.hatenablog.jp/entry/2013/11/25/001805">ipython notebook をリモートサーバ上で動かす。&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考記事">参考記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://qiita.com/jellied_unagi/items/10877ca7f53bda4c34fa">iPython notebook で研究開発生活&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="juptyerhub--講義で-jupyter-を利用する">Juptyerhub : 講義で Jupyter を利用する。&lt;/h2>
&lt;p>JupyterNotebook を講義でも活用できるようにならないかなと先生と探していたのですが、Jupyternotebook を公開するだけだとユーザー管理が不可能です。例えば &lt;code>~tarou/&lt;/code>というディレクトリで jupyternotebook を公開すると&lt;code>~tarou/&lt;/code>に notebook が沢山できだれがどのノートを作ったのかが把握できないという問題点があります。&lt;/p>
&lt;p>その問題点を解消するのが&lt;code>JupyterHub&lt;/code>です。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jupyter/jupyterhub">Jupyterhub&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Jupyterhub は標準のユーザー認証で&lt;a href="https://en.wikipedia.org/wiki/Pluggable_authentication_module">PAM&lt;/a>を利用しているので、Cent OS のユーザー名とパスワードでログインすることができます。&lt;/p>
&lt;p>2016/01/29 現時点で、PAM の認証方式だと上手く認証されるときとされないときが存在しています。&lt;/p>
&lt;p>PAM 以外の認証方法としては&lt;a href="https://github.com/jupyter/jupyterhub/wiki/Authenticators">Auth&lt;/a>で記述されているが以下の&lt;/p>
&lt;ul>
&lt;li>GitHub/BitBucket/MediaWiki/CILogon OAuth&lt;/li>
&lt;li>Google OAuth&lt;/li>
&lt;li>Local+Google OAuth (from within a Docker container)&lt;/li>
&lt;li>LDAP Authenticator&lt;/li>
&lt;/ul>
&lt;p>が用意されている。大学で LADP サーバーが公開されているならそれと連携するのが一番だが、Github などを認証に使うのも良いんじゃないかと。&lt;/p>
&lt;p>[余談]Jupyterhub の記事を探していて見つけたこの記事が面白い。UC バークレーの Ph.D の学生が教育用にどう Jupyterhub を活用しているか。そして運用の段階でどのような問題がでてきたかが書かれている。海外の大学は進んでいるな~&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.rackspace.com/blog/deploying-jupyterhub-for-education/">Deploying JupyterHub for Education&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="参考記事-1">参考記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://estrellita.hatenablog.com/entry/2015/07/31/083202">CentOS6.6(64bit)に JupyterHub をインストールする&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CoreMLがTensorFlow Liteをサポート</title><link>https://shunyaueta.com/posts/2017-12-06/</link><pubDate>Wed, 06 Dec 2017 13:36:38 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-06/</guid><description>
&lt;p>TensorFlow 無双&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-06/images/1.png" alt="image">&lt;/p>
&lt;p>TensorFlow Lite meets CoreML!!&lt;/p>
&lt;p>個人的にいま興味ある分野のうちの一つがスマホで動く機械学習なんですが、昨日 TensorFlow Lite が CoreML でサポートされるというアナウンスがありました!&lt;/p>
&lt;p>&lt;a href="https://developers.googleblog.com/2017/12/announcing-core-ml-support.html">Announcing Core ML support in TensorFlow Lite&lt;/a>&lt;/p>
&lt;p>CoreML の最大の利点は iPhone のアーキテクチャを最大限に利用した推論の高速化なので、Google も何かしらの手を打ってくると思っていましたがまさかそのまま CoreML にサポートされたのは驚きです。&lt;/p>
&lt;p>個人的に keras2, Caffe&lt;a href="https://developer.apple.com/documentation/coreml/converting_trained_models_to_core_ml">¹&lt;/a>だけがサポートされてる今の状態は選択肢が少なくて微妙だなと思っていたので良いことだと思います。&lt;/p>
&lt;p>少し横道にそれますが、ONNX と呼ばれる Machine Leaning のモデルを相互変換できるプロジェクトも立ち上がっているので、近いうちにフレームワーク間の差異は消えていき、書きたいフレームワークで書き、動かしたい環境にモデルを変換して運用するという流れになる未来がくるかもしれません。&lt;/p>
&lt;p>&lt;a href="http://onnx.ai/">ONNX: Open Neural Network Exchange Format&lt;/a>&lt;/p>
&lt;p>Pixel&lt;a href="https://techcrunch.com/2017/10/17/googles-first-custom-consumer-chip-is-the-secret-behind-the-pixel-2s-camera-performance/">²&lt;/a>も iPhone8&lt;a href="http://appleinsider.com/articles/17/09/23/inside-iphone-8-apples-a11-bionic-introduces-5-new-custom-silicon-engines">³&lt;/a>以降に搭載されている A11 チップに機械学習の計算を高速化させるチップが採用されているのでこれから Machine Learning on Mobile はドンドン加速していくとおもいます。iOS11 の吉田さんが担当している CoreML の章を見てましたが、利点と欠点が明快に知れるのでオススメです。&lt;/p>
&lt;p>&lt;a href="https://peaks.cc/hurutoriya/iOS11">iOS 11 Programming - PEAKS&lt;/a>&lt;/p>
&lt;p>TensorFlow Lite もデフォルトで Android をサポートしているので、こりゃほんとにプロダクション環境だと TensorFlow 一択になりつつありますね&lt;/p>
&lt;p>にしても TensorFlow の勢いはほんとに凄い…&lt;/p></description></item><item><title>Visualized Approximate Eigen Vector by Power Iteration on 3 dimensions.</title><link>https://shunyaueta.com/posts/2017-12-05/</link><pubDate>Tue, 05 Dec 2017 13:20:41 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-05/</guid><description>
&lt;p>&lt;strong>You can intuitively lean Power Iteration by Visualization Power.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-05/images/1.gif" alt="image">&lt;/p>
&lt;p>Animation of Power Iteration by MATLAB&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Power_iteration">Power iteration - Wikipedia&lt;/a>&lt;/p>
&lt;p>Finally you put a command line&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;gt; convert -layers optimize -loop &lt;span class="m">0&lt;/span> -delay &lt;span class="m">40&lt;/span> eigenvector*.png anim.gif
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Edge-Weighted Personalized PageRank: Breaking A Decade-Old Performance Barrier を読んだ</title><link>https://shunyaueta.com/posts/2017-12-04/</link><pubDate>Mon, 04 Dec 2017 13:06:15 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-04/</guid><description>
&lt;p>応用数理研究者が機械学習界に進出していく研究&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-04/images/1.png" alt="image">&lt;/p>
&lt;p>youtube clip&lt;/p>
&lt;p>応用数理界隈ではクラシックな解き方で PageRank が解かれているので最新の数値計算手法に置き換えることで劇的にパフォーマンスが向上して 10 年前のパフォーマンスの鎖を解き放った論文&lt;/p>
&lt;ul>
&lt;li>KDD2015 Best student paper award&lt;/li>
&lt;li>&lt;a href="http://www.cs.cornell.edu/~bindel/present/2015-08-kdd-talk_kdd-aug15.pdf">Slide(PDF)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.cs.cornell.edu/~bindel/present/2015-08-kdd-poster_poster-kdd-pr.pdf">Poster(PDF)&lt;/a>
&lt;a href="http://www.cs.cornell.edu/~bindel//blurbs/graphspec.html">Spectral network analysis&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/wenleix/EdgePPR">wenleix/EdgePPR&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Presentation Movie is uploaded in Youtube.&lt;/li>
&lt;/ul>
&lt;p>Author&lt;/p>
&lt;ul>
&lt;li>W. Xie&lt;/li>
&lt;li>Ph.D Candidate at Cornell University&lt;/li>
&lt;li>&lt;a href="http://wenleix.github.io/">http://wenleix.github.io/&lt;/a>&lt;/li>
&lt;li>iterative computation on big graph data&lt;/li>
&lt;li>D. Bindel&lt;/li>
&lt;li>&lt;a href="http://www.cs.cornell.edu/~bindel/">http://www.cs.cornell.edu/~bindel/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.cs.cornell.edu/~bindel/talks.html">http://www.cs.cornell.edu/~bindel/talks.html&lt;/a>&lt;/li>
&lt;li>He is frequently research activ like ideal young researcher.&lt;/li>
&lt;li>Nonlinear eigenvalue problem.&lt;/li>
&lt;li>Alan J. Demers&lt;/li>
&lt;li>Prof.&lt;/li>
&lt;li>Johannes Gehrke&lt;/li>
&lt;li>&lt;a href="http://www.cs.cornell.edu/johannes/">http://www.cs.cornell.edu/johannes/&lt;/a>&lt;/li>
&lt;li>Prof.&lt;/li>
&lt;li>VLDB,SIGMOD,KDD&lt;/li>
&lt;/ul>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;ul>
&lt;li>ページランクは重要な指標。遷移確率を求めるにはランダムサーファーモデル(ランダムウォーク)が必要。&lt;/li>
&lt;li>様々な高速解法が提案されている。&lt;/li>
&lt;/ul>
&lt;h3 id="reseatch-question">Reseatch Question&lt;/h3>
&lt;ul>
&lt;li>しかし 10 年以上前、PageRank の黎明期から Personalization based の手法は問題がある。&lt;/li>
&lt;li>一般的な PageRank の解法の説明、その後に Model Reduction をベースにした約 5 倍の性能を誇る提案手法を説明。&lt;/li>
&lt;li>提案手法の性能によって、パフォーマンス上のボトムネックは消えた。&lt;/li>
&lt;/ul>
&lt;h3 id="proposed-method">Proposed Method&lt;/h3>
&lt;ul>
&lt;li>PageRank&lt;/li>
&lt;li>初期:WEBPage のランクに使用 → 現在:推薦、ソーシャルネットワーク&lt;/li>
&lt;li>Random Suffer Model&lt;/li>
&lt;li>Transition : α の確率で Random Walk(滞在ノードから無作為に遷移)&lt;/li>
&lt;li>Teleporting : 1−α Random Junmp(滞在ノードに依存せずに全てのノードを対象に無作為遷移)&lt;/li>
&lt;li>x(t+1)=αPxt+(1−α)v,where P=AD−1&lt;/li>
&lt;li>v is represents telepotation probabilitie&lt;/li>
&lt;li>xt Walker の確率分布&lt;/li>
&lt;li>サーファーが来る確率 = RandomWalk の確率_RandomWalk による遷移確率 + RandomJump の確率_RandomJump の遷移確率&lt;/li>
&lt;li>= α× RandomWalk による遷移確率 + (1−α)×RandomJump の遷移確率&lt;/li>
&lt;li>= α×+(1−α)×v&lt;/li>
&lt;li>x: Stationary vector(不動ベクトル、定常ベクトル、不動点定理など)&lt;/li>
&lt;li>x が定常状態になった際に、x の確率分布が PageRank を表す。&lt;/li>
&lt;li>x(t),x(t+1)が同一(残差が無い)だと仮定することで、次式の線形方程式を解くことで Pagerank を求める。&lt;/li>
&lt;li>Mx=b,where M=(I−αP),b=(1−α)v.&lt;/li>
&lt;/ul>
&lt;h4 id="standard-pagerank">Standard PageRank&lt;/h4>
&lt;ul>
&lt;li>グラフの構造(幾何性)を利用&lt;/li>
&lt;li>多くのグラフでは、ノードやエッジに重みが存在する&lt;/li>
&lt;/ul>
&lt;h4 id="personalized-pagerank">Personalized PageRank&lt;/h4>
&lt;ul>
&lt;li>PageRank を特定のユーザやクエリに合わせたランク&lt;/li>
&lt;li>Node wighted graph&lt;/li>
&lt;li>Mx(w)=(1−α)v(w),w∈ℝ𝕕&lt;/li>
&lt;li>w: 特定の個人、クエリに合わせたパラメータ&lt;/li>
&lt;li>Edge weighted graph&lt;/li>
&lt;li>M(w)x(w)=(I−α)v,w∈ℝ𝕕&lt;/li>
&lt;li>Node Weight, Edge Weight 共に Personalized PageRank は重要だが、２つの問題がある。&lt;/li>
&lt;li>Node Weight に関する論文:多い Edge Weight:少ない&lt;/li>
&lt;li>計算コストが高い&lt;/li>
&lt;li>Edge weighted Personalized PageRank における x(w)を求める高速手法を提案&lt;/li>
&lt;li>提案手法は計算量が準線形的。&lt;/li>
&lt;li>予備知識&lt;/li>
&lt;li>xt+1:べき乗法&lt;/li>
&lt;li>Mx=b:ヤコビ法&lt;/li>
&lt;li>x(w)=(1−α)M−1Vw.&lt;/li>
&lt;li>v≈Vwwhere V∈ℝ𝕟×𝕕&lt;/li>
&lt;li>M−1V:O(n) 、x(w)の再構築に O(d)、PageRank を求めるには O(nd)が要求される。&lt;/li>
&lt;li>v が疎なら計算量は準線形へ。&lt;/li>
&lt;/ul>
&lt;h3 id="model-resuction-method">MODEL RESUCTION METHOD&lt;/h3>
&lt;ol>
&lt;li>k 次元の次元の削減された空間を構築&lt;/li>
&lt;li>k 次元を近似するために k 個の等式が必要&lt;/li>
&lt;li>次元削減の問題を解く(PageRank のベクトルは一部分が重要だという仮説)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Reduced Space Construction&lt;/li>
&lt;li>{w(j)}rj=1(ベクトルの集合)に対応する PageRank {x(j)}rj=1(ベクトルの集合)を求める。&lt;/li>
&lt;li>w は乱数によって決定する&lt;/li>
&lt;li>k 次元の空間 υ を探索する&lt;/li>
&lt;/ul></description></item><item><title>Machine Learning that Matters (ICML2012) を読んだ</title><link>https://shunyaueta.com/posts/2017-12-01/</link><pubDate>Fri, 01 Dec 2017 07:55:12 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-01/</guid><description>
&lt;p>機械学習の研究してる人は全員読んだ方がいい。そう断言できるぐらい良い内容が書かれています。 ICML2012 で発表された最近の機械学習に関する研究の問題点を論じた論文。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-12-01/images/1.png" alt="image">&lt;/p>
&lt;p>Summaly&lt;/p>
&lt;p>「あなたは現実世界で役立つデータに対して機械学習の研究を行っていますか?」&lt;/p>
&lt;p>著者は NASA の JPL(ジェット推進研究所)、カリフォルニア工科大学に所属する Kiri L.&lt;/p>
&lt;p>&lt;a href="http://www.wkiri.com/">Kiri L. Wagstaff&lt;/a>&lt;/p>
&lt;p>発表動画を探してみたんですが、ICML2012 で発表した際のビデオはサーバのクラッシュにより喪失したとのこと。&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>The video for my controversial ICML 2012 talk is no longer available (lost in a server crash). However, you can read the original paper: Machine Learning that Matters (pdf, 6 pages, 234K) and see the slides from a subsequent invited AAAI talk: Challenges for Machine Learning Impact on the Real World (1.6M). PowerPoint は下記リンク先に配布されています。&lt;/em>&lt;a href="https://href.li/?http://www.wkiri.com/research/papers/wagstaff-MLmatters-slides-AAAI.pptx">&lt;em>http://www.wkiri.com/research/papers/wagstaff-MLmatters-slides-AAAI.pptx&lt;/em>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>時間のある人は是非原著論文を読んでみてください!&lt;/p>
&lt;h3 id="概要">概要&lt;/h3>
&lt;p>最近の機械学習は問題を社会・科学世界から持ち込むための深刻なギャップがある。 データセットに明確な制約をかけた物を私達は調査し、それを評価指標のために利用する。 データセットがある問題領域に戻って考えよう。 機械学習が持つインパクト(影響)を増加するためは私達の研究で何を変えればいいだろう？ 我々は機械学習の問題について焦点と議論を交わす。&lt;/p>
&lt;p>大事なところは全て下記の記事が抑えてくれてるので、時間の無駄だと思うので訳すのはやめます。&lt;/p>
&lt;p>＊下記の記事がキッカケでこの論文を知りました。 日本語で詳しくこの論文が紹介されていて、この記事を読めば大事な事が僕のメモよりはるかに分かりやすく書かれています。&lt;/p>
&lt;p>&lt;a href="http://d.hatena.ne.jp/repose/20120603/1338715703">Machine Learning that Matters(ICML 2012) 読んだ - 糞ネット弁慶&lt;/a>&lt;/p>
&lt;h3 id="コメント">コメント&lt;/h3>
&lt;p>機械学習に関する意味ある応用と理論[¹] というよりも、科学と工学の研究の違いについて、考える後押しをくれた論文でした。 大学院で科学寄りの講義を受けていると、「じゃあ、工学の意味ってなんだろう?」と考える事が多くなりました。&lt;/p>
&lt;p>今まで見聞きした中で工学の説明で一番しっくりきたのは、昔東大工学部のサイトに掲載されていた下記の言葉です。&lt;/p>
&lt;p>「工学とは意思を実現する学問である」&lt;/p>
&lt;p>他にこの論文について取り上げられている記事。 &lt;a href="https://myopomme.hatenablog.com/entry/20120606/1338993847">優秀な研究者がエンジニアに流れているのは日本だけじゃないのかも&lt;/a>&lt;/p>
&lt;p>上記の記事の統計学者ブラッドリー・エフロンが述べている言葉は、じんわりと自分に染み渡ってきました。&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>計算機科学の世界には、我々がデータを計算機に入れさえすれば正しい答えが出てくるのだという誤解が向けられている。いまやさまざまな分野で、例えば天文学などがそうだが、多くの部分を計算機とシミュレーションに負うようになってきていて、彼らは自然そのものではなく、シミュレーションなどを見て議論をするようになっている。これは我々統計学者の状況と同じだ。彼らはどんどん二次科学に近付いている。これは、彼らも私たちと同じトラブルに見舞われていること意味する。「何が正しくて何が間違っているのか」。私はたまに思うのだが、科学の歴史の中で、まず目に見える簡単な問題から解かれていった。そこには確率も統計も必要がなかった。科学はそういう簡単な問題をどんどん征服していっているのではないかとも思える。今科学は非常に複雑な問題について研究をし始めている。「自然の中の科学」と「自然を越えた科学」の両方がある中で、我々は２番目のものに向かっているのではないだろうか。&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>引用しか残っておらず、本体記事の方は消えているのが残念です。&lt;/p></description></item><item><title>Jupyter上でSVGのイラストやアニメーションが作成できるプラグイン egel</title><link>https://shunyaueta.com/posts/2017-11-22/</link><pubDate>Wed, 22 Nov 2017 12:04:30 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-11-22/</guid><description>
&lt;p>アイデアは面白い… けど easy drawing ではない&lt;/p>
&lt;p>Jupyter 使ってると作図も Jupyter 上で完結させたいなぁ~って思うときがあるんですが、スクリプトで作図はけっこう辛いものがあります&lt;/p>
&lt;p>そのため Jupyter 上でフリースタイルに作図できる機能ないかなと探してたら egal という面白そうな拡張機能があったので使ってみました&lt;/p>
&lt;p>&lt;a href="https://github.com/uclmr/egal">uclmr/egal&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-22/images/1.gif" alt="image">&lt;/p>
&lt;p>egal GIF animation&lt;/p>
&lt;p>以下のリポジトリから
&lt;code>$pip3 install git+https://github.com/uclmr/egal.gi&lt;/code>&lt;/p>
&lt;p>でクローンしてきて
&lt;code>$jupyter nbextension install --py egal $jupyter nbextension enable --py egal&lt;/code>&lt;/p>
&lt;p>で拡張機能を有効にして使えるようになります。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-22/images/2.png" alt="image">&lt;/p>
&lt;p>ブラシアイコンをクリックすると新たなセルが生成される&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-22/images/3.gif" alt="image">&lt;/p>
&lt;p>ボタンをクリックすると各オブジェクトの詳細なプロパティが調整できる&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-22/images/4.gif" alt="image">&lt;/p>
&lt;p>フレーム毎にオブジェクトを設定してアニメーションっぽくもできる&lt;/p>
&lt;p>5–6 分使ってみて感じましたが、めちゃくちゃ操作がしづらい…&lt;/p>
&lt;p>やはりブラウザ上での図形作成はめちゃくちゃストレスたまるので、ローカルで keynote 使って図形作成したほうがマシな感じです。&lt;/p>
&lt;p>遊んだ結果を notebook で github にアップしておきました。&lt;/p>
&lt;p>残念ながら SVG が Github 上ではレンダリングされないので残念な感じになっております&amp;hellip; ローカルにクローンしてきて egal を有効にしておくと見れます。&lt;/p>
&lt;p>&lt;a href="https://github.com/hurutoriya/notebook/blob/master/notebook/egal_example.ipynb">hurutoriya/notebook&lt;/a>&lt;/p>
&lt;h3 id="結論">結論&lt;/h3>
&lt;p>Jupyter で全てを完結させるのは難しい&lt;/p></description></item><item><title>OpenCV 3.3から使えるDNNモジュールを使って物体検出</title><link>https://shunyaueta.com/posts/2017-11-14/</link><pubDate>Tue, 14 Nov 2017 11:36:43 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-11-14/</guid><description>
&lt;p>OpenCV と MobileNet を使って物体検出を行った&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-14/images/1.png" alt="image">&lt;/p>
&lt;p>Object Detection with OpenCV dnn modules and MobileNetSSD on Jupyter Notebook&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>物体検出を Deep Leaning と OpenCV を用いて行う&lt;/p>
&lt;p>OpenCV 3.3 から&lt;code>dnn&lt;/code>モジュールが正式にリリースされた&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>The main news is that we promoted DNN module from opencv_contrib to the main repository, improved and accelerated it a lot. An external BLAS implementation is not needed anymore. For GPU there is experimental DNN acceleration using Halide (&lt;/em>&lt;a href="http://halide-lang.org">&lt;em>http://halide-lang.org&lt;/em>&lt;/a>_). The detailed information about the module can be found in our wiki: Deep Learning in OpenCV.&lt;br>
_&lt;a href="https://opencv.org/opencv-3-3.html">&lt;em>https://opencv.org/opencv-3-3.html&lt;/em>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>今回はその dnn モジュールを使って物体検出を行う&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/opencv/opencv/tree/master/modules/dnn">OpenCV dnn modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/opencv/opencv/tree/master/samples/dnn">Official Sample&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この記事は主に&lt;a href="https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/">pyimagesearch の記事&lt;/a>を参考に行いました。詳細な解説がありがたいです Deep Leaning を基にした物体検出で有名な手法は以下の 3 つである&lt;/p>
&lt;ul>
&lt;li>Faster R-CNN : 2015&lt;/li>
&lt;li>YOLO : 2015&lt;/li>
&lt;li>SSDs : 2015&lt;/li>
&lt;/ul>
&lt;p>物体検出を行う際の DNN のアーキテクチャでは主に VGG か ResNet が用いられる。しかし欠点としてこれらのアーキテクチャは非常に大きく 200–500MB のサイズになってしまう&lt;/p>
&lt;p>物体検出において速度、精度、メモリの３つのバランスを考慮する場合、どのアーキテクチャを選ぶべきかを Google が論文としてまとめている&lt;/p>
&lt;p>&lt;a href="https://arxiv.org/abs/1611.10012">[1611.10012] Speed/accuracy trade-offs for modern convolutional object detectors&lt;/a>&lt;/p>
&lt;p>一行でまとめると、基本的に速度と精度はトレードオフであり、最速は SSDs MobileNet, 最高精度は Faster R-CNN w/Inception Resnet at stride 8&lt;/p>
&lt;p>今回は省メモリかつ速度が早い SSDs MobileNet を用いて物体検出を行った&lt;/p>
&lt;p>Demo on JupyterNotebook&lt;/p>
&lt;h2 id="code">Code&lt;/h2>
&lt;p>&lt;a href="https://github.com/hurutoriya/yolov2_api">hurutoriya/yolov2_api&lt;/a>&lt;/p>
&lt;h2 id="study">Study&lt;/h2>
&lt;ul>
&lt;li>Print デバッグをやめて、logging module に切り替えた。出力が綺麗になっていい感じ&lt;/li>
&lt;li>OpenCV だけで DNN を使えるのは結構便利(学習済モデルとかは必須)&lt;/li>
&lt;/ul>
&lt;h2 id="future-work">Future Work&lt;/h2>
&lt;ul>
&lt;li>YOLO v2 も C++のサンプルがあるので、Python でも動くようにしたい&lt;/li>
&lt;li>Web App に組み込めるくらい速そうなので、やってみましょう&lt;/li>
&lt;/ul></description></item><item><title>Djangoで顔認識の結果をJSONで返す最小構成のAPIサーバーを作った</title><link>https://shunyaueta.com/posts/2017-11-13/</link><pubDate>Mon, 13 Nov 2017 17:22:38 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-11-13/</guid><description>
&lt;h2 id="demo">DEMO&lt;/h2>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-13/images/1.gif" alt="image">&lt;/p>
&lt;p>GitHub でコードを公開してます。&lt;/p>
&lt;p>&lt;a href="https://github.com/hurutoriya/face_detector_api">hurutoriya/face_detector_api&lt;/a>&lt;/p>
&lt;p>Django の勉強は、基本的なイントロダクションとしてオフィシャルサイトのドキュメントが充実しているのでオススメです。&lt;/p>
&lt;p>pyimagesearch の Blog 記事で最小限の構成で顔検出を行う API サーバーを作る記事があり、今回はそれを基本に作成した。&lt;/p>
&lt;p>以下所感&lt;/p>
&lt;ul>
&lt;li>Django は Rails と比べるとそんなにレールが敷かれていない&lt;/li>
&lt;li>日本語の記事がほぼ存在しないので、英語の記事を読む良い練習になった&lt;/li>
&lt;li>OpenCV や Scikit-lean がそのまま動くのは相当魅力的で、サーバからのレスポンスが帰ってきた時には地味に感動&lt;/li>
&lt;li>API 設計や非同期処理なんかの知識が全く足りない&lt;/li>
&lt;/ul>
&lt;h2 id="次の課題">次の課題&lt;/h2>
&lt;p>今回の発展形として django-rest-framework を使って、モデルを組み込んで作り上げて Google Apps Engine 上で公開してみよう。 REST Framework はこの記事&lt;a href="https://hurutoriya.github.io/blog/django-start.html#fn-django_rest_article">2&lt;/a>を参考に画像をアップロードできる雛形は作り上げた。 後は OpenCV で処理を施す部分を書き上げたらいけそう。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-11-13/images/2.png" alt="image">&lt;/p>
&lt;p>&lt;code>django-rest-framework&lt;/code> で使える管理画面&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://github.com/hurutoriya/face_detector_api">hurutoriya/face_detector_api&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://qiita.com/kimihiro_n/items/86e0a9e619720e57ecd8">Django REST Framework を使って爆速で API を実装する&lt;/a>,&lt;a href="https://github.com/ChristianKreuzberger/django-rest-imageupload-example/tree/master/tutorial">ChristianKreuzberger/django-rest-imageupload-example&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.pyimagesearch.com/2015/05/11/creating-a-face-detection-api-with-python-and-opencv-in-just-5-minutes/">Creating a face detection API with Python and OpenCV (in just 5 minutes)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.djangoproject.com/ja/1.11/intro/">Django 1.11 Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.django-rest-framework.org/">Django REST framework is a powerful and flexible toolkit for building Web APIs.&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>TexPadのおかげでLatex人生が変わりました</title><link>https://shunyaueta.com/posts/2017-10-08/</link><pubDate>Sun, 08 Oct 2017 02:22:24 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-10-08/</guid><description>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-10-08/images/1.png" alt="image">&lt;/p>
&lt;p>Latex の煩わしい点が全て解決される Mac のソフトウェアです。&lt;/p>
&lt;ul>
&lt;li>自動補完&lt;/li>
&lt;li>synctex 対応(コマンド+クリックで PDF、tex ファイル同期)&lt;/li>
&lt;li>自動タイプセット
&lt;a href="https://www.texpad.com/">Texpad · Smoothest way to write LaTeX&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>以前は atom+latexmk で Latex を扱ってましたが、texpad の方が断トツに使い心地が最高です。&lt;/p>
&lt;h2 id="購入方法">購入方法&lt;/h2>
&lt;p>Appstore か、クレジットカードで Appstore を経由せずに買うかの２つの方法があります。&lt;br>
Appstore はだいぶ前に更新を停止しているみたいなので、クレジットカードを持っている人はクレジットカードを使って MacAppstore を経由せずに購入することをオススメします。&lt;/p>
&lt;p>$24.99 しましたが、それ以上の価値があるソフトウェアです。&lt;br>
2 週間の無料体験期間があるので是非お試し下さい。&lt;/p>
&lt;p>下記のスクリーンショットのように、beamer も texpad で動くのは感動モノ。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2017-10-08/images/2.png" alt="image">&lt;/p>
&lt;p>beamer on texpad&lt;/p>
&lt;p>日本語で TexPad を扱いたいときは下記のスクリプトを読み込んだら、bibtex のバグが治ります。&lt;/p></description></item><item><title>機械学習・コンピュータビジョンを活かしたビジネスを手掛ける株式会社ABEJAでインターンしてきた</title><link>https://shunyaueta.com/posts/2014-08-23/</link><pubDate>Sat, 23 Aug 2014 17:18:02 +0000</pubDate><author>Shunya Ueta</author><guid>https://shunyaueta.com/posts/2014-08-23/</guid><description>
&lt;p>株式会社 ABEJA という会社に 2013/8/25~2013/9/26 間に 2 週間弱インターンシップに参加してきました。&lt;/p>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2014-08-23/images/1.png" alt="image">&lt;/p>
&lt;p>2013 年当時のサイトのスクショ&lt;/p>
&lt;h2 id="whats-abeja">What’S ABEJA?&lt;/h2>
&lt;p>ABEJA について詳しく知りたい方は下記のリンクを見るとわかりやすいです。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://type.jp/et/log/article/abejaneo">マーケティングから決済まで、人認証技術 × ビジネスプロデュースで未来を変える ABEJA の挑戦【連載:NEO ジェネ！】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wired.jp/2014/09/12/sap-hana-innovation-campus/">いまそこにある、リアルタイムデータ解析。ぼくらの暮らしを変える、日本のスタートアップ 3 社&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>この会社をはじめて知ったのは、ミクシィでのインターンシップに参加してた時に別グループでインターンしていた知り合いの人に教えてもらったのがキッカケです。 機械学習や画像解析を用いて、現実世界の問題を解決して更にビジネスにまで昇華させている点に痺れました。&lt;/p>
&lt;p>本来なら一ヶ月近く参加予定だったんですが、もう一つ挑戦していたリクルートのインターンに運良く合格したので結果的には 2 週間弱という短めのインターンになりました。&lt;/p>
&lt;h2 id="what-do-you-doing-in-abeja-intern">What do you doing in ABEJA intern?&lt;/h2>
&lt;p>インターンの内容は Python を使って社内用のツールをゴニョゴニョしてました。&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>郷に従います。(StyleGuide 見てなかった…) / 他 2 コメント&lt;/em> &lt;a href="http://t.co/5I0nThs4rU">&lt;em>http://t.co/5I0nThs4rU&lt;/em>&lt;/a> &lt;em>“PEP 8 — Style Guide for Python Code”&lt;/em> &lt;a href="http://t.co/in7q9lD6cy">&lt;em>http://t.co/in7q9lD6cy&lt;/em>&lt;/a>&amp;gt; &lt;em>— UEDA (@hurutoriya)&lt;/em> &lt;a href="https://twitter.com/hurutoriya/status/514947368437837824">&lt;em>2014, 9 月 25&lt;/em>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>普段は matlab か Ruby 書いてるんですが、普段書いてない言語を書くとあまりよろしくないコードになったので StyleGuide 導入しました。&lt;/p>
&lt;blockquote>
&lt;p>_“vim で python 開発するとき pyflakes + PEP8 = flake8 が便利 &lt;a href="http://t.co/ga33wqUytL">_http://t.co/ga33wqUytL_&lt;/a>&amp;gt; &lt;em>— UEDA (@hurutoriya)&lt;/em> &lt;a href="https://twitter.com/hurutoriya/status/514948433023475713">&lt;em>2014, 9 月 25&lt;/em>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>ABEJA のエンジニアの人たちは、全員が自分の強みを持っていて凄く良いチームが出来上がっていました! 一緒に働くことができて心の底から心地よかったです。&lt;/p>
&lt;p>ランチや晩御飯は他のインターン生や社員さんと色んな話ができて最高でした。(ご馳走していただいた方々ありがとうございました)
人事の方が他のインターン生や社員さんとの交流の機会を積極的に設けてくれたのが大きかったです!!&lt;/p>
&lt;p>中間報告会で「ビジネスサイドの人とご飯食べに行きたいです!!」と要望を出したら時間調整をしてくれてありがたかったです!!&lt;/p>
&lt;p>行列の次元圧縮とその応用が僕の研究分野なのですが、今回のインターンで色んなアドバイスが聞けて研究に対してかなりモチベーションが上がりました。研究内容について相談することができるのは、本当にありがたかったです。&lt;/p>
&lt;p>お客さんが来たり誰かが営業に行ったりした時に、全員から挨拶の言葉が出ているので”めっちゃ元気があるし、この会社雰囲気最高だな!!“と肌で感じてました。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>インターンでは実務面もそうですが、人生についても色々と真剣に考える機会が与えられました。今まで良くも悪くも惰性的に人生の進路を決めてきたので、今回のインターンシップで色々とこれから先の事を考えてみるキッカケを与えれくれたのは新鮮な体験でした。&lt;/p>
&lt;p>全員が一つの意思を持って突き進んでいる姿はとても美しいです!!&lt;/p>
&lt;p>メンターである&lt;a href="https://twitter.com/toshitanian">@toshitanian&lt;/a>さん、今回のインターンに誘ってくれてありがとうございました!!&lt;/p></description></item><item><title>ミクシィにインターンしてきた</title><link>https://shunyaueta.com/posts/2013-08-21/</link><pubDate>Fri, 23 Aug 2013 17:04:38 +0000</pubDate><guid>https://shunyaueta.com/posts/2013-08-21/</guid><description>
&lt;h4 id="株式会社ミクシイに-2013892013920-までインターンしてきました">株式会社ミクシイに 2013/8/9~2013/9/20 までインターンしてきました。&lt;/h4>
&lt;p>&lt;img src="https://shunyaueta.com/posts/2013-08-23/images/1.png" alt="image">&lt;/p>
&lt;p>2013 年当時のスクリーンショットを探してたが、無かったので 2017/12/24 のを撮ってきた。良い意味であまり変わってない(ライさんの謎のくるまアプリとか)&lt;/p>
&lt;p>&lt;a href="https://mixi.co.jp/">Dive into mixi&lt;/a>&lt;/p>
&lt;h3 id="なぜインターンに行こうと思ったのか">なぜインターンに行こうと思ったのか&lt;/h3>
&lt;p>僕は高専から筑波大学の情報系に今年度から編入したんですが、&lt;br>
編入してから同期の編入生や先輩、内部生の人達に会って 「このままじゃダメだ、もっと面白く!もっと楽しく生きる!!」 と感じたので参加しました。&lt;/p>
&lt;h4 id="つまり面白そうな事をしたかったので参加しました">…つまり、面白そうな事をしたかったので参加しました。&lt;/h4>
&lt;h3 id="選考過程">選考過程&lt;/h3>
&lt;p>エントリーリーシートを提出、希望する配属先はここで提出します。 2 回の面接があるのですが、つくばから渋谷への道のりは遠いので一回にしてくれました。ありがとうございます！！&lt;br>
面接の服装は、スーツじゃなくて良いので楽です！(むしろスーツはやめてねと言われました)&lt;br>
自己紹介と自分のこれまでの成果物を面接官に説明した後に、質疑応答を 30 分、時間が 20 分ほど余ったので面接官の方から「気になってることをなんでも聞いて下さい」と言われて質問をしていると面接がいつの間にか終わりました。&lt;br>
合否発表は翌日に連絡がきて無事合格することができました、嬉しい!!&lt;/p>
&lt;h3 id="配属先">配属先&lt;/h3>
&lt;p>僕は第一希望の&lt;a href="https://deploygate.com/">DeployGate&lt;/a>に配属されました。&lt;br>
DeployGate チームは社員二人、インターン三人という謎構成でした。&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>「DepoyGate」とは、ミクシィ社の新規事業第 1 弾として登場した Android アプリ提供者向けのテスト版アプリ配信サービスです。 アプリをワイヤレスで配布することができ、アップデータ配信や動作ログがリアルタイムに取得できるので、プロジェクトメンバー全員が常に最新版アプリに触れることができます。 2012 年 9 月のサービス開始から、世界 93 ヵ国 3600 以上のアプリ開発に利用され、そのユーザーの 76％は英語圏というグローバルなサービスでもあります。 「DepoyGate」エンジニアからの発案で生まれたサービスです。 最新の技術に触れ、一緒に開発を進めていきたいという、あなたのチャレンジをお待ちしております。&lt;/em>### メリット&lt;/p>
&lt;/blockquote>
&lt;p>今回のミクシィインターンは 6 週間を超える長期のインターンで実際に提供されているサービスの開発に参加すること t ができます。&lt;/p>
&lt;h3 id="デメリット">デメリット&lt;/h3>
&lt;p>基本的に無いです。&lt;br>
強いて言うなら夏休みが 4/5 ほど持ってかれたことですね。&lt;/p>
&lt;h4 id="何をやった">何をやった？&lt;/h4>
&lt;p>基本的に Github に issue に上がってるチケットを消化していく感じでした。 自分でこれがあったら便利だなと思う機能を追加したり、不便な箇所を改修したりして、GO サインが出たら Depoloy していきます。&lt;/p>
&lt;h4 id="今年度のインターン生は何人">今年度のインターン生は何人?&lt;/h4>
&lt;p>内定生のインターンを除くと両手で数えられるほどでした。&lt;br>
北は北海道、南は沖縄まで全国各地からインターン生が集結しました。&lt;/p>
&lt;h4 id="昼ごはん">昼ごはん&lt;/h4>
&lt;p>イノベーションセンターの人たちと基本的に食べに行きました。渋谷のご飯は高いけど美味しいです^^ IRC で他のインターン生を誘ってご飯に行くこともありました。&lt;br>
IRC のインターンシップチャンネルが全く盛り上がらないの、隣の T さんと裏工作を行い盛り上げてました。&lt;/p>
&lt;h4 id="lt">LT&lt;/h4>
&lt;p>９月の上旬にミクシィ社内で LT が行われて、初めての LT をした!!&lt;/p>
&lt;h3 id="感動した事">感動した事&lt;/h3>
&lt;ol>
&lt;li>Github でのソースコードを管理
僕が DeployGate の開発に参加するのに、要した時間はわずか 10 分です。
Collabrator に登録してもらい、clone をしてディレクトリの設定を終えたら開発が開始できる状態になります。
わずか１０分で開発に参加できる世界にバンザイです！！
DeployGate のミッションでもある「開発以外の見えないコストをなくす」に通じるところがありますね。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>*注)僕はもともと自分のMacにRailsとgitの環境があったのでここまでスムーズに参加することができました。 後からDeployGateに来たインターン生の人はRailsの環境構築から始めても二時間弱程度で終わりました。&lt;/code>&lt;/li>
&lt;li>自分の書いたコードが世界中で走る!!
DeployGate は世界規模のサービスです。&lt;/li>
&lt;li>2012 年 9 月のサービス開始から、世界 93 ヵ国 3600 以上のアプリ開発に利用され、そのユーザーの 76％は英語圏というグローバルなサービスでもあります。&lt;/li>
&lt;li>自分の書いたコードが世界中の人に使われるという経験を味わえました。&lt;/li>
&lt;li>Github の Pull Request を用いたコードレビュー
DeploGate チーム(主にメンターの方)にガッツリレビューして貰うことができます
正常に動くコード(これがめちゃくちゃ難しい)のために Pull Request でのコードレビューをしてくれました。
コーディングの作法や効率の良い実装方法などが行単位でレビューされるので、自分のプログラミングスキルがメキメキと上がっていったと勘違いしちゃうくらいには革新的でした(てへっ!!
自分の書いたコードがレビューされると言う事自体が少ないと思いますが、経験できてよかったと思います&lt;/li>
&lt;li>皆、技術が大好き
インターンのチームメイトも社員さんも、めっちゃくちゃ技術大好き!!って人たちばっかで四六時中お話してても飽きなくて凄くワクワクして楽しかったです。&lt;/li>
&lt;/ul>
&lt;h3 id="まとめ感じたこと得たこと">まとめ(感じたこと・得たこと)&lt;/h3>
&lt;p>箇条書きで&lt;/p>
&lt;ul>
&lt;li>テストは大事&lt;/li>
&lt;li>Deploy するとなると簡単にはいかない…&lt;/li>
&lt;li>イノセンの人たちはギラギラしてて最高に面白い!&lt;/li>
&lt;li>エンジニアリングとかビジネスとかの垣根なんか関係なく、面白い事をやればいい&lt;/li>
&lt;li>面白いことを嗅ぎつけて飛びついていこう!!&lt;/li>
&lt;/ul>
&lt;h3 id="最後に">最後に&lt;/h3>
&lt;ul>
&lt;li>ライさん、キョロさん&lt;/li>
&lt;/ul>
&lt;p>ライさんのおかげでインターンを無事に達成することができました。僕の拙いコー ドを何回もレビューしてくれて本当に助かりました。Deploy されるまでの険しい道程 をサポートしていただきありがとうございました。&lt;/p>
&lt;p>キョロさんには本当に色々とお世話になりました(ここでは書ききれないほどに)。キ ョロさんがいなければ、僕のインターンの通勤は苦痛でしかありませんでした。&lt;/p>
&lt;ul>
&lt;li>へんてこさん、たなさん
詰まった時に聞いたら、的確なアドバイスをくれるのがへんてこさんです。Android も Rails も両方共扱えて純粋に凄いなと感じました。ごはんに毎回誘っていただき有難うございました。
T さんは僕より 4 週間ほど遅れて DeoloyGate のインターンに参加されましたが、さくさくっと合流できてて凄いと思います。CSS おじさんといってすいませんでした。京都に寄った際にはまた、ご飯食べに行きましょう。
二人のおかげで楽しく開発ができました。ありがとうございました。&lt;/li>
&lt;li>イノセンの皆さん
イノセンの人たちは、僕のミクシィに対するイメージを変えてくれました。
今の僕のミクシィのイメージは「最高にクールでワクワクさせてくれる存在」です!!&lt;/li>
&lt;li>インターン同期の皆さん
チームごとに分かれているのでお話できる機会は余りありませんでしたが、昼ごはん食べにいけれて楽しかったです!&lt;/li>
&lt;li>人事の社員さま
このインターンに巡り合わせてくれてありがとうございました。&lt;/li>
&lt;/ul>
&lt;h4 id="ここまで読んで頂いてありがとうございました">ここまで読んで頂いてありがとうございました!!&lt;/h4>
&lt;h3 id="関連リンク">関連リンク&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://toshitanian.hatenablog.com/entry/2013/09/30/210038">mixi のインターンにいってきた&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://parochially.hatenablog.com/entry/2013/10/19/211546">希望を信じた Android アプリ開発者を泣かせたくない，最後まで笑顔でいてほしい．ので，株式会社ミクシィでインターンしてきた&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://alpha.mixi.co.jp/entry/2013/11918/">SDN インターン&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>