<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>elasticsearch on hurutoriya</title><link>https://shunyaueta.com/tags/elasticsearch/</link><description>Recent content in elasticsearch on hurutoriya</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 13 Dec 2022 22:18:45 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml"/><item><title>Elasticsearch の Go client で有名な olivere/elastic がES8 以降はサポートしないので、利用者は公式クライアントに移行しよう</title><link>https://shunyaueta.com/posts/2022-12-13-2218/</link><pubDate>Tue, 13 Dec 2022 22:18:45 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-12-13-2218/</guid><description>Elasticsearch を Go lang から利用できるクライアントライブラリで、非公式なパッケージではolivere/elasticがあります。 このパッケージはかなりの人気を誇っており、なんと 2012 年から開発され現状 Elasticsearch v1.0 からすべてのバージョンをサポートしています。 素晴らしい OSS ですね。
ES8 をサポートせずにメンテナンスモードに入る経緯 ES8 以降のサポートをどうするか決めあぐねている現状の経緯はこちらの issue に olivere さんから直接説明してくれています。 直接 olivere さんの意見を読んだほうが良いので、引用のみしておきます。
Announcement: Future directions (updated on 2022-07-22) · Issue #1533 · olivere/elastic
Finally a word about this repository. I&amp;rsquo;m sorry about all the people still waiting for an Elastic v8 version, waiting for their PRs to be merged and issues to be answered. I had a hard time personally over the last two years, and when I had to decide whether working on Elastic or focusing on my health is the top priority, I always decide for the latter.</description></item><item><title>Elasticsearch 8.4 から利用可能な従来の検索機能と近似近傍探索を組み合わせたハイブリッド検索を試す</title><link>https://shunyaueta.com/posts/2022-10-29-2337/</link><pubDate>Sat, 29 Oct 2022 23:37:35 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-10-29-2337/</guid><description>表題の通り、Elasticsearch 8.4 から待望の近似近傍探索と従来の検索を組み合わたハイブリッド検索が可能になったらしいので、試してみました。
Elascticsearch 8 で導入された近似近傍探索について Elasticsearch 公式の記事1がわかりやすく近似近傍探索について語られています。 また、日本語では@pakio さんの紹介記事2も非常にわかりやすいので、そちらも御覧ください。
嬉しいけど物足りない点 公式の資料3や@pakio さんの資料でも触れられていますが、
You can’t currently use the Query DSL to filter documents for an approximate kNN search. If you need to filter the documents, consider using exact kNN instead. Elasticsearch の Query DSL との併用不可というのが物足りない点でした。
端的に説明すると Elasticsearch 8 で利用可能になった近似近傍探索は、あくまでベクトル間のみの近似近傍探索のみできるのであって、従来の Elasticsearch の検索機能(term や filter)と近似近傍探索を組み合わせて検索できないということです。
Vespa の開発者の Jo さんも同様の点4について触れていました。
The most surprising part of the announcement is that they won&amp;rsquo;t allow combining the nearest neighbor search with standard query terms and filters.</description></item><item><title>Elasticsearchの近似近傍探索を使って、ドラえもんのひみつ道具検索エンジンを作ってみた</title><link>https://shunyaueta.com/posts/2022-10-23-2344/</link><pubDate>Sun, 23 Oct 2022 23:44:13 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-10-23-2344/</guid><description>Elasticsearch 8 系から使用可能になった近似近傍探索1を使って、ドラえもんのひみつ道具の自然言語検索ができる検索エンジンを作ってみた。
デモ動画のように、検索したいひみつ道具を説明する文章することで近しいひみつ道具が検索されます。
コードは GitHub に公開してあるので、興味のある方は手元で、動かして遊ぶことが出来ます。 poetry と Docker さえあれば動くようになっています。
hurutoriya/doraemon-himitsu-dogu-search: Doraemon Himitsu Dogu Japanese semantic search based on Elascticsearch ANN
システムの概要図はこんな感じ
所感 ドラえもんのひみつ道具のデータセットを今回１から作ったが、パースと前処理がめんどくさくてここが一番手間がかかった。が、工夫しないと出来なかったので、一番楽しいところでもあった。 文章の特徴抽出は、sonoisa/sentence-bert-base-ja-mean-tokens-v2 · Hugging Faceを使わせていただき、驚くほど簡単に実現できた。 実際はもっと精度を高めるには、fine tune などがいいのだろうが、システム側を作ることに注力したかったので今回は割愛 デモアプリの構築は streamlit を使って 20m くらいで作れたので、相変わらず便利すぎて愛用している。今回の検索エンジンは CLI から実行もできるが、こうやってデモアプリがあったほうがそれっぽくて気持ちいい。 インデキシング時にトーカナイザーのことなど全く考えずに特徴ベクトルだけインデキシングして、それで検索が成り立つというのは新鮮。閾値設定しなければゼロヒット問題にも直面しないので、できることの幅は広がりそう。 Elasticsearch の近似近傍探索は、今回ベクトル同士の近似近傍探索しかやっていないが、それもインデキシング、クエリ部分は公式ドキュメントを見れば事足りたので変にハマることはなかった。 クエリ部分はこれだけで書けた。
query = { &amp;#34;knn&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;vector&amp;#34;, &amp;#34;query_vector&amp;#34;: sentence_embeddings[0], &amp;#34;k&amp;#34;: 10, &amp;#34;num_candidates&amp;#34;: 100, }, &amp;#34;fields&amp;#34;: [&amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;], } result = es.search(index=INDEX_NAME, body=query) ぶっちゃけて言えば、この規模で近似近傍探索のみやるなら検索エンジンを使わずとも Python 内でインメモリ探索して完結して動くと思うので Elasticsearch を使う意義を考えざるをえないが、自分が触ってみたかったのでやってみた。 そのおかげで色々学べたことが多いので、手を動かしてよかった。</description></item></channel></rss>