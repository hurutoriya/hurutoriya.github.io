<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>apachebeam on hurutoriya</title><link>https://shunyaueta.com/tags/apachebeam/</link><description>Recent content in apachebeam on hurutoriya</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 06 Nov 2022 22:52:09 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/apachebeam/index.xml" rel="self" type="application/rss+xml"/><item><title> Beam summit 2022 雑感</title><link>https://shunyaueta.com/posts/2022-11-06-2252/</link><pubDate>Sun, 06 Nov 2022 22:52:09 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-11-06-2252/</guid><description>毎年開催される Apache Beam の会議、Beam Summit 2022 で講演資料が公開されていたので、気になる資料を読んだ。
以下に面白かった記事の備忘録を放流しておく
Google&amp;rsquo;s investment on Beam, and internal use of Beam at Google Google 内部で現在フルタイム Beam 開発者は 25 人! (多いな) Go SDK 提供開始がめでたい 現在は Java, Python, Go の３つの言語をサポート 機械学習の推論を Beam の特性を生かしてスケーラブルに実行可能な RunInference も提供できた! TypeScript SDK も提供予定! contribution している方も募集中 https://github.com/apache/beam/tree/master/sdks/typescript Beam Playground を使えば、Beam がより効果的に学べるよ https://play.beam.apache.org/ チケット管理では Jira をやめて GitHub Issues に移行したよ(最近の Apache Project の潮流な気がする。Lucene も移行していた) Beam @TwitterEvaluation, Adoption, Migration and future. 毎日実行される data pipeline の総数 5 万 200PB 超えのボリュームをデータ処理 7 兆のイベント数 Beam の魅力 batch, streaming の両者を扱うことができる、かつモダンな実行フレームワーク ランナーの柔軟性 複数のクラウド環境で実行可能 複数のプログラミング言語で動く 優れた OSS コミュニティ RunInference: Machine Learning Inferences in Beam Apache Beam 2.</description></item><item><title>Apache Beam 2.40 で導入された scikit-lean, Pytorch の効率的な推論が可能になる RunInference API を試してみる</title><link>https://shunyaueta.com/posts/2022-08-18-1938/</link><pubDate>Thu, 18 Aug 2022 19:38:29 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-08-18-1938/</guid><description>2022-07-21 に Google Cloud が Cloud DataFlow の新機能として、DataFlow ML という新機能を発表した。1
Dataflow ML - Speaking of ML transforms, Dataflow now has added out of the box support for running PyTorch and scikit-learn models directly within the pipeline. The new RunInference transform enables simplicity by allowing models to be used in production pipelines with very little code. These features are in addition to Dataflow&amp;rsquo;s existing ML capabilities such as GPU support and the pre and post processing system for ML training, either directly or via frameworks such as Tensorflow Extended (TFX).</description></item><item><title>PythonでApache beam 入門</title><link>https://shunyaueta.com/posts/2020-12-26/</link><pubDate>Sat, 26 Dec 2020 00:41:30 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-12-26/</guid><description>TensorFlowの勉強をしていたら、Apache beam を前処理に採用していたケースがあり、興味を持ったので深堀りしてみます。
興味が湧いたモチベーションとしては、
データ量が増加しても前処理部分を難なくスケールできそう(前処理部分をスケールさせて高速に実験を回したい、並列化などはすべて良い感じにbeamに任せれそう バッチとストリーミングの両者に対応可能なので、柔軟な機械学習の推論サービスが提供できるのでは? (GCPの参考資料 Data preprocessing for machine learning: options and recommendations) Apache beam を触りつつ分散データ処理を学びたい https://github.com/jhuangtw/xg2xg#services
を見てみるとGoogle 内部のFlume という並列データパイプライン技術がApache beam として公開されているみたいです。
Apache beam について端的に説明すると
Apache beam は3つの考えを基礎にしています。
Unified ストリーミング、バッチの両者のケースに一つのプログラミングモデルで対応可能な統一性 Portable 実行パイプラインが複数の実行環境で実行可能な可搬性 Extensible 新しいSDK、IO Connectorsや変換ライブラリなどをを書いて共有することができる拡張性 Java, Python, Go やScalaを使ってBeam Model を作成して任意のruntime で実行する流れです。
自分はPythonが一眼手軽に書けるのでこの記事ではPythonで紹介していきます。
Version 2.14.0 からPython 3がサポートされたのは非常にありがたいですね。それまではPython 2のみをサポートしており、その影響で技術選定時に採用しづらかったのでは無いのでしょうか?
Spotify が作成しているApach BeamとDataflowのScala APIであるscioが開発されており、そちらも気になっています。
https://github.com/spotify/scio https://engineering.atspotify.com/2017/10/16/big-data-processing-at-spotify-the-road-to-scio-part-1/ では、まずは実際に動かしながら学んでみようということで
https://beam.apache.org/get-started/try-apache-beam/
を参考にApache Beam をPython SDKで試してみます
COLABで実行を試せるので便利ですね
ですが、Python2で実行されるように設定されているのでPython3で実行してみました。
実行したcolab のコードを見ていきます。
環境準備 apache-beam のinstallとGCSからApache beamで処理を行うテキストファイルをダウンロードします。</description></item></channel></rss>