<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>search on hurutoriya</title><link>https://shunyaueta.com/tags/search/</link><description>Recent content in search on hurutoriya</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 29 Apr 2023 00:30:07 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/search/index.xml" rel="self" type="application/rss+xml"/><item><title>Twitter の検索システム、Earilybirdの論文を読む</title><link>https://shunyaueta.com/posts/2023-04-29-0030/</link><pubDate>Sat, 29 Apr 2023 00:30:07 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-04-29-0030/</guid><description>前回の記事の続き1で、Twitter の検索システムシリーズ第 2 弾です。
Earlybird とは? Twitter の検索システムであり、 Apache Lucene をベースにした、リアルタイム検索システム。 論文はここで、 Blog 記事は The Engineering Behind Twitter’s New Search Experienceは 2011 年に公開されている。
TODO: 論文に書かれず、Blog 記事にのみ書かれている内容もあったので読んで追記しておく
Web 検索はある程度成熟してきた分野だが、SNS のリアルタイム検索はまだ 2011 年当時いまだ未成熟で未開拓な分野 Twitter で新たに開発したのが、 Earlybird と呼ばれるリアルタイム検索に特化した検索エンジン Lucene の NRT 機能が導入され始めたのが、2011 年の終わり頃なので、このときには恐らく GA ではないから、恐らく独自に作成した? Changing Bits: Near-real-time readers with Lucene&amp;rsquo;s SearcherManager and NRTManager この論文の貢献点 Web 検索とのインデックス構造の違い ロックフリーの single-writer, multi reader の 並行性モデル 1 億人の Active User, 毎日 2.5 億件のツイート query latency 50ms, 10s 以内に検索可能になる リアルタイム検索の考慮すべき事項 低いレイテンシー、高速なクエリ評価 データ挿入の即時性(web 検索はそこまでの即時性は必要ない) 並行した read, write freshness signal(いつ作られたかというシグナルがとても重要) 現在 web でも有用な signal になっているが、当時はそこまで重要ではなかった 関連事項 分散検索アーキテクチャ 面白そうな論文がめっちゃあるけど、紹介しきれないので割愛。 クエリ評価 2 stage 1st: cheap BM25, PageRank, quality score など 2nd: expensive 1st の結果を候補にして、(基本的には機械学習による)Re-Ranking その他 多種多様なドメインを扱うのは大変(画像、動画、ニュース、単なるツイートなど) 例えば news はそのニュースの内容を知った上で ranking する必要があるし、ドメインごとに特性が異なる。それらを統合していくのも課題点 Earlybird 概要 3 signals 統計的シグナル: 何文字か、いつ投稿されたかなど、インデックスされた瞬間に把握している情報 反響シグナル (Resonance signal): リツイート数 Searcher の情報 score_sort と created_sort が毎回計算されて Blender(BFF)に返す この時、searcher のローカルソーシャルグラフに基づいて score を計算している。これがソーシャル検索のキモ Java で作った理由 Lucene を使いたい Twitter の Java 文化に合う Java の並行処理は理解しやすい 結果的に C/C++ に匹敵するパフォーマンスを出せている(と考えている) ソーシャル検索の宿命として、常に検索されるし常に indexing され続けている つまり圧倒的な並行処理を実現する必要がある multiple index segment(12 個) 各々のセグメントは、大体 840 万のツイートを格納 一つのセグメントが write され、その他のセグメントは read only になるように設計されている(模様、コード読もう) active index: writable non-active index: read-only 32bit integer のポスティングリストとして設計 24bit: document id 8bit: term position(140 文字なので 8bit で十分) Earlybird は高速なインデキシング処理のために、インデックスを圧縮せずそのまま保存している。 感想 これでだいたい概要をつかめたので、次は GitHub で公開されているコード2を読んでみます。</description></item><item><title>Twitter の検索システムを学ぶ - 概要編</title><link>https://shunyaueta.com/posts/2023-04-17-2252/</link><pubDate>Mon, 17 Apr 2023 22:52:30 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-04-17-2252/</guid><description>Twitter&amp;rsquo;s Recommendation Algorithm Elon Mask が以前から計画していた、Twitter の検索&amp;amp;推薦関連のシステムが GitHub で公開された。 良い機会なので、いままでの Twitter 検索の記事をまとめつつ、コードも読んでみます。
単発の記事でまとめようとするとドデカ記事になってしまうので、一連の記事を通じて Twitter の検索システムを学んでいきたいと思っており、以下の構成で進めていく。
概要編 論文解説 コードを読んでみた Twitter&amp;rsquo;s New Search Architecture 2010-10-06 公開
この時期に新しいアーキテクチャに移行 MySQL による検索から Lucene による検索へ移行 要件 1000 tweets/sec 12000 queries/sec 1 billion queries / day 新しいアーキテクチャで、一桁大きい規模のトラフィックに耐えられることを期待している Tweet はリアルタイムなので、もちろん検索システムもリアルタイム性が非常に重要 indexing latency も非常に重要 tweet された 10 秒後には検索可能になってほしい indexer 自体のレイテンシは 1 秒以下である必要がある(indexer 自体はデータパイプランの一部でしかないため) Lucene を改造 Lucene は素晴らしいが、リアルタイム検索を行うにはまだ足りない点がある メモリ内のデータ構造を書き直す。 ポスティングリストを特に書き直す。 ガーベージコレクションの改善 lock free のデータ構造とアルゴリズム 逆順に走査可能なポスティングリスト 効率的なアーリークエリリターン 移行後 システム全体の 5%しか利用していないが、50 倍近いツイートをインデックスできている。 移行したことでユーザーに利点は果たしてあるのか?</description></item><item><title>Web 検索とデータマイニングのトップカンファレンス WSDM2023 で気になった研究</title><link>https://shunyaueta.com/posts/2023-03-18-2357/</link><pubDate>Sat, 18 Mar 2023 23:57:07 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-03-18-2357/</guid><description>去年1に引き続き WSDM2023 の論文が公開されたので、ざっと眺めて気になったものを書き留めておく。
Home | WSDM'23 - The 16th ACM International WSDM Conference
Keynote Maarten de Rijke University of Amsterdam, Date: Wednesday, March 1, 2023 Title: Beyond-Accuracy Goals, Again
Tutorials Trustworthy Algorithmic Ranking Systems https://github.com/socialcomplab/Trustworthy-ARS-Tutorial-WSDM22 Workshops WSDM 2023 Crowd Science Workshop クラウドソーシングをテーマにしたワークショップ Accepted Papers Active Ensemble Learning for Knowledge Graph Error Detection Junnan Dong (The Hong Kong Polytechnic University); Qinggang Zhang (The Hong Kong Polytechnic University); Xiao Huang (The Hong Kong Polytechnic University)*; Qiaoyu Tan (Texas A&amp;amp;M University); Daochen Zha (Rice University); ZHAO ZIHAO (Hong Kong Polytechnic University) Revisiting Code Search in a Two-Stage Paradigm Fan Hu (Renmin University of China)*; Yanlin Wang (Sun Yat-sen University); Lun Du (Microsoft Research); Xirong Li (Renmin University of China); Hongyu Zhang (University of Newcastle); Shi Han (Microsoft Research); Dongmei Zhang (Microsoft Research Asia) Visual Matching Is Enough for Scene Text Retrieval Lilong Wen (zhejiang university)*; Yingrong Wang (Zhejiang University); Dongxiang Zhang (Zhejiang University); Gang Chen (Zhejiang University) Beyond Hard Negatives in Product Search: Semantic Matching using One-Class Classification (SMOCC) Arindam Bhattacharya (Amazon)*; Ankit Gandhi (Amazon); Vijay Huddar (Amazon); Ankith M S (Amazon); Aayush Moroney (Amazon); Atul Saroop (Amazon); Rahul Bhagat () Industry Day Simulating Humans at Scale to Evaluate Voice Interfaces for TVs: the Round-Trip System at Comcast Learning to Infer Product Attribute Values From Descriptive Texts and Images, Pablo Montalvo and Aghiles Salah (Rakuten Group, Inc.</description></item><item><title>初心者だけど Apache Lucene に貢献したい場合におすすめのチケットラベル</title><link>https://shunyaueta.com/posts/2023-03-11-1727/</link><pubDate>Sat, 11 Mar 2023 17:27:09 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-03-11-1727/</guid><description>2023 年の目標で、Apache Lucene へのコントリビューションを掲げましたが、既存の GitHub チケットを探しても初心者向けのチケットタグ good first issue にはチケットが紐付けられていなかったので、メーリングリストに質問したら、Lucene PMC の Michael Sokolov さんがこのタグが初心者にはおすすめだよと返信をいただけたので、ここに残しておきます。
メーリングリストに以下の質問をしたら、
Hello Lucene users.
Last time I checked good first issue in GitHub issues to start a contribution of Lucene. https://github.com/apache/lucene/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22
But currently no issues with this label. I don&amp;rsquo;t know the current operation of this label, but in the future, Is this label will utilized? Because good first issues label issues are a very nice starting point for beginner contributors.</description></item><item><title>ニュースレター近況</title><link>https://shunyaueta.com/posts/2023-02-17-0005/</link><pubDate>Fri, 17 Feb 2023 00:05:59 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-02-17-0005/</guid><description>記事ストックの改善 以前は、Pocket→Obisdian→ 執筆という流れだったが、 ストックされている昔の記事を Pocket からサルベージする際に、UI, UX が非常にストレスフルかつ時間を吸い取られるのでやめた。
Pocket は以下の点で辛かった。
リスト形式は無く、グリッドしか用意されていない 20 件?ごとに疑似ページネーションが走ってめんどくさい page が 10 件以上超えると Pocket がフリーズする 最初は、Pocket 追加時にタグnl (NewsLetter の nl)を付与してみることにしたが、Pocket でニュースレターに関係無い記事を保存する際に毎回タグを付与するかいなかという考えがめんどくさくなったので(1 日で諦めた)、Obsidian の特定ファイルに毎回手動でコピペするようにした。
記事一件あたりの追加時間が 5 秒ほど増えるが、回り回って記事を Obisidian にまとめる時間が一番めんどくさい作業なので、これにしたおかげでストレス無く完全に Obsidian で完結してニュースレター作業に取り組めるようになった。
購読者 100 人突破 また、 17 回目のニュースレターを一般公開して、Twitter でリンクを告知するとメール購読者が 100 人を突破した。
最新号をメール購読者のみの先行配信するのは、賛否両論あると思うが、購読者が増える要素になっているのではなかろうか?
本来は Blog で公開していたときと同じく、すべての記事を全公開で良いのだが、Twitter がダメになった時自体に備えてメール購読者の数も増えてほしいので購読者数が増えるようなインセンティブ設計にしてみた。
これから 忙しいとニュースレター書くのをおろそかになってしまったりするが、書き始めると意外と楽しいし気分転換にもなっていることが多い。
そのため一回の配信の量にはあまりこだわらず 2 週間に 1 号程度の配信頻度を保っていきたい。 なぜなら最低でも 2 週間に 1 時間程度も記事を読む時間が確保できないのは、それはそれで心の余暇が完全に喪失しており問題だからだ。
時間計測アプリを toggl から session へと乗り換えてみたのも個人的にはすごく効果的で、集中して短時間で書き切れるようになったと思う。</description></item><item><title>Search Engineering Newsletter を substack へ移行します</title><link>https://shunyaueta.com/posts/2022-12-04-0003/</link><pubDate>Sun, 04 Dec 2022 00:03:06 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-12-04-0003/</guid><description>Search Engineering Newsletter vol.04 では、Revue から自分の Blog での配信に移りました。 その時の経緯としては
だが、自分のサイトは公開しているので、誰でも見れる。 そのためリーチする層に差が出るわけでもなかったかなと今更ながら気づいた。
でしたが、
実際問題、自前の Blog でもニュースレターでも誰でも見れる事自体は変わらないが、誰に届くかは Blog ではなくニュースレターの方が幅広い読者に見てもらえるのでは? ニュースレター専用のメディアにすることで、ニュースレター自体がどれくらい需要があるかを切り分けて追跡しやすい 1 最近は更新を告知するチャンネルの Twitter が将来的にどうなるかわからない状態2。そしてその流入量は決して少なくない。 また、自分が書いた記事を届ける手段をプラットフォームに依存しない形式で保持して、読者とつながっておくのは改めて重要性を感じた そのため、substack でニュースレターを再開してみることにしました。
substack で期待していることは、読者とのコミュニケーションが取りやすくなるのでニュースレターを通じて、ピックアップした記事の議論や感想などを交えるようになると面白そうだなと思っています。
配信方法を都度変えて、読者の方にはお手間をおかけしますが、配信しているニュースレターを面白いと感じていただけた方は substack での購読を以下からよろしくおねがいします。 ニュースレターの配信もこれ以降は substack のみで行う予定です。
https://searchengineeringnewsletter.substack.com/
過去記事もこの記事以外は Blog からは削除して、substack に移行してみます。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
既存の購読者の方がいた revue に戻ろうかと思ったのですが、Briefing: Twitter Will Shut Down Newsletter Product Revue By Year End — The Information という記事をみてやめた。実際に購読しているニュースレターが revue をやめまくっている(今回の Twiter 買収で Revue が停止するという情報がでまわっているため。) いまのイーロン・マスクの動きを見ていると選択と集中の時期で、revue を維持するという未来が予想できない。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>情報検索・検索技術 Advent Calendar 2022 を開催します</title><link>https://shunyaueta.com/posts/2022-11-05-1147/</link><pubDate>Sat, 05 Nov 2022 11:47:43 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-11-05-1147/</guid><description>2021 年に引き続き、2022 年も情報検索・検索技術 Advent Calendar を作ってみました。
情報検索・検索技術 Advent Calendar 2022 - Adventar
kivantium さんの 創作+機械学習 Advent Calendar 2022 を開催します - kivantium 活動日記 の記事がいいなと思ったので、僕も自分の Blog で告知しておきます。
2021 年にアドベントカレンダーを作成したきっかけとしては、そもそもブログ記事の執筆が自分は好き他人が書いた記事を読むのは楽しい。 アドベントカレンダーの文化はそういう自分の嗜好にぴったりなので、自分の好きな検索技術領域がまだ作られていない! 作らねば! というのがモチベーションでした。
実際のところ、検索技術に携わってはいるが、Blog 記事をあまり書かない人もアドベントカレンダー起因で記事を書くきっかけになっているじゃないかなと思っています。
現時点で 登録数 12/25人となっています。ご登録頂いた方々ありがとうございます! みんなでワイワイ投稿して盛り上げていきましょう。</description></item><item><title>Elasticsearch 8.4 から利用可能な従来の検索機能と近似近傍探索を組み合わせたハイブリッド検索を試す</title><link>https://shunyaueta.com/posts/2022-10-29-2337/</link><pubDate>Sat, 29 Oct 2022 23:37:35 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-10-29-2337/</guid><description>表題の通り、Elasticsearch 8.4 から待望の近似近傍探索と従来の検索を組み合わたハイブリッド検索が可能になったらしいので、試してみました。
Elascticsearch 8 で導入された近似近傍探索について Elasticsearch 公式の記事1がわかりやすく近似近傍探索について語られています。 また、日本語では@pakio さんの紹介記事2も非常にわかりやすいので、そちらも御覧ください。
嬉しいけど物足りない点 公式の資料3や@pakio さんの資料でも触れられていますが、
You can’t currently use the Query DSL to filter documents for an approximate kNN search. If you need to filter the documents, consider using exact kNN instead. Elasticsearch の Query DSL との併用不可というのが物足りない点でした。
端的に説明すると Elasticsearch 8 で利用可能になった近似近傍探索は、あくまでベクトル間のみの近似近傍探索のみできるのであって、従来の Elasticsearch の検索機能(term や filter)と近似近傍探索を組み合わせて検索できないということです。
Vespa の開発者の Jo さんも同様の点4について触れていました。
The most surprising part of the announcement is that they won&amp;rsquo;t allow combining the nearest neighbor search with standard query terms and filters.</description></item><item><title>Elasticsearchの近似近傍探索を使って、ドラえもんのひみつ道具検索エンジンを作ってみた</title><link>https://shunyaueta.com/posts/2022-10-23-2344/</link><pubDate>Sun, 23 Oct 2022 23:44:13 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-10-23-2344/</guid><description>Elasticsearch 8 系から使用可能になった近似近傍探索1を使って、ドラえもんのひみつ道具の自然言語検索ができる検索エンジンを作ってみた。
デモ動画のように、検索したいひみつ道具を説明する文章することで近しいひみつ道具が検索されます。
コードは GitHub に公開してあるので、興味のある方は手元で、動かして遊ぶことが出来ます。 poetry と Docker さえあれば動くようになっています。
hurutoriya/doraemon-himitsu-dogu-search: Doraemon Himitsu Dogu Japanese semantic search based on Elascticsearch ANN
システムの概要図はこんな感じ
所感 ドラえもんのひみつ道具のデータセットを今回１から作ったが、パースと前処理がめんどくさくてここが一番手間がかかった。が、工夫しないと出来なかったので、一番楽しいところでもあった。 文章の特徴抽出は、sonoisa/sentence-bert-base-ja-mean-tokens-v2 · Hugging Faceを使わせていただき、驚くほど簡単に実現できた。 実際はもっと精度を高めるには、fine tune などがいいのだろうが、システム側を作ることに注力したかったので今回は割愛 デモアプリの構築は streamlit を使って 20m くらいで作れたので、相変わらず便利すぎて愛用している。今回の検索エンジンは CLI から実行もできるが、こうやってデモアプリがあったほうがそれっぽくて気持ちいい。 インデキシング時にトーカナイザーのことなど全く考えずに特徴ベクトルだけインデキシングして、それで検索が成り立つというのは新鮮。閾値設定しなければゼロヒット問題にも直面しないので、できることの幅は広がりそう。 Elasticsearch の近似近傍探索は、今回ベクトル同士の近似近傍探索しかやっていないが、それもインデキシング、クエリ部分は公式ドキュメントを見れば事足りたので変にハマることはなかった。 クエリ部分はこれだけで書けた。
query = { &amp;#34;knn&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;vector&amp;#34;, &amp;#34;query_vector&amp;#34;: sentence_embeddings[0], &amp;#34;k&amp;#34;: 10, &amp;#34;num_candidates&amp;#34;: 100, }, &amp;#34;fields&amp;#34;: [&amp;#34;name&amp;#34;, &amp;#34;description&amp;#34;], } result = es.search(index=INDEX_NAME, body=query) ぶっちゃけて言えば、この規模で近似近傍探索のみやるなら検索エンジンを使わずとも Python 内でインメモリ探索して完結して動くと思うので Elasticsearch を使う意義を考えざるをえないが、自分が触ってみたかったのでやってみた。 そのおかげで色々学べたことが多いので、手を動かしてよかった。</description></item><item><title>デスクトップのGoogle 検索の検索フォームUIがかなり変化していた</title><link>https://shunyaueta.com/posts/2022-03-04/</link><pubDate>Fri, 04 Mar 2022 00:03:08 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-03-04/</guid><description>現在 AB テスト中なのかもしれないが、かなり変化している。
以前は QAC(Query Auto Completition) のみ、検索フォームにフォーカスがあたった時に表示していた記憶がある。 だが、現在は一度キーワードを検索して検索結果画面に遷移した後に、検索フォームにフォーカスすると
の画面のように、Query Suggest や Knowledge graph の結果をキーワードフォームに表示するようになった。
確かに、キーワードを再度検索する際に上記のコンポーネントを入れるのは試してみるのは良いのかもしれない。
特にデスクトップの検索ならハコもかなり余っているのでまだ有効活用できる余地はありそう。
でも、検索のユーザーインターフェースを紹介する書籍ではアンチパターンなのでどうなんだろうか。
情報検索のためのユーザインタフェース
1.1: KEEPING THE INTERFACE SIMPLE https://searchuserinterfaces.com/book/sui_ch1_design.html
Figure 1.1: Search results listings from Infoseek in 1997 (left) and Google in 2007 (right), courtesy Jan Pedersen. 画像は上記から引用
と思いつつも、今の Google 検索のインターフェイスも
書籍の Google 検索と見比べてもかなりリッチになっているので、書籍が執筆された 2011 年からすると時代は変わっている感も否めない。
スクリーンショットが取られた 2007 年から 15 年以上も経過してますしね
@joho_hideo さんから面白いコメントがあったので追記しました。
@joho_hideo 特別事例ですが「COVID-19」の検索結果はよく設計されていると思います。 https://twitter.com/joho_hideo/status/1499549278012055552
確かに、これぞまさに情報検索の真髄ですね。 ダッシュボード的な情報を表示している
情報検索のためのユーザインタフェース も現状の状況も踏まえた改訂版が出たら面白そう？</description></item><item><title>Amazon の製品検索で使われるロバストなキャッシュ手法の論文「ROSE: Robust Caches for Amazon Product Search」</title><link>https://shunyaueta.com/posts/2022-03-03/</link><pubDate>Thu, 03 Mar 2022 09:35:29 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-03-03/</guid><description>Web 検索とデータマイニングのトップカンファレンス WSDM2022 のワークショップで The First International Workshop on INTERACTIVE AND SCALABLE INFORMATION RETRIEVAL METHODS FOR ECOMMERCE (ISIR-ecom) が先日開催された。
テーマは e コマース上での検索において
検索システムのスケーラビリティ どうやって適合性(Relevancy)をシステムで改善したか システムの改善 についてをテーマにした検索エンジニアなら垂涎もののワークショップとなっている。
同様の検索システムや実応用に注目したワークショップでは、以下のようなワークショップがある。
SIGIR Workshop On eCommerce 2017 年から毎年開催。累計 5 回開催 International Workshop on Industrial Recommendation Systems 2020 年から開催。累計二回 歴史としては、 SIGIR ecom が長く、これだけの期間継続開催してくれているのはありがたい限り。
機械学習系の国際会議でも手法ではなく、どう現実世界に適用したかに注目したワークショップが益々誕生しており非常に良い流れ。
ACCEPTED PAPERS は 5 本あり、
Amazon: 2 eBay: 1 The Home depot: 2 と企業関係者による論文が 100%となっている。
https://github.com/ISIR-eCom/ISIR-eCom.github.io/tree/main/papers 最後の PDF 番号が 9 なので、最低でも 9 本の投稿はあった模様。</description></item><item><title>Web 検索とデータマイニングのトップカンファレンス WSDM2022 で気になった研究</title><link>https://shunyaueta.com/posts/2022-03-01/</link><pubDate>Tue, 01 Mar 2022 20:47:53 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-03-01/</guid><description>WSDM は web 検索とデータマイニングのトップカンファレンスの一つです。検索好きなら見てて楽しい論文がたくさん公開されており、毎年採択された研究を楽しみに見ています。
今回 WSDM2022 が 2022/02/21 - 2022/02/25 に開催されたので気になった発表をメモ。
今までこういう気になったトピックなどは Joplin にメモして公開していなかったが、公開しても差し支えはないなと思ったので Blog 記事として公開していってみる。
自分の興味関心トピックは今は基本的に検索関連と機械学習の実践事例なので、それに沿った選出になっています。
Industry Day https://www.wsdm-conference.org/2022/industry-day-schedule/
Challenges in Data Production for AI with Human-in-the-Loop, Dmitry Ustalov (Toloka) Scalable Attribute Extraction at Instacart, Shih-Ting Lin (Instacart) Graph Neural Networks for the Global Economy with Microsoft DeepGraph, Jaewon Yang, Alex Samylkin, Baoxu Shi (LinkedIn, Microsoft) Near real time AI personalization for notifications at LinkedIn, Ajith Muralidharan (LinkedIn) Invited Talk: Rethink e-Commerce Search Workshops https://www.</description></item><item><title>Search Engineering Newsletter vol.00</title><link>https://shunyaueta.com/posts/2022-01-16/</link><pubDate>Sun, 16 Jan 2022 00:00:37 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-01-16/</guid><description>検索技術とその関連領域を取り扱うニュースレターを不定期配信してみることにします。
2022 年から心機一転として、情報発信を今まで Twitter メインでやっていましたが、ニュースレターで行っていこうと思っています。 以下の Revue のリンクから登録が可能です。
Search Engineering Newsletter By hurutoriya
扱うトピックとしては、検索エンジンと情報検索の周辺領域です。 経緯としては、自分の職域である情報は積極的に収集しており、どうせなら発信したいなと考えて Twiter や、機械学習エンジニア時代には Revue を使って MLOps 領域に特化してニュースレター配信を試しにやってみた(覚えているかたもいるかも?)ことがありましたが、結局 Twitter で配信すれば同じではと考えてしまい、なんだかんだ継続できませんでした。
ですが、最近は Twitter での情報取得から抜け出して、一息ついた状態で情報収集を行うようになりたいなと思うなかで、改めて Twitter の発信だけではなく、ニュースレターのように頻度は不定期だが高品質な情報が一箇所にまとまって届けることができたら面白いなと考えました。(またニュースレター形式だと Twitter では届かない層にも届くんじゃないのかなと)
現在は自分は検索エンジニアとして働いており、検索技術と情報検索の情報を積極的に収集しています。そのなかで自分が当該領域で注目したニュースレターを不定期に配信できればなと思ってニュースレターを再開してみました。 検索領域に関連する気になった記事や自分の Blog 記事の執筆などをここで紹介していきます。
不定期配信ですが、興味を持っていただけたらぜひ購読をお願いします。</description></item><item><title>Amazon検索ランキングの奥深さ at MLconf SF 2016</title><link>https://shunyaueta.com/posts/2021-12-26/</link><pubDate>Sun, 26 Dec 2021 22:52:06 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-12-26/</guid><description>1 日遅れてしまいましたが、情報検索・検索技術 Advent Calendar 2021 25 日目の記事です。
ついにアドベントカレンダー最終日を迎えました! 今年はまだ検索領域のアドベントカレンダーが作られていないからということで、勢いで情報検索・検索技術 Advent Calendar 2021を作りましたが、多くの方に投稿に協力していただきありがとうございました。
社内勉強会の発表でネタを探しており、2016 年と少し昔の情報ですが、Amazon の製品検索において、どのようにランキングを行っているかの公演動画が非常に面白かったので、勉強がてら残したメモを記事として公開します。
今回の口頭発表は MLconf という開発者会議(非学会・非アカデミック)で発表されています。 自分が知る限り、MLconf は機械学習黎明期から高品質な発表が継続されて発信されており、非常に素晴らしいカンファレンスの一つ。 国際会議には投稿されていないが、実応用の観点からしてとても学びの多い発表がとても多いです。 機械学習の応用を考えている場合、世界の最先端事例を知ることができるので非常におすすめです。
Referemces Sorokina, D., &amp;amp; Cantu-Paz, E. (2016, July). Amazon search: The joy of ranking products. In Proceedings of the 39th International ACM SIGIR conference on Research and Development in Information Retrieval (pp. 459-460).
Amazon Search: The joy of ranking products in amazon science Youtube メモ 自分の私的な意見は NOTE: で書いておきます。</description></item><item><title>Amazonがeコマース検索を Lucene により、どうスケールさせているか at Berlin Buzzwords 2019</title><link>https://shunyaueta.com/posts/2021-11-26/</link><pubDate>Fri, 26 Nov 2021 20:59:21 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-11-26/</guid><description>情報検索・検索技術 Advent Calendar 2021 1 日目の記事です。 早めに書き終えたので、カレンダー登録日の 2021/12/01 よりもはやめですが、記事を公開してしまいます。
Berlin Buzzwords はドイツで毎年開催されている OSS を利用した検索、データ処理、データベースに焦点をあてたカンファレンスです。
検索関係のシステムに携わっている場合、毎年面白い内容が目白押しなのでぜひとも見てほしい。
今回は Berlin Buzzwords 2019 で発表された「Amazon では Lucene をどう活用して e コマース検索をスケールさせているか」の講演動画を社内勉強会で紹介するために視聴したので、そのメモを公開する。
E-Commerce search at scale on Apache Lucene YouTube Web page PDF 自分の所感などを切り分けるため、自分の意見は IMO ではじめた文にして、メモっています。
Overview クエリの p999 latency に対して非常に厳しい制限を行っている IMO このクエリの p999 latency 定義は、Lucene+(おそらく内製で今も開発している、response を返すための Lucene server?)が返す検索のレスポンスを指していると思われる p99.9 latency を SLA として、監視しているのはたしかにとてもシビアな基準だと感じる。 Amazon の query rate はめちゃくちゃピーキー (daily, weekly, yearly) Why Lucene? Lucene は成熟しており、豊富な検索エンジンの機能が揃っている 情熱を持ったコミュニティが存在している Uber, Airbnb, Linkedin 全部 Lucene を使っている maxscore scoring , Weak AND, Lucene 8.</description></item><item><title>クエリ分類(Query Classification) について社内の勉強会で話してきた</title><link>https://shunyaueta.com/posts/2021-10-09/</link><pubDate>Sat, 09 Oct 2021 00:42:40 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-10-09/</guid><description>今年の 10 月から、新しく入社した同僚とともに、検索領域の論文や技術ブログを定期的に紹介する社内勉強会をはじめてみた。 定常的に開催されることが一番大事だよねという方針になったので、以下のような仕組みで、可能な限り低コストで継続できるような仕組みにした。
参加者は何も準備をしなくても大丈夫で、勉強会中に紹介された論文をみたり話を聞くだけで良い 発表者は凝った資料は用意するのは必須ではなく、極論論文を画面共有で見せながらしゃべるだけでも問題なし 当面の目標としては、来年の年末まで継続されているように気長に続けていきたい。
第一回は、発起人の一人である自分がクエリ分類について発表を行った。
Query Understanding for Search Engines (The Information Retrieval Series, 46) の第二章を主にテーマとして取り上げて紹介した。
メイントピックは KDDCup2005 として開催されたクエリ分類コンペの優勝者の手法について紹介を行ったので、気になる方はスライドを公開しているので御覧ください。
このコンペの特徴として、
データセットが生データ特有の問題として汚い そしてラベルデータの規模がとても少ない という鬼畜仕様だった。 だがコンペ参加者はそんな状態を物と物せずにありとあらゆる手段で精度向上に努めていてそれらの手法と姿勢がとても参考になった。
Query Understanding の包括的な解説は 晋策さんが書かれた 検索体験を向上する Query Understanding とは がわかりやすいのでおすすめです。
検索領域は本当に奥深い&amp;hellip;</description></item><item><title>eコマースの検索と推薦についてのサーベイ論文である 'Challenges and research opportunities in eCommerce search and recommendations' を社内勉強会で発表した</title><link>https://shunyaueta.com/posts/2021-07-10/</link><pubDate>Sat, 10 Jul 2021 23:20:58 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-07-10/</guid><description>SIGIR eCom を探索していたら発見したサーベイ論文の &amp;ldquo;Challenges and research opportunities in eCommerce search and recommendations&amp;quot;が面白かったので、社内の勉強会で発表してきた。
和訳すると、「e コマースの検索と推薦における挑戦と研究トピック」で、e コマースにおける検索と推薦の課題が明瞭に書かれていて非常に面白い論文でした。 自分もまだ検索エンジニアとして日が浅いので、手持ちのパターンを増やせるように日々勉強していますが、この論文のおかげでかなり解像度が上がった。
個人的に面白かったのは、
そもそも、顧客が商品を検索するというタスクの奥深さと面白さが知れる Query Understanding は、非構造なクエリを構造化されたクエリに変換するのが究極的な目標 Learn to Rank(LtR)の実践的な課題点として、LtR 適用時に、Native Ranker とのギャップが発生して非連続な検索結果を返してしまうことがある 実際のクエリから、購入される商品はクエリと商品が関連性が高いとは限らないのでモデルを学習させる際には要注意 Amazon での実例として クエリ「ダイヤモンドリング」に対して LtR を適用すると、実際のクエリとそれに紐づくランキングシグナルから学習すると、「ダイヤモンドリング」というクエリで、「ジルコニウムリング」が大量に購買されていたので LtR では、「ダイヤモンドリング」というクエリに対して、「ジルコニウムリング」を表示するようになってしまった これは、学習データを全く見ないで適用するとそうなりそうだけど、広範囲に影響を及ぼす LtR の QA は非常に骨が折れそう Ref: Amazon Search: The Joy of Ranking Products スライド作成元の Markdown ファイルはhurutoriya/deckはこちらです。 スライド内のリンクに簡単にアクセスできます。
e コマースでの検索に改善したいけど何したらいいかわからんという人は、とりあえずこれ見れば OK という論文だったので読めてよかった
余談 Matching &amp;amp; Ranking の章までを解説したけど、それでも 45m 喋りっぱなしで最後のほうがかなり駆け足になってしまった。 また、英語での発表になったけど、やはり熟れたわかりやすい発表レベルに達するには、まだまだだなぁ感じた。精進せねば
今回スライド作成に Marp を使いましたが、VS Code 上でスラスラとかけつつ読みやすくテンションの上がるデザインに簡単にできて感動しました。これからも愛用したいなと思います。
年末くらいに、検索エンジニアとして 9 ヶ月経過するので、役になった学習リソースなどをまとめたい</description></item><item><title>[抄訳] 検索エンジンの達成度と検索チームの成熟度モデル</title><link>https://shunyaueta.com/posts/2021-05-12/</link><pubDate>Wed, 12 May 2021 22:33:23 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-05-12/</guid><description>@rilmayer_jp さんのツイート をきっかけに、検索チームの成熟度モデルの存在を知りました。ありがとうございます!
Eric Pugh さんが、検索エンジンに関する会議で公演した内容で、検索チームがどのように成熟していくかをモデル化しており、それが面白かったので備忘録として残しておく
更新 2021/05/13 : 原著者のEric Pugh さんから、抄訳のご快諾いただけました。ありがとうございます 翻訳元資料 Search Relevance Organizational Maturity Model slide Haystack LIVE! 2020 Search Relevance Organizational Maturity Model 検索エンジンのレベル 検索エンジンへの要求をどれだけ満たしているかをピラミッド構造でわかりやすく説明している
検索チームの成熟度モデル 7 項目の検索チームの評価項目を考え、3 段階で評価を行う
ビジネス 顧客の要求の理解 検索技術 実験駆動 UX コンテンツ強化 データ保有 発展 ステークホルダーがリアルタイム KPI を使用している データ解析から質的なデータを得ている カスタムプラグインを作成している A/B テスト、オフラインテストをサポートしている 革新的な発見性を提供している(chatbot, 等) NLP やデータサイエンティストの専任チームが取り組んでいる 多種多様な、複雑かつ大規模なデータを扱っている 実践 不定期にレポートを行っている いくつかのユーザーテスト、基礎的な分析を行っている 関連性のための複雑な設定、プラグインの使用をしている 実験は適用可能だが、A/B テストなどはできない 発見しやすくするための UI を提供している 分類学や概念体型の適用をしている データの複雑度の監視している 基礎 ビジネスインパクトが測定されていない クエリログは存在しない、またはユーザーテストを行っていない 技術スタックを適度に調整している 検索のテストは手作業で行い、デプロイは低頻度 1 ページに 10 個の検索結果がある 僅かな取り組み(シノニムなど) とても単純なデータモデル 感想 ひと目で</description></item></channel></rss>