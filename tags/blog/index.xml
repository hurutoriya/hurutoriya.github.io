<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog on hurutoriya</title><link>https://shunyaueta.com/tags/blog/</link><description>Recent content in blog on hurutoriya</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 28 Apr 2023 00:42:27 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog のテーマを PaperMod から hugo-bearblog に変更</title><link>https://shunyaueta.com/posts/2023-04-28-0042/</link><pubDate>Fri, 28 Apr 2023 00:42:27 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-04-28-0042/</guid><description>PaperMod は非常に綺麗な見た目で気に入っていたが、もっと簡潔なテーマにしたいなとふと思い立ち、良さそうなテーマを見つけたので変更した。
変更前: https://github.com/adityatelange/hugo-PaperMod 変更後: https://github.com/janraasch/hugo-bearblog Masellum/hugo-theme-nostyleplease: a (nearly) no-CSS, fast, minimalist Hugo theme ported from riggraz/no-style-please.の究極の簡潔さも非常に気になったのだが、code block や tag を扱っていないなど担保したい機能も削ぎ落とされていたので、今回は採用は見送った。 が、この発想はしびれました。
見た目も Web 1.0 の更にその前な感じがしてもはや面白い</description></item><item><title>slug の作成パターンを変えて、同日に複数の記事を執筆できるようにした</title><link>https://shunyaueta.com/posts/2022-04-24-0026/</link><pubDate>Sun, 24 Apr 2022 00:26:07 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-04-24-0026/</guid><description>slug とは、URL 末尾の識別子のこと1で、hugo では自分だと記事を書く際に Makefile で以下のコマンドで作成していた。
new: ## Make new post with date as slug hugo new posts/$(shell date &amp;#39;+%Y-%m-%d&amp;#39;)/index.md いろんな考えがあるが、自分は slug の作成時に頭を全く使いたくないので、以前からdate コマンドを使ってYYYY-MM-DDの形式で slug を作成している。 SEO などのために、slug にタイトルを入れるパターンもあるが、記事の作成の流れとして自分は、
ドラフトを hugo new で作成。この時点でタイトルはまだ確定していない 書き上げていくうちにタイトルを最終決定 なので、タイトルは slug に含めない派。
だが、従来の date '+%Y-%m-%d' の欠点として同日に複数の記事を作成すると衝突してしまうと問題があった。 今まではそれを避けるために、メモ帳に下書きを書いてあとからコマンドを打って記事を作成して対処していた。
が、それもめんどくさいと感じたので、
date '+%Y-%m-%d' → date '+%Y-%m-%d-%H%M'
にして、 date コマンドに時間と分数を末尾に追加するように slug 作成コマンドを変更した。
これで、同じ日に複数の記事を書けるようになった。
Why ‘slug’ and not ‘permalink’&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>GitHub discussion を使ったコメントシステム giscus を導入</title><link>https://shunyaueta.com/posts/2022-01-19/</link><pubDate>Wed, 19 Jan 2022 00:21:05 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-01-19/</guid><description>Blog にコメントシステムを採用したいなと思って giscusを入れてみた。
経緯 Blog を読んだ際にコメントするまでではないけど、書いた人に対するシグナルとして、絵文字リアクションという仕組みがとても好き。 Medium だと clap 👏 だったり、はてなだとはてなスター ⭐️ ですね。また Slack や GitHub の emoji reaction も同じ発明だと思う
また、はてぶや Twitter 以外でも感想が書ける場所があると良いのではと思いコメントシステムを Blog に導入してみた。
選定基準 コメントシステムの採用候補は２つ
utterances : GitHub issues をベースにしたコメントシステム giscus: GitHub Discussions をベースにしたコメントシステム 両者とも OSS で、コメントのデータを GitHub 上で保持できるのが魅力的。 DISQUSも同じ機能を提供してくれているが、自分のデータは自分で持ちたいかつデザインが激しめな印象があるので、uttrances, giscus が候補に残った。
両者ともデザインシンプルで良い。
だが、giscus は コメントを取り扱うなら issues ではなく Discussions のほうが適しているという動機から作られた。
giscus は記事に対してリアクションができたり、コメントに関する voting もあるので、迷わず giscus を採用する流れとなった。
確かに issues よりも GitHub Discussions のほうがコメントという概念に適していると思う。
というわけで GitHub でサインインすれば記事末尾にて、giscus を通じてコメントやリアクションができるようになりました。 Hugo への組み込みは、同じ Hugo で giscus を導入している方の記事1を参考にしました。</description></item><item><title>投げ銭サービスのBuy me a cofee をBlog に導入してみた</title><link>https://shunyaueta.com/posts/2021-12-04/</link><pubDate>Sat, 04 Dec 2021 22:24:38 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-12-04/</guid><description>@potato4d さんや @takuti さんが Blog に Buy me a cofeeを導入していて、自分も導入したいと思いたち、導入してみた。
やったこととして、Blog 記事の末尾に、サポート機能として自分のbuy me a cofeeページへのリンクが表示されるようにした。
導入経緯 以下のポストに強く共感と興味を持った。特に良い文章は抜粋しておく
情報に対して価値を感じてくれた人に還元してもらえるのは素直に嬉しい
ブログに Buy Me a Coffee の投げ銭導線を設置した @shu223 さんの とにかく、「技術の発信」でも収入が得られる時代が到来しつつある
技術書でご飯は食べられるのか？ #技術書典 技術で稼げるようになった今、内発的動機（興味）があっても外発的動機（お金）が伴わないと優先度が上がりにくいということは起きていて、だからこそ勉強自体でも稼げるようよう仕組み化したいと思っていて、それが去年から試行錯誤してる「技術情報発信のマネタイズ」です。 tweet
の方針に凄く興味と共感が持てた。
拝金主義というわけではなく、投げ銭文化自体が凄く良い文化なので自分もその波に乗ってみたさがあり、導入してみた。
zenn や note でも良い記事だなと思った際には、投げ銭をしたりするが、個人 Blog でも簡単にその機能が作れるのは良い時代になった。
もし自分が価値ある情報を提供することで、誰かの助けになり、その人達が還元してくれたなら凄くよいなと思った。業界全体がその流れになると面白いと思う。
早速、この前書いた記事 を友人に送ったら、メンテナンスお疲れ様の意をこめて Coffee ☕️ を奢ってくれた。
へんたい運用お疲れ様でした link
手探りで作った記憶が蘇る。開発、メンテとありがとう link</description></item><item><title>Hugo で記事の更新日をgitと連携して自動的に取得して表示させる</title><link>https://shunyaueta.com/posts/2021-10-06/</link><pubDate>Wed, 06 Oct 2021 20:38:58 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-10-06/</guid><description>最近昔書いていた技術記事の情報が古くなりすぎて不正確なこともあったので、書き直すときがあったのだが、そのときに自動的に最終更新日を記事に表記できないか探していたら、実現方法があったのでメモしておきます。
やっていることは Last Modified Date with Hugo の記事をと完全に一緒だが、日本語での情報が無かったので備忘録がてら記録を残す。
Hugo は各ページに関する情報をFront Matter Variables という仕組みで Markdown 上に定義します。 主に YAML 形式で記述されていることが多いです。
lastmod という変数が更新日を表す変数であり、この変数に対して更新日の情報を与えてやれば記事の最終更新日を表現することができる。
Front Matter に lastmod: &amp;quot;2021-03-31&amp;quot; の形式で与えておけば、以下の形式で記事作成日と最終更新日を表記できる。
{{ $date := .Date.Format &amp;#34;02.01.2006&amp;#34; }} {{ $lastmod := .Lastmod.Format &amp;#34;02.01.2006&amp;#34; }} &amp;lt;p&amp;gt;Published on: {{ $date }}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;Edited on: {{ $lastmod }}&amp;lt;/p&amp;gt; だが、毎回記事を編集するたびに lastmod 変数を追記するのは面倒なので自動化できるなら自動化したい。
config.yaml で、以下の設定を行う。
enableGitInfo: true enableGitInfoを trueにすることで、各ページに対してGit 情報を更新日として付与してくれる。
最後にconfig.yaml で以下の設定を行えば、 Front Matter の lastmod 変数に対して、 Front Matter で定義されているlastmod、もしその情報がなければ各ページの gitの最終コミット日を返すという設定がされる。
frontmatter: lastmod: - lastmod - :git 参考になると思うので、当ブログでの実際の変更点はこちら</description></item></channel></rss>