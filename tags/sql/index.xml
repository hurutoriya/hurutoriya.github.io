<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL on Software Engineer as Data Scientist</title><link>https://shunyaueta.com/tags/sql/</link><description>Recent content in SQL on Software Engineer as Data Scientist</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 09 Feb 2021 23:27:37 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Standard SQLで 列と列の組み合わせの数を集計したい</title><link>https://shunyaueta.com/posts/2021-02-09/</link><pubDate>Tue, 09 Feb 2021 23:27:37 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-02-09/</guid><description>group by は集計作業において根幹となる処理ですが、少し手の混んだ集計をしたいときに毎回調べていることが多かったのでここに学んだことをまとめておく
今回やりたいことは
A列がαになっている行のB列の種類を集計したい
です。
はじめに 実際のデータを用意したほうが、理解が深まるので擬似的なテーブルを作成する。 テーブルのデータの概略として、何日にsender (送信者) が receiver (受信者) にいくら送金(price)したかを格納しているテーブルとする。
StandardSQLはWITHを使って簡単にモックテーブルを作れるのが良いところ。
#standardSQL WITH `transactions` AS ( SELECT &amp;#39;A&amp;#39; AS sender, &amp;#39;B&amp;#39; AS receiver, 600 AS price, &amp;#39;2020-01-01&amp;#39; AS day UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, 1200, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, 600, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, 2000, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;D&amp;#39;, 3000, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;D&amp;#39;, 2000, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, 700, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, 300, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;, 250, &amp;#39;2020-01-01&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, 400, &amp;#39;2020-01-02&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, 1000, &amp;#39;2020-01-02&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, 1200, &amp;#39;2020-01-02&amp;#39; UNION ALL SELECT &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, 2000, &amp;#39;2020-01-02&amp;#39; UNION ALL SELECT &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, 450, &amp;#39;2020-01-02&amp;#39; UNION ALL SELECT &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, 500, &amp;#39;2020-01-02&amp;#39; ) SELECT * FROM transactions sender receiver price day A B 600 2020-01-01 A B 1200 2020-01-01 A B 1800 2020-01-01 A C 2000 2020-01-01 A D 3000 2020-01-01 A D 2000 2020-01-01 B C 700 2020-01-01 B C 300 2020-01-01 B D 250 2020-01-01 A B 400 2020-01-02 A B 1000 2020-01-02 A B 1200 2020-01-02 A B 2000 2020-01-02 B C 450 2020-01-02 B C 500 2020-01-02 列と列の組み合わせの数を集計する 日次ごとに送金者が何人に送ったかを集計したい、つまり(sender, receiver)のペアを考えて、sender を固定した上で何人に送金したいかを集計したとする。 上記のデータだと</description></item></channel></rss>