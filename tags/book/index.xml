<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>book on hurutoriya</title><link>https://shunyaueta.com/tags/book/</link><description>Recent content in book on hurutoriya</description><image><title>hurutoriya</title><url>https://shunyaueta.com/ogp.jpg</url><link>https://shunyaueta.com/ogp.jpg</link></image><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 24 Mar 2023 23:18:51 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/book/index.xml" rel="self" type="application/rss+xml"/><item><title>同僚との雑談で情熱プログラマーはやはり良いぞという話で盛り上がる</title><link>https://shunyaueta.com/posts/2023-03-24-2318/</link><pubDate>Fri, 24 Mar 2023 23:18:51 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-03-24-2318/</guid><description>Slack の huddle で同僚の @yaginuuun さん、 @frsw さんが雑談をしており、自分が乱入したときに
「強くなりたいっすよねぇ~」という話をしており(途中から乱入したので適当いっているかも)、
そこで、自分が強い弱いだと、情熱プログラマーの
一番の下手くそでいよう - Be the Worst -
って弱いポジションをあえて狙いにいって、強くなろうぜって考えめっちゃ良いですよねという話で @frsw さんと盛り上がり、この本は僕らめっちゃ好きでという布教活動をしていると、 @yaginuuun さんが書籍の購入を終えて読み始めており、その行動の速度感に感動。
ソフトウェアエンジニアの寓話系の書籍は僕は好きでちょこちょこ読むんですが、情熱プログラマーは一番好きだと言える書籍
また、最終出社日 - kmuto’s blogで、情熱プログラマーの編集者である kmuto さんの記事で知ったんですが、情熱プログラマーは初期は「My Job Went To India オフショア時代のソフトウェア開発者サバイバルガイド」というタイトルで、その後、情熱プログラマーに変わったというネタを共有して盛り上がった。
好きなことを雑に語れる場ってのは楽しいですねぇ</description></item><item><title>「私たちは子どもに何ができるのか」を読んだ</title><link>https://shunyaueta.com/posts/2023-01-18-1001/</link><pubDate>Wed, 18 Jan 2023 10:01:56 +0900</pubDate><guid>https://shunyaueta.com/posts/2023-01-18-1001/</guid><description>私たちは子どもに何ができるのか――非認知能力を育み、格差に挑むを読んだ。
3 行感想 非認知能力というのは、環境によって育まれるものであり、明示的にそのスキルを伸ばそうとして伸ばせるものではない 子供の感情の揺れ動きをサポートするために、予期しないことが発生しない平穏な環境を提供するのが親の役目。予期しないことが起こったとしても、親は決して直情的な反応をせず淡々と、共感して、愛情を持って接する 愛情を持って接する介入効果で、子供の身体的成長にも好影響を及ぼした結果とかあって人類面白すぎる 短く端的にどんなことが影響があるのか、何を親は徹底すべきなのかが明示的に書かれている。(総ページ数も 120p ほどでサクッと読めます)
特に、自分が持っていた疑問である
「で、結局非認知能力がもてはやされいるけど、どうやって伸ばすの結局何なの?」
のしっくりした答えがここに書かれいて、この点だけでもよかった。</description></item><item><title>「リーダーの作法」マネジメントに限らず、エンジニアとして仕事の作法について書かれた良書</title><link>https://shunyaueta.com/posts/2022-08-08-1145/</link><pubDate>Mon, 08 Aug 2022 11:45:24 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-08-08-1145/</guid><description>リーダーの作法 ささいなことをていねいにを読み終えた。 著者は Netscape でマネージャー、Apple でディレクター、Slack でエグゼクティブを経験した Michael Lopp さんで、過去にBeing Geek や Managing Humans を書かれている。 翻訳の質も非常に高く、楽しく読めた。1
そんなにマネジメント関係を読んでいるわけではないが、HITH OUTPUT MANAGEMENT や、エンジニアのためのマネジメントキャリアパス ―テックリードから CTO までマネジメントスキル向上ガイド 同じくらい良い書籍で、学びや共感を多く感じた。
自分はマネジメントのポジションについたことはないが、仕事をしていくなかでマネジメント関係のソフトスキルや複数人でどうやってうまくリーダシップを発揮して、大きい問題を解決するかに興味があるので、良い書籍が目につくと積極的に読んで解像度をあげている。
心に響いた文章と所感 マネジメントとは、まずチームが直面している障害やメンバー間の軋轢といった情報を明らかにすることであり、さらにそうして得た情報を分析して、進むべき正しい道を見出すことである、ということでした。
マネジメントの定義として、チームの課題は他の書籍でも述べられているがメンバー間の関係性について言及しているのは確かにねという腹落ちだった。
ポジションに関わらず全ての業務で一貫して言えるのは、なにが最も ROI が高い課題かを突き止めて地道に解決していくことだな~と思える。
6 章 プロフェッショナルとしての成長を図る質問表
6 章の成長を計測するための質問表は、あらためて自分が何をやりたいのかの解像度をあげる良い質問集だったので半年や一年ごとにこの質問を更新して、定期的に見つめ直していきたい。
新しい仕事では、一刻一刻で多くを学びます。その環境に関する情報をたくさん集めているのです。チームや自分の役割、そして会社についての自分の理解を日々新たにしているのです。
新メンバーがあげるチームの違和感は、フィードバックをもらった後に一ヶ月後見直して見ると重要度が下がることがあるよねと。これは、自分も経験あるが、チームで働くうちに内部の事情を理解して、重要だけど緊急じゃないよね、実際やりたいけどコスト的に割に合わないなど課題に対しての解像度があがることで、優先順位が変わることがありました。
そういう人たちが長年にわたって私に教えてくれた重要な教訓の一つは、壁に書かれた文字より、語られるストーリーの方が重要だということです。
ここで腹落ちしたのは、あらためて人を動かすのは物語(ストーリーテリング)だということ。「なぜ」 そうなったのかってものすごく重要だなと。DesignDocs もそうですが、なぜそうなったかがわかると人間ってものすごく腹落ちして理解できるな~と 自分もドキュメントを書くときは、「なぜ」そうなったのかをきちんと書いて人を動かせる文章を書けるようになっていきたい
手厳しいフィードバックの場合は、何も見落とさないようにするためにあと 2 段階のプロセスがあります。ステップ 1：どんなに批判的なフィードバックであっても、耳を傾け、ほんの少しでも理解の糸口を探す。ほんのわずかでも？よくぞ聞いてくれました。
時には、フィードバックがあまりにも衝撃的で、理解できないこともあります。そこで、第二のステップです。ステップ 2：聞いたことを繰り返しましょう。
ここのストーリーは面白くて、図星な本質的なフィードバックを感情的に反応しそうになってしまうのをどうやって傾聴して、フィードバックを受け入れて自己を改善するかが語られていて面白かった。
リアルタイムにフィードバックし、他のプレイヤーに親切かつ教育的な方法でアドバイスを送ります。災難に直面しても冷静さを失いません。わかりやすいコミュニケーション、実証された専門知識、わかりやすく行動につながるフィードバック、そして落ち着いた性格。堅実なリーダーの性質について説明しましたが、まだ大切なことがあります。いいでしょうか、こうしたふるまいは、多くの人がやっているのをこれまで見てきました。DJ が特別なのは、常にこのようなリーダーであることです。
ゲームを通して、リーダー像がどのように振る舞うべきなのかを説明しており、非常にわかりやすかった。
リーダーシップとは、他人に見せるために選ぶ服であり、私は揺るぎない優しさを選びます。
そして、書籍の最後の文章が、まさに「リーダーの作法」という心構えであり定期的に見返したい。
全体を通して、エッセイとして語られて教訓を学べるので楽しく読めた。2 他の書籍と比較すると、リーダーとして情緒的にどう振る舞うべきかも触れている点が、個人的に読み応えがあった。 自分があらためてマネジメントのポジションにつくことがあれば読み返したくなる書籍だった。
総じて、自分が体験したトピックは強く共感を抱けて学びが多かったというのが興味深い。 ビスマルクの名言で「愚者は経験に学び、賢者は歴史に学ぶ」があるが、自分も本を読むことで歴史から学んでいけるようになりたい。 そのために最近習慣化したいので、読んだ後に読書ノートを作ってちゃんと振り返ることで定着できないか試行錯誤中。 Obsidian にノートをまとめるようになってからは、読書ノートを作るのも楽しくなったので、良いツールは習慣化形成にも役立ちますね。
プライベートで書籍の翻訳プロジェクトを勧めているのだが、このような本が母国語で読める環境はあらためて素晴らしい文化だなと強く思うようになった。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
蛇足) 13 章のストーリーが個人的に一番笑える皮肉が書いてあって、一読の価値あり。 当たり前のことをきちんとやるって、難しいけどその作法は大事。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>自走プログラマーを読み終えた</title><link>https://shunyaueta.com/posts/2020-05-10/</link><pubDate>Sun, 10 May 2020 17:13:34 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-05-10/</guid><description>自走プログラマーを読み終えた。
読み始めたきっかけとして、自分は機械学習エンジニアとして現在働いているが、できることの幅を広げるために最近はソフトウェアエンジニアとしてのスキルをもっと伸ばしたいと考えている。
自走プログラマーは、Python を使ったアプリケーション開発のアンチパターンとベストプラクティスを例示して学ぶことができる書籍で、今回の自分の状況にすごくフィットしていて楽しく学習することができた。
Python 独特のはまりどころは、Kindle: The Hitchhiker’s Guide to Python, The Hitchhiker’s Guide to Python でも数多く参照されていて、こっちも後から読んでおきたいなと思いました。
次は、ちゃんとした Pythonista になれるように、Fluent Python を読みます。@ynqa さん、以前この本を教えて下さり、ありがとうございました。
長らく積ん読になっていますが、毎日読み進めていきます。
20 歳頃の寝る間を惜しんで、ウェブアプリを開発していたときのワクワク感が徐々に蘇ってきた気がしています。
ある程度書けるようになってきたら、なにかアプリとか作って公開したいなと思っています！</description></item><item><title>ビジネスでインパクトが出せるデータサイエンティストになるには</title><link>https://shunyaueta.com/posts/2019-09-23/</link><pubDate>Mon, 23 Sep 2019 18:48:47 +0900</pubDate><guid>https://shunyaueta.com/posts/2019-09-23/</guid><description>@pseudo_finite さんから
「ビジネスでインパクトが出せるデータサイエンティストになるためには」
をご恵贈していただいたので、感想をここに記します。
経営システム誌に寄稿したものができました。30 部あるので欲しい方はお声がけください。
私の 10 年間の経験を整理して中堅のデータサイエンティスト向けに書いたものになります。批判的なフィードバックなどいただけると嬉しいです。(@pseudo_finite) tweet January 18, 2019
批評 1. データサイエンティストが力を発揮する場 データサイエンティストとして成果を発揮するには、事業ドメイン・そしてデータの規模と質に依存する
圧倒的に同意です。自分も現職に就職する際には、データ規模・質・種類や社内のデータに関する文化などを考慮して会社を選びました。 最後の一文も完全に同意で、良いデータさえあれば基本的に問題は解きやすく簡単になると思っています。
2. 課題設定 データサイエンティストの仕事の肝は適切な課題設定
本質的な課題設定とはそもそもなんなのかと考えてみます。
ここで、本質的な課題設定を解明するための大きな障壁になるのは、
自社が事業会社か ドッグフーディングできるサービスを運営しているか どうかではないでしょうか?
日常的に自社のサービスを使っていると、顧客視点での改善点や課題点などを見つけることができる。 また、サービスをより深く知ることで深い考察や客観的な観察をすることができる。 スタートアップ界隈では浸透している リーンスタートアップの考え方は、本質的な課題の発見に非常に相性が良いと思っています。
また、データ分析では、単なる集計や相関ではなく、顧客がどんな状況で何をしたいのかを考えてユーザーリサーチをすることも非常に重要です。 ジョブ理論 イノベーションを予測可能にする消費のメカニズム で語られているトピックですが、非常に勉強になります。
3. 解決方法の設定 自然なモデリングと実現可能性のあるモデリング
自分はデータサイエンティストではなく、機械学習エンジニアとして働いているので、その立場からの視点です。 実感するのはまず何よりも実装力が大事だと思います。
実装ができるからこそ、実験ができる。その実験から知見を得て改善のサイクルが回り始める。
関連する暦本先生の tweet が面白かったので、ご参考まで
深層学習時代になってますますですが研究者のコード書きは開発というより未解決の問題や仮説に決着をつける行為、サイエンスにおける実験そのものなのでコード書かない人がどうやって研究してるのか想像つかないです🤔 https://t.co/mojhTqHqmx
&amp;mdash; Jun Rekimoto : 暦本純一 (@rkmt) September 16, 2019 4. 検証 施策実行後の検証は必須
個人的には自分が最も重要だと思う点はここである。 確かに施策が成功したら、燃え尽きたくなる気持ちはわかるが、なぜ成功したのかを解明して再現性を担保しなければ知見としてストックされない。 そして知見の溜め込みの速さ・多さこそがビジネスとしての優位性につながるのではないのだろうか? これこそ、まさに科学的思考の本幹ですね。
5. 育成 データサイエンティストの育成は非常に難しい
育成の点は、自分も最近考えていたことですが、
例えば研究室のセミナーや論文の赤入れなどで議論をしたからこそ科学的思考方法が身についたのか? を考えていました。
僕の結論では、 強い相関はあれど研究室での議論により全員が身科学的思考方法を会得するのは難しいのではないかと思っています。 (もちろん全員が身につけることこそ、研究室の本懐だと思います)</description></item></channel></rss>