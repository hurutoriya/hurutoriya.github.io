<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>circleci on Shunya Ueta</title><link>https://shunyaueta.com/tags/circleci/</link><description>Recent content in circleci on Shunya Ueta</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 04 Oct 2021 22:23:24 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/circleci/index.xml" rel="self" type="application/rss+xml"/><item><title>CloudComposer のDAGをCIで更新する</title><link>https://shunyaueta.com/posts/2021-10-04/</link><pubDate>Mon, 04 Oct 2021 22:23:24 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-10-04/</guid><description>Cloud Composer(Airflow) のDAGをGitHub リポジトリで管理して、CIによりリポジトリで管理しているDAGをPull RequestがマージされるとCloud ComposerのDAGへ同期する方法について説明する。
DAGは、ルートディレクトリ直下の dags/ というディレクトリに格納されている状態を前提とする。
以下の２つのコマンドラインツールを利用して実現できる。
Service Account の認証のために gcloud DAGの同期のために gsutil CircleCI によるワークフローの記述例は以下のとおり
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 version:2.1jobs:rsync-dags:working_directory:~/workspacedocker:- image:gcr.io/google.com/cloudsdktool/cloud-sdk:alpineenvironment:GOOGLE_APPLICATION_CREDENTIALS:/gcp-service-key.jsonsteps:- checkout- run:name:SyncDAGfoldertoGCS&amp;#39;sDAGfoldercommand:| echo &amp;#34;${CLOUD_COMPOSER_CREDENTIALS_JSON}&amp;#34; &amp;gt; ${GOOGLE_APPLICATION_CREDENTIALS}gcloudauthactivate-service-account--key-file${GOOGLE_APPLICATION_CREDENTIALS}gsutil-mrsync-d-rdags\&amp;#34;$(gcloud composer environments describe {COMPOSER_NAME} --project={GCP_PROJECT} --location={REGION} --format=&amp;#34;get(config.dagGcsPrefix)&amp;#34;)&amp;#34;workflows:rsync_dags:jobs:- rsync-dags Sync DAG folder to GCS's DAG folder で行っている内容を順を追って説明する。
サービスアカウントのクレデンシャルファイルを環境変数として保存しておき、リダイレクトによりJSONファイルとして書き出す 1 echo &amp;#34;${CLOUD_COMPOSER_CREDENTIALS_JSON}&amp;#34; &amp;gt; ${GOOGLE_APPLICATION_CREDENTIALS} 注意: セキュリティ対策としてクレデンシャルファイルは必ず環境変数として扱いましょう。</description></item><item><title>CircleCI アプリ内の設定ファイルエディターを利用して、CI上の環境変数などローカルCLIでは確認できない挙動を素早く確認して修正する</title><link>https://shunyaueta.com/posts/2021-10-01/</link><pubDate>Fri, 01 Oct 2021 20:39:06 +0900</pubDate><guid>https://shunyaueta.com/posts/2021-10-01/</guid><description>TL;DR; Pull Requestのコミット履歴を汚さずにCircleCIのConfigmap をWeb上で編集して、CIの挙動をすぐ試せる機能がすごく便利 課題点 CircleCI の上のCIの挙動のデバッグをする際、ブランチにプッシュをせずに挙動が確認できる方法としてローカルCLIを利用する方法がある。 しかし、CIのマシン上で定義されている環境変数などは、ローカルCLIを使用しても確認することができない。
そのためコミットでCIが失敗している際には、
Rerun Job with SSHを利用してSSHで接続して、環境変数を確認 再度 config.yml を修正して、コミットをプッシュ だが、上手くいかないので1→2を繰り返す を繰り返してしまい、コミット履歴が不用意に汚れてしまう。
解決方法 この問題点を解決する方法として、CircleCI アプリ内の設定ファイル エディターを利用するのがすごく便利だった。
この機能は、ジョブのページの右上からアクセスできる。 Rerun ボタンの右に... ボタンがあり、そのボタンをクリックすると
Project Settings Configuration File の選択項目があり、Configuration File をクリックすると、config.yml のウェブエディターが起動する。 エディターでYAMLファイルを編集後、右上のSave and Runボタンをクリックすれば、PRで作成されているブランチと別のリモートブランチがCircleCIによって新たに作成されるので、もとのPRのコミット履歴を汚さずにCIの問題を修正できる。
Reference CircleCI アプリ内の設定ファイル エディターの使用</description></item></channel></rss>