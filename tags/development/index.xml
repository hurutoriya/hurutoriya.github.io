<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Shunya UETA</title><link>https://shunyaueta.com/tags/development/</link><description>Recent content in Development on Shunya UETA</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2016-20 &lt;a href='https://twitter.com/hurutoriya'>@hurutoriya&lt;/a>.</copyright><lastBuildDate>Mon, 23 Apr 2018 15:38:10 +0000</lastBuildDate><atom:link href="https://shunyaueta.com/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Colaboratory で Mecab-ipadic-Neologd を使うまで</title><link>https://shunyaueta.com/posts/2018-04-23_google-colaboratory-%E3%81%A7-mecabipadicneologd-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%BE%E3%81%A7/</link><pubDate>Mon, 23 Apr 2018 15:38:10 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-04-23_google-colaboratory-%E3%81%A7-mecabipadicneologd-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%BE%E3%81%A7/</guid><description>Colab 上で 日本語の NLP をしたいときありませんか？
Success
Code Google Colabratory https://colab.research.google.com/drive/1YK8XFnfD29775lEYWhwz3wh4h8boR9iE</description></item><item><title>How to install faiss</title><link>https://shunyaueta.com/posts/2018-02-27_how-to-install-faiss/</link><pubDate>Tue, 27 Feb 2018 05:50:27 +0000</pubDate><guid>https://shunyaueta.com/posts/2018-02-27_how-to-install-faiss/</guid><description>faiss : Billion-scale similarity search with GPUs
faiss : Billion-scale similarity search with GPUs
You mainly follow : https://github.com/facebookresearch/faiss/blob/master/INSTALL.md
Env : Mac OS X 10.12.6
Not Tag, Note commit hash:commit cd884114d0a8e1789f257b524e5345bc5b26e6b2 ``_2018.02.24 : New version of Faiss!
What's new?
Support for on-disk inverted lists (see https://github.com/…/f…/blob/master/demos/demo_ondisk_ivf.py). Enables handling of datasets that do not fit in RAM. We tested it on up to 53B vectors, with a 2TB index. Tutorial and examples for using Faiss on one or more GPUs (see https://github.</description></item><item><title>HerokuのDBにpgadmin4で接続してローカルにデータをダウンロードする</title><link>https://shunyaueta.com/posts/2017-12-27_heroku%E3%81%AEdb%E3%81%ABpgadmin4%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%A6%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</link><pubDate>Wed, 27 Dec 2017 08:12:17 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-27_heroku%E3%81%AEdb%E3%81%ABpgadmin4%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%A6%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/</guid><description>pyadmin4 で Heroku 上の DB に接続する記事が日本語になかったので、メモ
接続前の準備 Heroku にログインして、対象の App の DB のページへ
Heroku App DB page
そこから DB のセッティングページにある credential ボタンをクリック
click credential button
そこに記載されている各種情報を pgadmin4 に入力して Heroku 上の DB に接続する
Copy information
pgadmin4 で Heroku の DB に接続 以下のページから pgAdmin4 をダウンロード
Download
そこからアプリを開くと下記の画面になるので、Add new Serverをクリック
Click Add New Server
Heroku 上の DB の情報を入力していく。Server の名前は適当で大丈夫です。
接続されるとこんな感じになります。
Query Tool Query Toolを使うことで Heroku 上の DB に対して SQL クエリを投げる事ができます。
Query Toolは上部のツールバーからアクセス可能です。 注意) 左カラムのテーブルをクリックした後でないとアクティブになりません。</description></item><item><title>Jupyter上でSVGのイラストやアニメーションが作成できるプラグイン egel</title><link>https://shunyaueta.com/posts/2017-11-22_jupyter%E4%B8%8A%E3%81%A7svg%E3%81%AE%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%82%84%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E4%BD%9C%E6%88%90%E3%81%A7%E3%81%8D%E3%82%8B%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3-egel/</link><pubDate>Wed, 22 Nov 2017 12:04:30 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-11-22_jupyter%E4%B8%8A%E3%81%A7svg%E3%81%AE%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88%E3%82%84%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E4%BD%9C%E6%88%90%E3%81%A7%E3%81%8D%E3%82%8B%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3-egel/</guid><description>アイデアは面白い… けど easy drawingではない
Jupyter使ってると作図もJupyter上で完結させたいなぁ~って思うときがあるんですが、スクリプトで作図はけっこう辛いものがあります
そのためJupyter上でフリースタイルに作図できる機能ないかなと探してたらegalという面白そうな拡張機能があったので使ってみました
uclmr/egal
egal GIF animation
以下のリポジトリから $pip3 install git+https://github.com/uclmr/egal.gi
でクローンしてきて $jupyter nbextension install --py egal $jupyter nbextension enable --py egal
で拡張機能を有効にして使えるようになります。
ブラシアイコンをクリックすると新たなセルが生成される
👉ボタンをクリックすると各オブジェクトの詳細なプロパティが調整できる
フレーム毎にオブジェクトを設定してアニメーションっぽくもできる
5–6分使ってみて感じましたが、めちゃくちゃ操作がしづらい…
やはりブラウザ上での図形作成はめちゃくちゃストレスたまるので、ローカルでkeynote使って図形作成したほうがマシな感じです。
遊んだ結果をnotebookでgithubにアップしておきました。
残念ながらSVGがGithub上ではレンダリングされないので残念な感じになっております&amp;hellip; ローカルにクローンしてきてegalを有効にしておくと見れます。
hurutoriya/notebook
結論 Jupyterで全てを完結させるのは難しい</description></item><item><title>Djangoで顔認識の結果をJSONで返す最小構成のAPIサーバーを作った</title><link>https://shunyaueta.com/posts/2017-11-13_django%E3%81%A7%E9%A1%94%E8%AA%8D%E8%AD%98%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92json%E3%81%A7%E8%BF%94%E3%81%99%E6%9C%80%E5%B0%8F%E6%A7%8B%E6%88%90%E3%81%AEapi%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F/</link><pubDate>Mon, 13 Nov 2017 17:22:38 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-11-13_django%E3%81%A7%E9%A1%94%E8%AA%8D%E8%AD%98%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92json%E3%81%A7%E8%BF%94%E3%81%99%E6%9C%80%E5%B0%8F%E6%A7%8B%E6%88%90%E3%81%AEapi%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F/</guid><description>DEMO
githubでコードを公開してます。
hurutoriya/face_detector_api
Djangoの勉強は、基本的なイントロダクションとしてオフィシャルサイトのドキュメントが充実しているのでオススメです 。
pyimagesearchのBlog記事で最小限の構成で顔検出を行うAPIサーバーを作る記事があり、今回はそれを基本に作成した。
以下所感です。
DjangoはRailsと比べるとそんなにレールが敷かれていない 日本語の記事がほぼ存在しないので、英語の記事を読む良い練習になった OpenCVやScikit-leanがそのまま動くのは相当魅力的で、サーバからのレスポンスが帰ってきた時には地味に感動 API設計や非同期処理なんかの知識が全く足りない 次の課題 今回の発展形としてdjango-rest-frameworkを使って、モデルを組み込んで作り上げてGoogle Apps Engine上で公開してみよう。 REST Frameworkはこの記事2を参考に画像をアップロードできる雛形は作り上げた。 後はOpenCVで処理を施す部分を書き上げたらいけそう。
django-rest-frameworkで使える管理画面
Thanks hurutoriya/face_detector_api Django REST Frameworkを使って爆速でAPIを実装する,ChristianKreuzberger/django-rest-imageupload-example Creating a face detection API with Python and OpenCV (in just 5 minutes) Django 1.11 Documentation Django REST framework is a powerful and flexible toolkit for building Web APIs. Djangoで顔認識の結果をJSONで返す最小構成のAPIサーバーを作った 以前のBlog記事から転載しました</description></item></channel></rss>