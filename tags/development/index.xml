<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>development on 🦅 hurutoriya</title><link>https://shunyaueta.com/tags/development/</link><description>Recent content in development on 🦅 hurutoriya</description><image><url>https://shunyaueta.com/ogp.jpg</url><link>https://shunyaueta.com/ogp.jpg</link></image><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 28 Apr 2022 21:14:16 +0900</lastBuildDate><atom:link href="https://shunyaueta.com/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPCurl で `Failed to process proto source files.: could not parse given files:` とエラーが出たときの対処方法</title><link>https://shunyaueta.com/posts/2022-04-28-2114/</link><pubDate>Thu, 28 Apr 2022 21:14:16 +0900</pubDate><guid>https://shunyaueta.com/posts/2022-04-28-2114/</guid><description>gRPCurl 1 を使ってリクエストを送る際に、 reflection を機能を使わずに protobufs のファイルを読み込もうとすると
1 Failed to process proto source files.: could not parse given files: ~ no such file or directory とエラーがでてコマンドが実行できなかった。
対処方法としては grpcurl コマンドを実行する際に、-proto フラグを利用するだけではなく、-import-path フラグを指定する必要がある2。
-import-pathフラグの指定により、参照する protobufs の依存関係のパスを grpcurl に伝えることで上記のエラーが解消される。
例えば、protobufs の内部で
1 import &amp;#34;~/---.proto&amp;#34; のように他の protobufs を import していると上記のエラーの発生原因となる。 つまり、-import-pathを指定しないと、import 文を利用していると grpcurl 内部で、参照する protobufs の root path が不明なので、import 文を実行時にパスがうまく処理されずに import がコケてしまうと理解した。
fullstorydev/grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers &amp;#x21a9;&amp;#xfe0e;</description></item><item><title>ソフトウェア開発における Upstream と Downstream の意味</title><link>https://shunyaueta.com/posts/2020-04-27/</link><pubDate>Mon, 27 Apr 2020 23:55:42 +0900</pubDate><guid>https://shunyaueta.com/posts/2020-04-27/</guid><description> Upstream Upstream はそのシステムが依存しているジョブ Upstream のデザインが変わることで、システムも影響をうける Downstream Downstream はそのシステムが影響を与える影響を与える部分 例えば、Web Application などでは、データベースは Downstream となる
e.g. Web service→ Databese という流れでデータが作成される
References https://reflectoring.io/upstream-downstream/ https://softwareengineering.stackexchange.com/questions/71080/what-does-downstream-upstream-design-mean/83686 https://en.wikipedia.org/wiki/Upstream_(software_development) https://en.wikipedia.org/wiki/Downstream_(software_development)</description></item><item><title>HerokuのDBにpgadmin4で接続してローカルにデータをダウンロードする</title><link>https://shunyaueta.com/posts/2017-12-27/</link><pubDate>Wed, 27 Dec 2017 08:12:17 +0000</pubDate><guid>https://shunyaueta.com/posts/2017-12-27/</guid><description>pyadmin4 で Heroku 上の DB に接続する記事が日本語になかったので、メモ
接続前の準備 Heroku にログインして、対象の App の DB のページへ
Heroku App DB page
そこから DB のセッティングページにある credential ボタンをクリック
click credential button
そこに記載されている各種情報を pgadmin4 に入力して Heroku 上の DB に接続する
Copy information
pgadmin4 で Heroku の DB に接続 以下のページから pgAdmin4 をダウンロード
Download
そこからアプリを開くと下記の画面になるので、Add new Serverをクリック
Click Add New Server
Heroku 上の DB の情報を入力していく。Server の名前は適当で大丈夫です。
接続されるとこんな感じになります。
Query Tool Query Toolを使うことで Heroku 上の DB に対して SQL クエリを投げる事ができます。
Query Toolは上部のツールバーからアクセス可能です。 注意) 左カラムのテーブルをクリックした後でないとアクティブになりません。</description></item></channel></rss>